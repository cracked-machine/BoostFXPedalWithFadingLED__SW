
OverDrivePedal_SW_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f4  080022f4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080022f4  080022f4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f4  080022f4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080022fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000088  08002384  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002384  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f86  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001462  00000000  00000000  00026036  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  00027498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  00027bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bfc2  00000000  00000000  00028230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005661  00000000  00000000  000341f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000403e0  00000000  00000000  00039853  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00079c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000182c  00000000  00000000  00079cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022bc 	.word	0x080022bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080022bc 	.word	0x080022bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Resolution)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000230:	401a      	ands	r2, r3
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	fdffffff 	.word	0xfdffffff

08000248 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	2207      	movs	r2, #7
 8000258:	4393      	bics	r3, r2
 800025a:	001a      	movs	r2, r3
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	431a      	orrs	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	615a      	str	r2, [r3, #20]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}

0800026c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	2204      	movs	r2, #4
 800027c:	4393      	bics	r3, r2
 800027e:	001a      	movs	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	431a      	orrs	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	035b      	lsls	r3, r3, #13
 80002a2:	0b5b      	lsrs	r3, r3, #13
 80002a4:	431a      	orrs	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2201      	movs	r2, #1
 80002c2:	4393      	bics	r3, r2
 80002c4:	001a      	movs	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b002      	add	sp, #8
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <LL_ADC_EnableInternalRegulator+0x24>)
 80002e6:	4013      	ands	r3, r2
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0552      	lsls	r2, r2, #21
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	6fffffe8 	.word	0x6fffffe8

08000300 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	2204      	movs	r2, #4
 800030e:	4393      	bics	r3, r2
 8000310:	001a      	movs	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	605a      	str	r2, [r3, #4]
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}

0800031e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	2208      	movs	r2, #8
 800032c:	4393      	bics	r3, r2
 800032e:	001a      	movs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000346:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	430a      	orrs	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b004      	add	sp, #16
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000

08000368 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 800037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4013      	ands	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800039a:	242c      	movs	r4, #44	; 0x2c
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2314      	movs	r3, #20
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 ff81 	bl	80022ac <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80003aa:	251c      	movs	r5, #28
 80003ac:	197b      	adds	r3, r7, r5
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f001 ff79 	bl	80022ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	2318      	movs	r3, #24
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f001 ff72 	bl	80022ac <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff ffb5 	bl	800033c <LL_APB2_GRP1_EnableClock>
  
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ffc8 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration  
  PA7   ------> ADC_IN7 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2203      	movs	r2, #3
 80003e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fc5f 	bl	8001cb6 <LL_GPIO_Init>

  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_7);
 80003f8:	4a29      	ldr	r2, [pc, #164]	; (80004a0 <MX_ADC_Init+0x10c>)
 80003fa:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <MX_ADC_Init+0x110>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff46 	bl	8000290 <LL_ADC_REG_SetSequencerChAdd>
  /** Common config 
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000404:	0021      	movs	r1, r4
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	0152      	lsls	r2, r2, #5
 8000424:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000426:	187b      	adds	r3, r7, r1
 8000428:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <MX_ADC_Init+0x110>)
 800042a:	0019      	movs	r1, r3
 800042c:	0010      	movs	r0, r2
 800042e:	f001 fa45 	bl	80018bc <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <MX_ADC_Init+0x110>)
 8000434:	2100      	movs	r1, #0
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff06 	bl	8000248 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MX_ADC_Init+0x110>)
 800043e:	2100      	movs	r1, #0
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ff36 	bl	80002b2 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_ADC_Init+0x110>)
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff ff0e 	bl	800026c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_ADC_Init+0x114>)
 8000452:	2100      	movs	r1, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff fee3 	bl	8000220 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_ADC_Init+0x110>)
 800045c:	0018      	movs	r0, r3
 800045e:	f7ff ff4f 	bl	8000300 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_ADC_Init+0x110>)
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff ff5a 	bl	800031e <LL_ADC_DisableIT_EOS>
  LL_ADC_EnableInternalRegulator(ADC1);
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_ADC_Init+0x110>)
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ff33 	bl	80002d8 <LL_ADC_EnableInternalRegulator>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000472:	197b      	adds	r3, r7, r5
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	05d2      	lsls	r2, r2, #23
 8000478:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000480:	197b      	adds	r3, r7, r5
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000486:	197b      	adds	r3, r7, r5
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800048c:	197b      	adds	r3, r7, r5
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <MX_ADC_Init+0x110>)
 8000490:	0019      	movs	r1, r3
 8000492:	0010      	movs	r0, r2
 8000494:	f001 f9dc 	bl	8001850 <LL_ADC_Init>

}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b010      	add	sp, #64	; 0x40
 800049e:	bdb0      	pop	{r4, r5, r7, pc}
 80004a0:	1c000080 	.word	0x1c000080
 80004a4:	40012400 	.word	0x40012400
 80004a8:	40012708 	.word	0x40012708

080004ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	0002      	movs	r2, r0
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	001a      	movs	r2, r3
 80004be:	231f      	movs	r3, #31
 80004c0:	401a      	ands	r2, r3
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <NVIC_EnableIRQ+0x28>)
 80004c4:	2101      	movs	r1, #1
 80004c6:	4091      	lsls	r1, r2
 80004c8:	000a      	movs	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	e000e100 	.word	0xe000e100

080004d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	0002      	movs	r2, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b7f      	cmp	r3, #127	; 0x7f
 80004ec:	d932      	bls.n	8000554 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ee:	4a2f      	ldr	r2, [pc, #188]	; (80005ac <NVIC_SetPriority+0xd4>)
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	0019      	movs	r1, r3
 80004f6:	230f      	movs	r3, #15
 80004f8:	400b      	ands	r3, r1
 80004fa:	3b08      	subs	r3, #8
 80004fc:	089b      	lsrs	r3, r3, #2
 80004fe:	3306      	adds	r3, #6
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	18d3      	adds	r3, r2, r3
 8000504:	3304      	adds	r3, #4
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	1dfa      	adds	r2, r7, #7
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	0011      	movs	r1, r2
 800050e:	2203      	movs	r2, #3
 8000510:	400a      	ands	r2, r1
 8000512:	00d2      	lsls	r2, r2, #3
 8000514:	21ff      	movs	r1, #255	; 0xff
 8000516:	4091      	lsls	r1, r2
 8000518:	000a      	movs	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	401a      	ands	r2, r3
 800051e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	019b      	lsls	r3, r3, #6
 8000524:	22ff      	movs	r2, #255	; 0xff
 8000526:	401a      	ands	r2, r3
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	0018      	movs	r0, r3
 800052e:	2303      	movs	r3, #3
 8000530:	4003      	ands	r3, r0
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000536:	481d      	ldr	r0, [pc, #116]	; (80005ac <NVIC_SetPriority+0xd4>)
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	001c      	movs	r4, r3
 800053e:	230f      	movs	r3, #15
 8000540:	4023      	ands	r3, r4
 8000542:	3b08      	subs	r3, #8
 8000544:	089b      	lsrs	r3, r3, #2
 8000546:	430a      	orrs	r2, r1
 8000548:	3306      	adds	r3, #6
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	18c3      	adds	r3, r0, r3
 800054e:	3304      	adds	r3, #4
 8000550:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000552:	e027      	b.n	80005a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <NVIC_SetPriority+0xd8>)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b25b      	sxtb	r3, r3
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	33c0      	adds	r3, #192	; 0xc0
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	589b      	ldr	r3, [r3, r2]
 8000564:	1dfa      	adds	r2, r7, #7
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	0011      	movs	r1, r2
 800056a:	2203      	movs	r2, #3
 800056c:	400a      	ands	r2, r1
 800056e:	00d2      	lsls	r2, r2, #3
 8000570:	21ff      	movs	r1, #255	; 0xff
 8000572:	4091      	lsls	r1, r2
 8000574:	000a      	movs	r2, r1
 8000576:	43d2      	mvns	r2, r2
 8000578:	401a      	ands	r2, r3
 800057a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	019b      	lsls	r3, r3, #6
 8000580:	22ff      	movs	r2, #255	; 0xff
 8000582:	401a      	ands	r2, r3
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	0018      	movs	r0, r3
 800058a:	2303      	movs	r3, #3
 800058c:	4003      	ands	r3, r0
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <NVIC_SetPriority+0xd8>)
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b25b      	sxtb	r3, r3
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	430a      	orrs	r2, r1
 800059e:	33c0      	adds	r3, #192	; 0xc0
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	501a      	str	r2, [r3, r0]
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b003      	add	sp, #12
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	e000e100 	.word	0xe000e100

080005b4 <LL_IOP_GRP1_EnableClock>:
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <LL_IOP_GRP1_EnableClock+0x28>)
 80005be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_IOP_GRP1_EnableClock+0x28>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <LL_IOP_GRP1_EnableClock+0x28>)
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4013      	ands	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b004      	add	sp, #16
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <LL_SYSCFG_SetEXTISource+0x48>)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	21ff      	movs	r1, #255	; 0xff
 80005f0:	400b      	ands	r3, r1
 80005f2:	3302      	adds	r3, #2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	589b      	ldr	r3, [r3, r2]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	0c12      	lsrs	r2, r2, #16
 80005fc:	210f      	movs	r1, #15
 80005fe:	4091      	lsls	r1, r2
 8000600:	000a      	movs	r2, r1
 8000602:	43d2      	mvns	r2, r2
 8000604:	401a      	ands	r2, r3
 8000606:	0011      	movs	r1, r2
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	409a      	lsls	r2, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <LL_SYSCFG_SetEXTISource+0x48>)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	24ff      	movs	r4, #255	; 0xff
 8000616:	4023      	ands	r3, r4
 8000618:	430a      	orrs	r2, r1
 800061a:	3302      	adds	r3, #2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	501a      	str	r2, [r3, r0]
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b003      	add	sp, #12
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	40010000 	.word	0x40010000

0800062c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6819      	ldr	r1, [r3, #0]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	435a      	muls	r2, r3
 8000642:	0013      	movs	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	189b      	adds	r3, r3, r2
 8000648:	43db      	mvns	r3, r3
 800064a:	400b      	ands	r3, r1
 800064c:	001a      	movs	r2, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	68b9      	ldr	r1, [r7, #8]
 8000652:	434b      	muls	r3, r1
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	434b      	muls	r3, r1
 8000658:	431a      	orrs	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}

08000666 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68d9      	ldr	r1, [r3, #12]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	435a      	muls	r2, r3
 800067c:	0013      	movs	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	189b      	adds	r3, r3, r2
 8000682:	43db      	mvns	r3, r3
 8000684:	400b      	ands	r3, r1
 8000686:	001a      	movs	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	434b      	muls	r3, r1
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	434b      	muls	r3, r1
 8000692:	431a      	orrs	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	60da      	str	r2, [r3, #12]
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b004      	add	sp, #16
 800069e:	bd80      	pop	{r7, pc}

080006a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80006be:	2418      	movs	r4, #24
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2308      	movs	r3, #8
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f001 fdef 	bl	80022ac <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	003b      	movs	r3, r7
 80006d0:	0018      	movs	r0, r3
 80006d2:	2318      	movs	r3, #24
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f001 fde8 	bl	80022ac <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80006dc:	2004      	movs	r0, #4
 80006de:	f7ff ff69 	bl	80005b4 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ff66 	bl	80005b4 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin);
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	01db      	lsls	r3, r3, #7
 80006ec:	4a33      	ldr	r2, [pc, #204]	; (80007bc <MX_GPIO_Init+0x104>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f7ff ffd5 	bl	80006a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin);
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	009a      	lsls	r2, r3, #2
 80006fa:	23a0      	movs	r3, #160	; 0xa0
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ffcd 	bl	80006a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CLEAN_ENABLE_Pin;
 8000706:	003b      	movs	r3, r7
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	01d2      	lsls	r2, r2, #7
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800070e:	003b      	movs	r3, r7
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800071a:	003b      	movs	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000720:	003b      	movs	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CLEAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000726:	003b      	movs	r3, r7
 8000728:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_GPIO_Init+0x104>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f001 fac2 	bl	8001cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FX_ENABLE_Pin;
 8000732:	003b      	movs	r3, r7
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800073a:	003b      	movs	r3, r7
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800074c:	003b      	movs	r3, r7
 800074e:	2201      	movs	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(FX_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000752:	003a      	movs	r2, r7
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f001 faab 	bl	8001cb6 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE4);
 8000760:	2101      	movs	r1, #1
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff ff3c 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_PULL_UP);
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2201      	movs	r2, #1
 800076e:	2110      	movs	r1, #16
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff ff78 	bl	8000666 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_MODE_INPUT);
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff ff54 	bl	800062c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000784:	0021      	movs	r1, r4
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2210      	movs	r2, #16
 800078a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2201      	movs	r2, #1
 8000790:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2202      	movs	r2, #2
 800079c:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f945 	bl	8001a30 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80007a6:	2100      	movs	r1, #0
 80007a8:	2007      	movs	r0, #7
 80007aa:	f7ff fe95 	bl	80004d8 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f7ff fe7c 	bl	80004ac <NVIC_EnableIRQ>

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b009      	add	sp, #36	; 0x24
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	50000800 	.word	0x50000800

080007c0 <ledprogram_symcontfade>:
uint8_t pwm_dir_forward = 1;


// Symmetrical PWM by lookup table
void ledprogram_symcontfade()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

	  if(pwm_dir_forward)
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <ledprogram_symcontfade+0x78>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <ledprogram_symcontfade+0x1a>
		  pwm_bit_pos++;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e005      	b.n	80007e6 <ledprogram_symcontfade+0x26>
	  else
		  pwm_bit_pos--;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3b01      	subs	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007e4:	701a      	strb	r2, [r3, #0]



	  // change direction at sequence limits
	  if(pwm_bit_pos >= ((FADE_LOG_SEQ_DATA_SIZE)-1))
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b3e      	cmp	r3, #62	; 0x3e
 80007ec:	d908      	bls.n	8000800 <ledprogram_symcontfade+0x40>
	  {
		  //pwm_bit_pos = FADE_LOG_SEQ_DATA_SIZE/5;
		  pwm_dir_forward = 0;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <ledprogram_symcontfade+0x78>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		  pwm_bit_pos--;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <ledprogram_symcontfade+0x7c>)
 80007fe:	701a      	strb	r2, [r3, #0]
	  }
	  if(pwm_bit_pos < 1)
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <ledprogram_symcontfade+0x7c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <ledprogram_symcontfade+0x4e>
	  {
		  pwm_dir_forward = 1;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <ledprogram_symcontfade+0x78>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
	  }



	  TIM2->CCR1 = fade_log_seq_data_table[pwm_bit_pos];
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <ledprogram_symcontfade+0x7c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	001a      	movs	r2, r3
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <ledprogram_symcontfade+0x80>)
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	5ad2      	ldrh	r2, [r2, r3]
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = fade_log_seq_data_table[pwm_bit_pos];
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <ledprogram_symcontfade+0x7c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <ledprogram_symcontfade+0x80>)
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	5ad2      	ldrh	r2, [r2, r3]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000080 	.word	0x20000080
 800083c:	200000a4 	.word	0x200000a4
 8000840:	20000000 	.word	0x20000000

08000844 <NVIC_EnableIRQ>:
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	231f      	movs	r3, #31
 8000858:	401a      	ands	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <NVIC_EnableIRQ+0x28>)
 800085c:	2101      	movs	r1, #1
 800085e:	4091      	lsls	r1, r2
 8000860:	000a      	movs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	e000e100 	.word	0xe000e100

08000870 <NVIC_SetPriority>:
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b7f      	cmp	r3, #127	; 0x7f
 8000884:	d932      	bls.n	80008ec <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <NVIC_SetPriority+0xd4>)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0019      	movs	r1, r3
 800088e:	230f      	movs	r3, #15
 8000890:	400b      	ands	r3, r1
 8000892:	3b08      	subs	r3, #8
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	3306      	adds	r3, #6
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	18d3      	adds	r3, r2, r3
 800089c:	3304      	adds	r3, #4
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1dfa      	adds	r2, r7, #7
 80008a2:	7812      	ldrb	r2, [r2, #0]
 80008a4:	0011      	movs	r1, r2
 80008a6:	2203      	movs	r2, #3
 80008a8:	400a      	ands	r2, r1
 80008aa:	00d2      	lsls	r2, r2, #3
 80008ac:	21ff      	movs	r1, #255	; 0xff
 80008ae:	4091      	lsls	r1, r2
 80008b0:	000a      	movs	r2, r1
 80008b2:	43d2      	mvns	r2, r2
 80008b4:	401a      	ands	r2, r3
 80008b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	019b      	lsls	r3, r3, #6
 80008bc:	22ff      	movs	r2, #255	; 0xff
 80008be:	401a      	ands	r2, r3
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	0018      	movs	r0, r3
 80008c6:	2303      	movs	r3, #3
 80008c8:	4003      	ands	r3, r0
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ce:	481d      	ldr	r0, [pc, #116]	; (8000944 <NVIC_SetPriority+0xd4>)
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001c      	movs	r4, r3
 80008d6:	230f      	movs	r3, #15
 80008d8:	4023      	ands	r3, r4
 80008da:	3b08      	subs	r3, #8
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	3306      	adds	r3, #6
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	18c3      	adds	r3, r0, r3
 80008e6:	3304      	adds	r3, #4
 80008e8:	601a      	str	r2, [r3, #0]
}
 80008ea:	e027      	b.n	800093c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <NVIC_SetPriority+0xd8>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	33c0      	adds	r3, #192	; 0xc0
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	589b      	ldr	r3, [r3, r2]
 80008fc:	1dfa      	adds	r2, r7, #7
 80008fe:	7812      	ldrb	r2, [r2, #0]
 8000900:	0011      	movs	r1, r2
 8000902:	2203      	movs	r2, #3
 8000904:	400a      	ands	r2, r1
 8000906:	00d2      	lsls	r2, r2, #3
 8000908:	21ff      	movs	r1, #255	; 0xff
 800090a:	4091      	lsls	r1, r2
 800090c:	000a      	movs	r2, r1
 800090e:	43d2      	mvns	r2, r2
 8000910:	401a      	ands	r2, r3
 8000912:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	019b      	lsls	r3, r3, #6
 8000918:	22ff      	movs	r2, #255	; 0xff
 800091a:	401a      	ands	r2, r3
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	0018      	movs	r0, r3
 8000922:	2303      	movs	r3, #3
 8000924:	4003      	ands	r3, r0
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <NVIC_SetPriority+0xd8>)
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	33c0      	adds	r3, #192	; 0xc0
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	501a      	str	r2, [r3, r0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b003      	add	sp, #12
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	e000ed00 	.word	0xe000ed00
 8000948:	e000e100 	.word	0xe000e100

0800094c <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <LL_LPTIM_SetUpdateMode+0x24>)
 800095c:	401a      	ands	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	431a      	orrs	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60da      	str	r2, [r3, #12]
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	ffbfffff 	.word	0xffbfffff

08000974 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <LL_LPTIM_SetCounterMode+0x24>)
 8000984:	401a      	ands	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	431a      	orrs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60da      	str	r2, [r3, #12]
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	ff7fffff 	.word	0xff7fffff

0800099c <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <LL_LPTIM_SetPolarity+0x24>)
 80009ac:	401a      	ands	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60da      	str	r2, [r3, #12]
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	ffdfffff 	.word	0xffdfffff

080009c4 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <LL_LPTIM_SetPrescaler+0x24>)
 80009d4:	401a      	ands	r2, r3
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60da      	str	r2, [r3, #12]
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	fffff1ff 	.word	0xfffff1ff

080009ec <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <LL_LPTIM_TrigSw+0x1c>)
 80009fa:	401a      	ands	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60da      	str	r2, [r3, #12]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	fff9ffff 	.word	0xfff9ffff

08000a0c <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4393      	bics	r3, r2
 8000a1e:	001a      	movs	r2, r3
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <LL_APB1_GRP1_EnableClock>:
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <LL_APB1_GRP1_EnableClock+0x28>)
 8000a3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <LL_APB1_GRP1_EnableClock+0x28>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	430a      	orrs	r2, r1
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <LL_APB1_GRP1_EnableClock+0x28>)
 8000a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	061b      	lsls	r3, r3, #24
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff ffe3 	bl	8000a30 <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn, 0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	200d      	movs	r0, #13
 8000a6e:	f7ff feff 	bl	8000870 <NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM1_IRQn);
 8000a72:	200d      	movs	r0, #13
 8000a74:	f7ff fee6 	bl	8000844 <NVIC_EnableIRQ>

  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_LPTIM1_Init+0x60>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ffc5 	bl	8000a0c <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 8000a82:	23e0      	movs	r3, #224	; 0xe0
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <MX_LPTIM1_Init+0x60>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f7ff ff9a 	bl	80009c4 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_LPTIM1_Init+0x60>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff81 	bl	800099c <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_LPTIM1_Init+0x60>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff ff54 	bl	800094c <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MX_LPTIM1_Init+0x60>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff63 	bl	8000974 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 8000aae:	4b03      	ldr	r3, [pc, #12]	; (8000abc <MX_LPTIM1_Init+0x60>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff9b 	bl	80009ec <LL_LPTIM_TrigSw>

}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40007c00 	.word	0x40007c00

08000ac0 <LL_ADC_EnableInternalRegulator>:
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0552      	lsls	r2, r2, #21
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	6fffffe8 	.word	0x6fffffe8

08000ae8 <LL_ADC_Enable>:
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <LL_ADC_Enable+0x20>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	2201      	movs	r2, #1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	609a      	str	r2, [r3, #8]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	7fffffe8 	.word	0x7fffffe8

08000b0c <LL_ADC_StartCalibration>:
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <LL_ADC_StartCalibration+0x24>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0612      	lsls	r2, r2, #24
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	609a      	str	r2, [r3, #8]
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	7fffffe8 	.word	0x7fffffe8

08000b34 <LL_ADC_REG_StartConversion>:
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <LL_ADC_REG_StartConversion+0x20>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	2204      	movs	r2, #4
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	7fffffe8 	.word	0x7fffffe8

08000b58 <LL_ADC_REG_IsConversionOngoing>:
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2204      	movs	r2, #4
 8000b66:	4013      	ands	r3, r2
 8000b68:	3b04      	subs	r3, #4
 8000b6a:	425a      	negs	r2, r3
 8000b6c:	4153      	adcs	r3, r2
 8000b6e:	b2db      	uxtb	r3, r3
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <LL_ADC_REG_ReadConversionData32>:
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	041b      	lsls	r3, r3, #16
 8000b86:	0c1b      	lsrs	r3, r3, #16
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LL_ADC_IsActiveFlag_EOC>:
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	3b04      	subs	r3, #4
 8000ba2:	425a      	negs	r2, r3
 8000ba4:	4153      	adcs	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <LL_RCC_HSI_Enable+0x18>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <LL_RCC_HSI_Enable+0x18>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40021000 	.word	0x40021000

08000bcc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <LL_RCC_HSI_IsReady+0x1c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d101      	bne.n	8000be0 <LL_RCC_HSI_IsReady+0x14>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <LL_RCC_HSI_IsReady+0x16>
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000

08000bec <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	021a      	lsls	r2, r3, #8
 8000c02:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000c04:	430a      	orrs	r2, r1
 8000c06:	605a      	str	r2, [r3, #4]
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	ffffe0ff 	.word	0xffffe0ff

08000c18 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <LL_RCC_SetSysClkSource+0x24>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4393      	bics	r3, r2
 8000c28:	0019      	movs	r1, r3
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <LL_RCC_SetSysClkSource+0x24>)
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	60da      	str	r2, [r3, #12]
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000

08000c40 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <LL_RCC_GetSysClkSource+0x14>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	220c      	movs	r2, #12
 8000c4a:	4013      	ands	r3, r2
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40021000 	.word	0x40021000

08000c58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	22f0      	movs	r2, #240	; 0xf0
 8000c66:	4393      	bics	r3, r2
 8000c68:	0019      	movs	r1, r3
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000

08000c80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	0019      	movs	r1, r3
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	60da      	str	r2, [r3, #12]
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	fffff8ff 	.word	0xfffff8ff

08000cac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	60da      	str	r2, [r3, #12]
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	ffffc7ff 	.word	0xffffc7ff

08000cd8 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <LL_RCC_SetLPTIMClockSource+0x24>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <LL_RCC_SetLPTIMClockSource+0x28>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <LL_RCC_SetLPTIMClockSource+0x24>)
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	fff3ffff 	.word	0xfff3ffff

08000d04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <LL_RCC_PLL_Enable+0x18>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <LL_RCC_PLL_Enable+0x18>)
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	0449      	lsls	r1, r1, #17
 8000d12:	430a      	orrs	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000

08000d20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <LL_RCC_PLL_IsReady+0x24>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	049b      	lsls	r3, r3, #18
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	049b      	lsls	r3, r3, #18
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d101      	bne.n	8000d3a <LL_RCC_PLL_IsReady+0x1a>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <LL_RCC_PLL_IsReady+0x1c>
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	431a      	orrs	r2, r3
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	60da      	str	r2, [r3, #12]
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b004      	add	sp, #16
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	ff02ffff 	.word	0xff02ffff

08000d80 <LL_APB1_GRP1_EnableClock>:
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021000 	.word	0x40021000

08000dac <LL_APB2_GRP1_EnableClock>:
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000db6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <LL_APB2_GRP1_EnableClock+0x28>)
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <LL_FLASH_SetLatency+0x24>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4393      	bics	r3, r2
 8000de8:	0019      	movs	r1, r3
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <LL_FLASH_SetLatency+0x24>)
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40022000 	.word	0x40022000

08000e00 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <LL_FLASH_GetLatency+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4013      	ands	r3, r2
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40022000 	.word	0x40022000

08000e18 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	0019      	movs	r1, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40007000 	.word	0x40007000
 8000e40:	ffffe7ff 	.word	0xffffe7ff

08000e44 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1a      	ldr	r2, [r3, #32]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	621a      	str	r2, [r3, #32]
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d00d      	beq.n	8000eae <LL_TIM_OC_SetMode+0x2e>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b10      	cmp	r3, #16
 8000e96:	d008      	beq.n	8000eaa <LL_TIM_OC_SetMode+0x2a>
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d101      	bne.n	8000ea6 <LL_TIM_OC_SetMode+0x26>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	e004      	b.n	8000eb0 <LL_TIM_OC_SetMode+0x30>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e002      	b.n	8000eb0 <LL_TIM_OC_SetMode+0x30>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e000      	b.n	8000eb0 <LL_TIM_OC_SetMode+0x30>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	0029      	movs	r1, r5
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LL_TIM_OC_SetMode+0x6c>)
 8000ebc:	5c5b      	ldrb	r3, [r3, r1]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	0029      	movs	r1, r5
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LL_TIM_OC_SetMode+0x70>)
 8000ec8:	5c52      	ldrb	r2, [r2, r1]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2273      	movs	r2, #115	; 0x73
 8000ece:	408a      	lsls	r2, r1
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	0029      	movs	r1, r5
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <LL_TIM_OC_SetMode+0x70>)
 8000ed8:	5c5b      	ldrb	r3, [r3, r1]
 8000eda:	0019      	movs	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	408b      	lsls	r3, r1
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	6023      	str	r3, [r4, #0]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bdb0      	pop	{r4, r5, r7, pc}
 8000eec:	080022d4 	.word	0x080022d4
 8000ef0:	080022dc 	.word	0x080022dc

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff ff56 	bl	8000dac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	055b      	lsls	r3, r3, #21
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff3b 	bl	8000d80 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f897 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f7ff fbd3 	bl	80006b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f12:	f000 fb54 	bl	80015be <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000f16:	f7ff fda1 	bl	8000a5c <MX_LPTIM1_Init>
  MX_TIM21_Init();
 8000f1a:	f000 fc05 	bl	8001728 <MX_TIM21_Init>
  MX_ADC_Init();
 8000f1e:	f7ff fa39 	bl	8000394 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	2260      	movs	r2, #96	; 0x60
 8000f28:	2101      	movs	r1, #1
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff ffa8 	bl	8000e80 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	2101      	movs	r1, #1
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff ff92 	bl	8000e60 <LL_TIM_CC_EnableChannel>

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	2260      	movs	r2, #96	; 0x60
 8000f42:	2110      	movs	r1, #16
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff ff9b 	bl	8000e80 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	2110      	movs	r1, #16
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff ff85 	bl	8000e60 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM2);
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff ff72 	bl	8000e44 <LL_TIM_EnableCounter>
  TIM2->PSC = 0;
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
   * 	405		80KHz
   * 	540		60KHz
   * 	675		48KHz
   */

  TIM2->ARR = 540;
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	05db      	lsls	r3, r3, #23
 8000f6c:	2287      	movs	r2, #135	; 0x87
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  // init the PWM duty to 0%
  TIM2->CCR1 = 0;
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	2200      	movs	r2, #0
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38



  // init bypass soft switches
  // clean routing enabled, fx routing disabled
  CLEAN_ENABLE_GPIO_Port->ODR |= (CLEAN_ENABLE_Pin);
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <main+0x134>)
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <main+0x134>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	01c9      	lsls	r1, r1, #7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
  FX_ENABLE_GPIO_Port->ODR &= ~(FX_ENABLE_Pin);
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	4924      	ldr	r1, [pc, #144]	; (800102c <main+0x138>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	615a      	str	r2, [r3, #20]


  // debounce timer
  //LL_TIM_EnableIT_UPDATE(TIM21);
  LL_TIM_EnableCounter(TIM21);
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <main+0x13c>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff ff4e 	bl	8000e44 <LL_TIM_EnableCounter>
  TIM21->PSC = 65535;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <main+0x13c>)
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <main+0x140>)
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  TIM21->ARR = 65535;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <main+0x13c>)
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <main+0x140>)
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  //HAL_TIM_Base_Start_IT(&htim21);


  LL_ADC_EnableInternalRegulator(ADC1);
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <main+0x144>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff fd82 	bl	8000ac0 <LL_ADC_EnableInternalRegulator>
  LL_ADC_StartCalibration(ADC1);
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <main+0x144>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff fda4 	bl	8000b0c <LL_ADC_StartCalibration>
  LL_ADC_Enable(ADC1);
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <main+0x144>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff fd8e 	bl	8000ae8 <LL_ADC_Enable>

  /* USER CODE END 2 */
  uint32_t adc_data = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(LL_ADC_REG_IsConversionOngoing(ADC1) == 0)
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <main+0x144>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fdc0 	bl	8000b58 <LL_ADC_REG_IsConversionOngoing>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d114      	bne.n	8001006 <main+0x112>
	  {
		  LL_ADC_REG_StartConversion(ADC1);
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <main+0x144>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fda8 	bl	8000b34 <LL_ADC_REG_StartConversion>
		  if(LL_ADC_IsActiveFlag_EOC(ADC1))
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <main+0x144>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff fdd2 	bl	8000b90 <LL_ADC_IsActiveFlag_EOC>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d00a      	beq.n	8001006 <main+0x112>
		  {
			  adc_data = LL_ADC_REG_ReadConversionData32(ADC1);
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <main+0x144>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff fdc0 	bl	8000b78 <LL_ADC_REG_ReadConversionData32>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	607b      	str	r3, [r7, #4]
			  if(adc_data < 200)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2bc7      	cmp	r3, #199	; 0xc7
 8001000:	d801      	bhi.n	8001006 <main+0x112>
				  adc_data = 200;
 8001002:	23c8      	movs	r3, #200	; 0xc8
 8001004:	607b      	str	r3, [r7, #4]
		  }
	  }

	  if(FX_ENABLE_GPIO_Port->ODR)
 8001006:	23a0      	movs	r3, #160	; 0xa0
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0df      	beq.n	8000fd0 <main+0xdc>
	  {
		  LL_mDelay(adc_data/10);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	210a      	movs	r1, #10
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff f877 	bl	8000108 <__udivsi3>
 800101a:	0003      	movs	r3, r0
 800101c:	0018      	movs	r0, r3
 800101e:	f001 f8f1 	bl	8002204 <LL_mDelay>
		  //ledprogram_contfade();
		  ledprogram_symcontfade();
 8001022:	f7ff fbcd 	bl	80007c0 <ledprogram_symcontfade>
	  if(LL_ADC_REG_IsConversionOngoing(ADC1) == 0)
 8001026:	e7d3      	b.n	8000fd0 <main+0xdc>
 8001028:	50000800 	.word	0x50000800
 800102c:	fffffdff 	.word	0xfffffdff
 8001030:	40010800 	.word	0x40010800
 8001034:	0000ffff 	.word	0x0000ffff
 8001038:	40012400 	.word	0x40012400

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fec9 	bl	8000dd8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001046:	f7ff fedb 	bl	8000e00 <LL_FLASH_GetLatency>
 800104a:	0003      	movs	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001050:	f000 f842 	bl	80010d8 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fedd 	bl	8000e18 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800105e:	f7ff fda7 	bl	8000bb0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	f7ff fdb2 	bl	8000bcc <LL_RCC_HSI_IsReady>
 8001068:	0003      	movs	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d1fa      	bne.n	8001064 <SystemClock_Config+0x28>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800106e:	2010      	movs	r0, #16
 8001070:	f7ff fdbc 	bl	8000bec <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	03da      	lsls	r2, r3, #15
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	02db      	lsls	r3, r3, #11
 800107c:	0019      	movs	r1, r3
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fe62 	bl	8000d48 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001084:	f7ff fe3e 	bl	8000d04 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	f7ff fe49 	bl	8000d20 <LL_RCC_PLL_IsReady>
 800108e:	0003      	movs	r3, r0
 8001090:	2b01      	cmp	r3, #1
 8001092:	d1fa      	bne.n	800108a <SystemClock_Config+0x4e>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fddf 	bl	8000c58 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fdf0 	bl	8000c80 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fe03 	bl	8000cac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fdb6 	bl	8000c18 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	f7ff fdc7 	bl	8000c40 <LL_RCC_GetSysClkSource>
 80010b2:	0003      	movs	r3, r0
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	d1fa      	bne.n	80010ae <SystemClock_Config+0x72>
  {
  
  }

  LL_Init1msTick(32000000);
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemClock_Config+0x98>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 f892 	bl	80021e4 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SystemClock_Config+0x98>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 f8c0 	bl	8002248 <LL_SetSystemCoreClock>
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fe05 	bl	8000cd8 <LL_RCC_SetLPTIMClockSource>
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	01e84800 	.word	0x01e84800

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <NVIC_SystemReset+0x18>)
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <NVIC_SystemReset+0x1c>)
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80010f6:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010f8:	e7fd      	b.n	80010f6 <NVIC_SystemReset+0x12>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	05fa0004 	.word	0x05fa0004

08001104 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4013      	ands	r3, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	425a      	negs	r2, r3
 800111a:	4153      	adcs	r3, r2
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40010400 	.word	0x40010400

0800112c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	615a      	str	r2, [r3, #20]
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40010400 	.word	0x40010400

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint16_t interrupt_time = TIM21->CNT;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <EXTI4_15_IRQHandler+0x68>)
 8001180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001182:	1dbb      	adds	r3, r7, #6
 8001184:	801a      	strh	r2, [r3, #0]
	if ((interrupt_time - last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8001186:	1dbb      	adds	r3, r7, #6
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <EXTI4_15_IRQHandler+0x6c>)
 800118c:	8812      	ldrh	r2, [r2, #0]
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	2bc8      	cmp	r3, #200	; 0xc8
 8001192:	dd15      	ble.n	80011c0 <EXTI4_15_IRQHandler+0x48>
	{
		// flash leds to indicate bypass switch

		if(CLEAN_ENABLE_GPIO_Port->ODR)
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <EXTI4_15_IRQHandler+0x70>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <EXTI4_15_IRQHandler+0x28>
		{
			//ledprogram_flash(4, 100);				// slower for fx enable
		}
		else
		{
			NVIC_SystemReset();
 800119c:	f7ff ffa2 	bl	80010e4 <NVIC_SystemReset>
		}

		// toggle bypass soft switches
		CLEAN_ENABLE_GPIO_Port->ODR ^= CLEAN_ENABLE_Pin;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <EXTI4_15_IRQHandler+0x70>)
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <EXTI4_15_IRQHandler+0x70>)
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	01c9      	lsls	r1, r1, #7
 80011aa:	404a      	eors	r2, r1
 80011ac:	615a      	str	r2, [r3, #20]

		FX_ENABLE_GPIO_Port->ODR ^= FX_ENABLE_Pin;
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	23a0      	movs	r3, #160	; 0xa0
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0089      	lsls	r1, r1, #2
 80011bc:	404a      	eors	r2, r1
 80011be:	615a      	str	r2, [r3, #20]
	}
	last_interrupt_time = interrupt_time;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <EXTI4_15_IRQHandler+0x6c>)
 80011c2:	1dba      	adds	r2, r7, #6
 80011c4:	8812      	ldrh	r2, [r2, #0]
 80011c6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 80011c8:	2010      	movs	r0, #16
 80011ca:	f7ff ff9b 	bl	8001104 <LL_EXTI_IsActiveFlag_0_31>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d002      	beq.n	80011d8 <EXTI4_15_IRQHandler+0x60>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 80011d2:	2010      	movs	r0, #16
 80011d4:	f7ff ffaa 	bl	800112c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010800 	.word	0x40010800
 80011e4:	200000a6 	.word	0x200000a6
 80011e8:	50000800 	.word	0x50000800

080011ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	//TIM2->CCR2 = led_value2;
  /* USER CODE END LPTIM1_IRQn 0 */
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <SystemInit+0x64>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SystemInit+0x64>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	0049      	lsls	r1, r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <SystemInit+0x64>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <SystemInit+0x64>)
 8001218:	4913      	ldr	r1, [pc, #76]	; (8001268 <SystemInit+0x68>)
 800121a:	400a      	ands	r2, r1
 800121c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <SystemInit+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <SystemInit+0x64>)
 8001224:	4911      	ldr	r1, [pc, #68]	; (800126c <SystemInit+0x6c>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <SystemInit+0x64>)
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <SystemInit+0x64>)
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <SystemInit+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <SystemInit+0x64>)
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <SystemInit+0x70>)
 800123e:	400a      	ands	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <SystemInit+0x64>)
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <SystemInit+0x64>)
 8001248:	490a      	ldr	r1, [pc, #40]	; (8001274 <SystemInit+0x74>)
 800124a:	400a      	ands	r2, r1
 800124c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SystemInit+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <SystemInit+0x78>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	0512      	lsls	r2, r2, #20
 800125a:	609a      	str	r2, [r3, #8]
#endif
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	40021000 	.word	0x40021000
 8001268:	88ff400c 	.word	0x88ff400c
 800126c:	fef6fff6 	.word	0xfef6fff6
 8001270:	fffbffff 	.word	0xfffbffff
 8001274:	ff02ffff 	.word	0xff02ffff
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EnableIRQ>:
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	231f      	movs	r3, #31
 8001290:	401a      	ands	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <NVIC_EnableIRQ+0x28>)
 8001294:	2101      	movs	r1, #1
 8001296:	4091      	lsls	r1, r2
 8001298:	000a      	movs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <NVIC_SetPriority>:
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b7f      	cmp	r3, #127	; 0x7f
 80012bc:	d932      	bls.n	8001324 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <NVIC_SetPriority+0xd4>)
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	0019      	movs	r1, r3
 80012c6:	230f      	movs	r3, #15
 80012c8:	400b      	ands	r3, r1
 80012ca:	3b08      	subs	r3, #8
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3306      	adds	r3, #6
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	3304      	adds	r3, #4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	1dfa      	adds	r2, r7, #7
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	0011      	movs	r1, r2
 80012de:	2203      	movs	r2, #3
 80012e0:	400a      	ands	r2, r1
 80012e2:	00d2      	lsls	r2, r2, #3
 80012e4:	21ff      	movs	r1, #255	; 0xff
 80012e6:	4091      	lsls	r1, r2
 80012e8:	000a      	movs	r2, r1
 80012ea:	43d2      	mvns	r2, r2
 80012ec:	401a      	ands	r2, r3
 80012ee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	019b      	lsls	r3, r3, #6
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	401a      	ands	r2, r3
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	0018      	movs	r0, r3
 80012fe:	2303      	movs	r3, #3
 8001300:	4003      	ands	r3, r0
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001306:	481d      	ldr	r0, [pc, #116]	; (800137c <NVIC_SetPriority+0xd4>)
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	001c      	movs	r4, r3
 800130e:	230f      	movs	r3, #15
 8001310:	4023      	ands	r3, r4
 8001312:	3b08      	subs	r3, #8
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	3306      	adds	r3, #6
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	18c3      	adds	r3, r0, r3
 800131e:	3304      	adds	r3, #4
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	e027      	b.n	8001374 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4a16      	ldr	r2, [pc, #88]	; (8001380 <NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	33c0      	adds	r3, #192	; 0xc0
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	589b      	ldr	r3, [r3, r2]
 8001334:	1dfa      	adds	r2, r7, #7
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	0011      	movs	r1, r2
 800133a:	2203      	movs	r2, #3
 800133c:	400a      	ands	r2, r1
 800133e:	00d2      	lsls	r2, r2, #3
 8001340:	21ff      	movs	r1, #255	; 0xff
 8001342:	4091      	lsls	r1, r2
 8001344:	000a      	movs	r2, r1
 8001346:	43d2      	mvns	r2, r2
 8001348:	401a      	ands	r2, r3
 800134a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	019b      	lsls	r3, r3, #6
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	401a      	ands	r2, r3
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	2303      	movs	r3, #3
 800135c:	4003      	ands	r3, r0
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <NVIC_SetPriority+0xd8>)
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	430a      	orrs	r2, r1
 800136e:	33c0      	adds	r3, #192	; 0xc0
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	501a      	str	r2, [r3, r0]
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b003      	add	sp, #12
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	e000e100 	.word	0xe000e100

08001384 <LL_APB1_GRP1_EnableClock>:
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <LL_APB1_GRP1_EnableClock+0x28>)
 800138e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LL_APB1_GRP1_EnableClock+0x28>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	430a      	orrs	r2, r1
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <LL_APB1_GRP1_EnableClock+0x28>)
 800139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <LL_APB2_GRP1_EnableClock>:
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <LL_APB2_GRP1_EnableClock+0x28>)
 80013ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LL_APB2_GRP1_EnableClock+0x28>)
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <LL_APB2_GRP1_EnableClock+0x28>)
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b004      	add	sp, #16
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000

080013dc <LL_IOP_GRP1_EnableClock>:
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <LL_IOP_GRP1_EnableClock+0x28>)
 80013e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <LL_IOP_GRP1_EnableClock+0x28>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <LL_IOP_GRP1_EnableClock+0x28>)
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <LL_TIM_DisableARRPreload>:
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	4393      	bics	r3, r2
 8001418:	001a      	movs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d00d      	beq.n	8001454 <LL_TIM_OC_EnableFast+0x2c>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d008      	beq.n	8001450 <LL_TIM_OC_EnableFast+0x28>
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	429a      	cmp	r2, r3
 8001446:	d101      	bne.n	800144c <LL_TIM_OC_EnableFast+0x24>
 8001448:	2304      	movs	r3, #4
 800144a:	e004      	b.n	8001456 <LL_TIM_OC_EnableFast+0x2e>
 800144c:	2306      	movs	r3, #6
 800144e:	e002      	b.n	8001456 <LL_TIM_OC_EnableFast+0x2e>
 8001450:	2302      	movs	r3, #2
 8001452:	e000      	b.n	8001456 <LL_TIM_OC_EnableFast+0x2e>
 8001454:	2300      	movs	r3, #0
 8001456:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3318      	adds	r3, #24
 800145c:	001a      	movs	r2, r3
 800145e:	0029      	movs	r1, r5
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LL_TIM_OC_EnableFast+0x5c>)
 8001462:	5c5b      	ldrb	r3, [r3, r1]
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	0029      	movs	r1, r5
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <LL_TIM_OC_EnableFast+0x60>)
 800146e:	5c5b      	ldrb	r3, [r3, r1]
 8001470:	0019      	movs	r1, r3
 8001472:	2304      	movs	r3, #4
 8001474:	408b      	lsls	r3, r1
 8001476:	4313      	orrs	r3, r2
 8001478:	6023      	str	r3, [r4, #0]

}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	080022e4 	.word	0x080022e4
 8001488:	080022ec 	.word	0x080022ec

0800148c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d00d      	beq.n	80014b8 <LL_TIM_OC_EnablePreload+0x2c>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d008      	beq.n	80014b4 <LL_TIM_OC_EnablePreload+0x28>
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d101      	bne.n	80014b0 <LL_TIM_OC_EnablePreload+0x24>
 80014ac:	2304      	movs	r3, #4
 80014ae:	e004      	b.n	80014ba <LL_TIM_OC_EnablePreload+0x2e>
 80014b0:	2306      	movs	r3, #6
 80014b2:	e002      	b.n	80014ba <LL_TIM_OC_EnablePreload+0x2e>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e000      	b.n	80014ba <LL_TIM_OC_EnablePreload+0x2e>
 80014b8:	2300      	movs	r3, #0
 80014ba:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3318      	adds	r3, #24
 80014c0:	001a      	movs	r2, r3
 80014c2:	0029      	movs	r1, r5
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <LL_TIM_OC_EnablePreload+0x5c>)
 80014c6:	5c5b      	ldrb	r3, [r3, r1]
 80014c8:	18d3      	adds	r3, r2, r3
 80014ca:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	0029      	movs	r1, r5
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <LL_TIM_OC_EnablePreload+0x60>)
 80014d2:	5c5b      	ldrb	r3, [r3, r1]
 80014d4:	0019      	movs	r1, r3
 80014d6:	2308      	movs	r3, #8
 80014d8:	408b      	lsls	r3, r1
 80014da:	4313      	orrs	r3, r2
 80014dc:	6023      	str	r3, [r4, #0]
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	080022e4 	.word	0x080022e4
 80014ec:	080022ec 	.word	0x080022ec

080014f0 <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d00d      	beq.n	800151c <LL_TIM_OC_DisablePreload+0x2c>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b10      	cmp	r3, #16
 8001504:	d008      	beq.n	8001518 <LL_TIM_OC_DisablePreload+0x28>
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	429a      	cmp	r2, r3
 800150e:	d101      	bne.n	8001514 <LL_TIM_OC_DisablePreload+0x24>
 8001510:	2304      	movs	r3, #4
 8001512:	e004      	b.n	800151e <LL_TIM_OC_DisablePreload+0x2e>
 8001514:	2306      	movs	r3, #6
 8001516:	e002      	b.n	800151e <LL_TIM_OC_DisablePreload+0x2e>
 8001518:	2302      	movs	r3, #2
 800151a:	e000      	b.n	800151e <LL_TIM_OC_DisablePreload+0x2e>
 800151c:	2300      	movs	r3, #0
 800151e:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3318      	adds	r3, #24
 8001524:	001a      	movs	r2, r3
 8001526:	0029      	movs	r1, r5
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <LL_TIM_OC_DisablePreload+0x5c>)
 800152a:	5c5b      	ldrb	r3, [r3, r1]
 800152c:	18d3      	adds	r3, r2, r3
 800152e:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	0029      	movs	r1, r5
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <LL_TIM_OC_DisablePreload+0x60>)
 8001536:	5c52      	ldrb	r2, [r2, r1]
 8001538:	0011      	movs	r1, r2
 800153a:	2208      	movs	r2, #8
 800153c:	408a      	lsls	r2, r1
 800153e:	43d2      	mvns	r2, r2
 8001540:	4013      	ands	r3, r2
 8001542:	6023      	str	r3, [r4, #0]
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	080022e4 	.word	0x080022e4
 8001550:	080022ec 	.word	0x080022ec

08001554 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <LL_TIM_SetClockSource+0x24>)
 8001564:	401a      	ands	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	ffffbff8 	.word	0xffffbff8

0800157c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2270      	movs	r2, #112	; 0x70
 800158c:	4393      	bics	r3, r2
 800158e:	001a      	movs	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	4393      	bics	r3, r2
 80015b0:	001a      	movs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}

080015be <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015be:	b5b0      	push	{r4, r5, r7, lr}
 80015c0:	b08e      	sub	sp, #56	; 0x38
 80015c2:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015c4:	2528      	movs	r5, #40	; 0x28
 80015c6:	197b      	adds	r3, r7, r5
 80015c8:	0018      	movs	r0, r3
 80015ca:	2310      	movs	r3, #16
 80015cc:	001a      	movs	r2, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	f000 fe6c 	bl	80022ac <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80015d4:	2418      	movs	r4, #24
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	0018      	movs	r0, r3
 80015da:	2310      	movs	r3, #16
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f000 fe64 	bl	80022ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	003b      	movs	r3, r7
 80015e6:	0018      	movs	r0, r3
 80015e8:	2318      	movs	r3, #24
 80015ea:	001a      	movs	r2, r3
 80015ec:	2100      	movs	r1, #0
 80015ee:	f000 fe5d 	bl	80022ac <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fec6 	bl	8001384 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80015f8:	197b      	adds	r3, r7, r5
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015fe:	197b      	adds	r3, r7, r5
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 32;
 8001604:	197b      	adds	r3, r7, r5
 8001606:	2220      	movs	r2, #32
 8001608:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800160a:	197b      	adds	r3, r7, r5
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001610:	197a      	adds	r2, r7, r5
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f000 fc09 	bl	8001e30 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fef0 	bl	8001408 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	2101      	movs	r1, #1
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff ff2c 	bl	800148c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001634:	193b      	adds	r3, r7, r4
 8001636:	2270      	movs	r2, #112	; 0x70
 8001638:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800164c:	193a      	adds	r2, r7, r4
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	2101      	movs	r1, #1
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fc33 	bl	8001ec0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	2101      	movs	r1, #1
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fee1 	bl	8001428 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	2110      	movs	r1, #16
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ff0d 	bl	800148c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001678:	193a      	adds	r2, r7, r4
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	2110      	movs	r1, #16
 8001680:	0018      	movs	r0, r3
 8001682:	f000 fc1d 	bl	8001ec0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	2110      	movs	r1, #16
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fecb 	bl	8001428 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	2100      	movs	r1, #0
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff ff6f 	bl	800157c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff ff7c 	bl	80015a0 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	05db      	lsls	r3, r3, #23
 80016ac:	2110      	movs	r1, #16
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff ff1e 	bl	80014f0 <LL_TIM_OC_DisablePreload>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fe91 	bl	80013dc <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80016ba:	003b      	movs	r3, r7
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016c0:	003b      	movs	r3, r7
 80016c2:	2202      	movs	r2, #2
 80016c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016c6:	003b      	movs	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016cc:	003b      	movs	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016d2:	003b      	movs	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80016d8:	003b      	movs	r3, r7
 80016da:	2202      	movs	r2, #2
 80016dc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	003a      	movs	r2, r7
 80016e0:	23a0      	movs	r3, #160	; 0xa0
 80016e2:	05db      	lsls	r3, r3, #23
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 fae5 	bl	8001cb6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80016ec:	003b      	movs	r3, r7
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016f2:	003b      	movs	r3, r7
 80016f4:	2202      	movs	r2, #2
 80016f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016f8:	003b      	movs	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016fe:	003b      	movs	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001704:	003b      	movs	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800170a:	003b      	movs	r3, r7
 800170c:	2202      	movs	r2, #2
 800170e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	003a      	movs	r2, r7
 8001712:	23a0      	movs	r3, #160	; 0xa0
 8001714:	05db      	lsls	r3, r3, #23
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f000 facc 	bl	8001cb6 <LL_GPIO_Init>

}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b00e      	add	sp, #56	; 0x38
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001728 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800172e:	003b      	movs	r3, r7
 8001730:	0018      	movs	r0, r3
 8001732:	2310      	movs	r3, #16
 8001734:	001a      	movs	r2, r3
 8001736:	2100      	movs	r1, #0
 8001738:	f000 fdb8 	bl	80022ac <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 800173c:	2004      	movs	r0, #4
 800173e:	f7ff fe37 	bl	80013b0 <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 8001742:	2100      	movs	r1, #0
 8001744:	2014      	movs	r0, #20
 8001746:	f7ff fdaf 	bl	80012a8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 800174a:	2014      	movs	r0, #20
 800174c:	f7ff fd96 	bl	800127c <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 65535;
 8001750:	003b      	movs	r3, r7
 8001752:	2201      	movs	r2, #1
 8001754:	4252      	negs	r2, r2
 8001756:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001758:	003b      	movs	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 800175e:	003b      	movs	r3, r7
 8001760:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <MX_TIM21_Init+0x7c>)
 8001762:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001764:	003b      	movs	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 800176a:	003b      	movs	r3, r7
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <MX_TIM21_Init+0x80>)
 800176e:	0019      	movs	r1, r3
 8001770:	0010      	movs	r0, r2
 8001772:	f000 fb5d 	bl	8001e30 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_TIM21_Init+0x80>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff fe45 	bl	8001408 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_TIM21_Init+0x80>)
 8001780:	2100      	movs	r1, #0
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff fee6 	bl	8001554 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_TIM21_Init+0x80>)
 800178a:	2100      	movs	r1, #0
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff fef5 	bl	800157c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <MX_TIM21_Init+0x80>)
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff ff03 	bl	80015a0 <LL_TIM_DisableMasterSlaveMode>

}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	0000ffff 	.word	0x0000ffff
 80017a8:	40010800 	.word	0x40010800

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80017ae:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <LoopForever+0x6>)
    LDR R1, [R0]
 80017b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80017b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <LoopForever+0xa>)
    CMP R1, R2
 80017b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80017ba:	d105      	bne.n	80017c8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80017bc:	4812      	ldr	r0, [pc, #72]	; (8001808 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80017be:	4913      	ldr	r1, [pc, #76]	; (800180c <LoopForever+0x12>)
    STR R1, [R0]
 80017c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80017c2:	4813      	ldr	r0, [pc, #76]	; (8001810 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80017c4:	4913      	ldr	r1, [pc, #76]	; (8001814 <LoopForever+0x1a>)
    STR R1, [R0]
 80017c6:	6001      	str	r1, [r0, #0]

080017c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80017c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ca:	e003      	b.n	80017d4 <LoopCopyDataInit>

080017cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 80017ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d2:	3104      	adds	r1, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d4:	4811      	ldr	r0, [pc, #68]	; (800181c <LoopForever+0x22>)
  ldr  r3, =_edata
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <LoopForever+0x26>)
  adds  r2, r0, r1
 80017d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017dc:	d3f6      	bcc.n	80017cc <CopyDataInit>
  ldr  r2, =_sbss
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <LoopForever+0x2a>)
  b  LoopFillZerobss
 80017e0:	e002      	b.n	80017e8 <LoopFillZerobss>

080017e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80017e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80017e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e6:	3204      	adds	r2, #4

080017e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <LoopForever+0x2e>)
  cmp  r2, r3
 80017ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017ec:	d3f9      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017ee:	f7ff fd07 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f000 fd37 	bl	8002264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff fb7d 	bl	8000ef4 <main>

080017fa <LoopForever>:

LoopForever:
    b LoopForever
 80017fa:	e7fe      	b.n	80017fa <LoopForever>
   ldr   r0, =_estack
 80017fc:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001800:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001804:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001808:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800180c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001810:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001814:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8001818:	080022fc 	.word	0x080022fc
  ldr  r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001820:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001824:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001828:	200000a8 	.word	0x200000a8

0800182c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_COMP_IRQHandler>

0800182e <LL_ADC_IsEnabled>:
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	3b01      	subs	r3, #1
 8001840:	425a      	negs	r2, r3
 8001842:	4153      	adcs	r3, r2
 8001844:	b2db      	uxtb	r3, r3
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800185a:	230f      	movs	r3, #15
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ffe2 	bl	800182e <LL_ADC_IsEnabled>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d118      	bne.n	80018a0 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <LL_ADC_Init+0x68>)
 8001874:	401a      	ands	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4319      	orrs	r1, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	430b      	orrs	r3, r1
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	089a      	lsrs	r2, r3, #2
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	e003      	b.n	80018a8 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80018a0:	230f      	movs	r3, #15
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80018a8:	230f      	movs	r3, #15
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	781b      	ldrb	r3, [r3, #0]
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b004      	add	sp, #16
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	ffff3fc7 	.word	0xffff3fc7

080018bc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80018c6:	230f      	movs	r3, #15
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff ffac 	bl	800182e <LL_ADC_IsEnabled>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d115      	bne.n	8001906 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <LL_ADC_REG_Init+0x60>)
 80018e0:	401a      	ands	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4319      	orrs	r1, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4319      	orrs	r1, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4319      	orrs	r1, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	e003      	b.n	800190e <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001906:	230f      	movs	r3, #15
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800190e:	230f      	movs	r3, #15
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	781b      	ldrb	r3, [r3, #0]
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	b004      	add	sp, #16
 800191a:	bd80      	pop	{r7, pc}
 800191c:	fffec23c 	.word	0xfffec23c

08001920 <LL_EXTI_EnableIT_0_31>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <LL_EXTI_EnableIT_0_31+0x1c>)
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <LL_EXTI_EnableIT_0_31+0x1c>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010400 	.word	0x40010400

08001940 <LL_EXTI_DisableIT_0_31>:
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <LL_EXTI_DisableIT_0_31+0x20>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	43d9      	mvns	r1, r3
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <LL_EXTI_DisableIT_0_31+0x20>)
 8001952:	400a      	ands	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40010400 	.word	0x40010400

08001964 <LL_EXTI_EnableEvent_0_31>:
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010400 	.word	0x40010400

08001984 <LL_EXTI_DisableEvent_0_31>:
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <LL_EXTI_DisableEvent_0_31+0x20>)
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	43d9      	mvns	r1, r3
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001996:	400a      	ands	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	40010400 	.word	0x40010400

080019a8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40010400 	.word	0x40010400

080019c8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80019da:	400a      	ands	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b002      	add	sp, #8
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40010400 	.word	0x40010400

080019ec <LL_EXTI_EnableFallingTrig_0_31>:
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80019f6:	68d9      	ldr	r1, [r3, #12]
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b002      	add	sp, #8
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40010400 	.word	0x40010400

08001a30 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	791b      	ldrb	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d065      	beq.n	8001b14 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <LL_EXTI_Init+0x22>
 8001a50:	e06b      	b.n	8001b2a <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	795b      	ldrb	r3, [r3, #5]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d00e      	beq.n	8001a78 <LL_EXTI_Init+0x48>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d017      	beq.n	8001a8e <LL_EXTI_Init+0x5e>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d120      	bne.n	8001aa4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff ff8c 	bl	8001984 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ff55 	bl	8001920 <LL_EXTI_EnableIT_0_31>
          break;
 8001a76:	e01a      	b.n	8001aae <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff ff6c 	bl	8001964 <LL_EXTI_EnableEvent_0_31>
          break;
 8001a8c:	e00f      	b.n	8001aae <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff ff44 	bl	8001920 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ff61 	bl	8001964 <LL_EXTI_EnableEvent_0_31>
          break;
 8001aa2:	e004      	b.n	8001aae <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
          break;
 8001aac:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	799b      	ldrb	r3, [r3, #6]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d039      	beq.n	8001b2a <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	799b      	ldrb	r3, [r3, #6]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d00e      	beq.n	8001adc <LL_EXTI_Init+0xac>
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d017      	beq.n	8001af2 <LL_EXTI_Init+0xc2>
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d120      	bne.n	8001b08 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff ff9e 	bl	8001a0c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff ff67 	bl	80019a8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001ada:	e027      	b.n	8001b2c <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff ff71 	bl	80019c8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff ff7e 	bl	80019ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001af0:	e01c      	b.n	8001b2c <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f7ff ff56 	bl	80019a8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff73 	bl	80019ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001b06:	e011      	b.n	8001b2c <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
            break;
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	e00b      	b.n	8001b2c <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ff11 	bl	8001940 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff ff2e 	bl	8001984 <LL_EXTI_DisableEvent_0_31>
 8001b28:	e000      	b.n	8001b2c <LL_EXTI_Init+0xfc>
      }
 8001b2a:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	781b      	ldrb	r3, [r3, #0]
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <LL_GPIO_SetPinMode>:
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	435a      	muls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	189b      	adds	r3, r3, r2
 8001b56:	43db      	mvns	r3, r3
 8001b58:	400b      	ands	r3, r1
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	434b      	muls	r3, r1
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	434b      	muls	r3, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <LL_GPIO_SetPinOutputType>:
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	43d2      	mvns	r2, r2
 8001b88:	401a      	ands	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	434b      	muls	r3, r1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b004      	add	sp, #16
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LL_GPIO_SetPinSpeed>:
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6899      	ldr	r1, [r3, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	435a      	muls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	189b      	adds	r3, r3, r2
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	434b      	muls	r3, r1
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	434b      	muls	r3, r1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <LL_GPIO_SetPinPull>:
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68d9      	ldr	r1, [r3, #12]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	435a      	muls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	189b      	adds	r3, r3, r2
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	434b      	muls	r3, r1
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	434b      	muls	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	60da      	str	r2, [r3, #12]
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <LL_GPIO_SetAFPin_0_7>:
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a19      	ldr	r1, [r3, #32]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	4353      	muls	r3, r2
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	4353      	muls	r3, r2
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	435a      	muls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	43db      	mvns	r3, r3
 8001c38:	400b      	ands	r3, r1
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	434b      	muls	r3, r1
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	434b      	muls	r3, r1
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	434b      	muls	r3, r1
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	434b      	muls	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	621a      	str	r2, [r3, #32]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <LL_GPIO_SetAFPin_8_15>:
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	0a12      	lsrs	r2, r2, #8
 8001c74:	4353      	muls	r3, r2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	0a12      	lsrs	r2, r2, #8
 8001c7a:	4353      	muls	r3, r2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	0a12      	lsrs	r2, r2, #8
 8001c80:	435a      	muls	r2, r3
 8001c82:	0013      	movs	r3, r2
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	0a09      	lsrs	r1, r1, #8
 8001c96:	434b      	muls	r3, r1
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	0a09      	lsrs	r1, r1, #8
 8001c9c:	434b      	muls	r3, r1
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	0a09      	lsrs	r1, r1, #8
 8001ca2:	434b      	muls	r3, r1
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	434b      	muls	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001cc8:	e040      	b.n	8001d4c <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4091      	lsls	r1, r2
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d032      	beq.n	8001d46 <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ff26 	bl	8001b3a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d003      	beq.n	8001cfe <LL_GPIO_Init+0x48>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d106      	bne.n	8001d0c <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ff49 	bl	8001b9e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff ff5f 	bl	8001bd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d111      	bne.n	8001d46 <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2bff      	cmp	r3, #255	; 0xff
 8001d26:	d807      	bhi.n	8001d38 <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff ff6e 	bl	8001c12 <LL_GPIO_SetAFPin_0_7>
 8001d36:	e006      	b.n	8001d46 <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff ff8b 	bl	8001c5c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	40da      	lsrs	r2, r3
 8001d54:	1e13      	subs	r3, r2, #0
 8001d56:	d1b8      	bne.n	8001cca <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d003      	beq.n	8001d68 <LL_GPIO_Init+0xb2>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d107      	bne.n	8001d78 <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff fefe 	bl	8001b74 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <LL_TIM_SetPrescaler>:
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b002      	add	sp, #8
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <LL_TIM_SetAutoReload>:
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <LL_TIM_OC_SetCompareCH1>:
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <LL_TIM_OC_SetCompareCH2>:
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <LL_TIM_OC_SetCompareCH3>:
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <LL_TIM_OC_SetCompareCH4>:
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	615a      	str	r2, [r3, #20]
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	05db      	lsls	r3, r3, #23
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d003      	beq.n	8001e52 <LL_TIM_Init+0x22>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <LL_TIM_Init+0x88>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d107      	bne.n	8001e62 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2270      	movs	r2, #112	; 0x70
 8001e56:	4393      	bics	r3, r2
 8001e58:	001a      	movs	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	05db      	lsls	r3, r3, #23
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d003      	beq.n	8001e74 <LL_TIM_Init+0x44>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <LL_TIM_Init+0x88>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d106      	bne.n	8001e82 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <LL_TIM_Init+0x8c>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	0011      	movs	r1, r2
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ff82 	bl	8001d9a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ff6e 	bl	8001d82 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff ffb2 	bl	8001e12 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40010800 	.word	0x40010800
 8001ebc:	fffffcff 	.word	0xfffffcff

08001ec0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ecc:	2317      	movs	r3, #23
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d017      	beq.n	8001f0a <LL_TIM_OC_Init+0x4a>
 8001eda:	d802      	bhi.n	8001ee2 <LL_TIM_OC_Init+0x22>
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d009      	beq.n	8001ef4 <LL_TIM_OC_Init+0x34>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001ee0:	e034      	b.n	8001f4c <LL_TIM_OC_Init+0x8c>
  switch (Channel)
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	0052      	lsls	r2, r2, #1
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01a      	beq.n	8001f20 <LL_TIM_OC_Init+0x60>
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0152      	lsls	r2, r2, #5
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d021      	beq.n	8001f36 <LL_TIM_OC_Init+0x76>
      break;
 8001ef2:	e02b      	b.n	8001f4c <LL_TIM_OC_Init+0x8c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001ef4:	2317      	movs	r3, #23
 8001ef6:	18fc      	adds	r4, r7, r3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0011      	movs	r1, r2
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f82b 	bl	8001f5a <OC1Config>
 8001f04:	0003      	movs	r3, r0
 8001f06:	7023      	strb	r3, [r4, #0]
      break;
 8001f08:	e020      	b.n	8001f4c <LL_TIM_OC_Init+0x8c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fc      	adds	r4, r7, r3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f867 	bl	8001fe8 <OC2Config>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	7023      	strb	r3, [r4, #0]
      break;
 8001f1e:	e015      	b.n	8001f4c <LL_TIM_OC_Init+0x8c>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001f20:	2317      	movs	r3, #23
 8001f22:	18fc      	adds	r4, r7, r3
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 f8a8 	bl	8002080 <OC3Config>
 8001f30:	0003      	movs	r3, r0
 8001f32:	7023      	strb	r3, [r4, #0]
      break;
 8001f34:	e00a      	b.n	8001f4c <LL_TIM_OC_Init+0x8c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001f36:	2317      	movs	r3, #23
 8001f38:	18fc      	adds	r4, r7, r3
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	0011      	movs	r1, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 f8e7 	bl	8002114 <OC4Config>
 8001f46:	0003      	movs	r3, r0
 8001f48:	7023      	strb	r3, [r4, #0]
      break;
 8001f4a:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001f4c:	2317      	movs	r3, #23
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b007      	add	sp, #28
 8001f58:	bd90      	pop	{r4, r7, pc}

08001f5a <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2203      	movs	r2, #3
 8001f88:	4393      	bics	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2270      	movs	r2, #112	; 0x70
 8001f90:	4393      	bics	r3, r2
 8001f92:	001a      	movs	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0011      	movs	r1, r2
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff feee 	bl	8001db2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <OC2Config+0x90>)
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <OC2Config+0x94>)
 800201e:	401a      	ands	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2220      	movs	r2, #32
 800202e:	4393      	bics	r3, r2
 8002030:	001a      	movs	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2210      	movs	r2, #16
 8002040:	4393      	bics	r3, r2
 8002042:	001a      	movs	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff feb1 	bl	8001dca <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800206e:	2300      	movs	r3, #0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b006      	add	sp, #24
 8002076:	bd80      	pop	{r7, pc}
 8002078:	fffffcff 	.word	0xfffffcff
 800207c:	ffff8fff 	.word	0xffff8fff

08002080 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a1f      	ldr	r2, [pc, #124]	; (800210c <OC3Config+0x8c>)
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2203      	movs	r2, #3
 80020ac:	4393      	bics	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2270      	movs	r2, #112	; 0x70
 80020b4:	4393      	bics	r3, r2
 80020b6:	001a      	movs	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <OC3Config+0x90>)
 80020c4:	401a      	ands	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4a0e      	ldr	r2, [pc, #56]	; (800210c <OC3Config+0x8c>)
 80020d4:	401a      	ands	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fe74 	bl	8001de2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002100:	2300      	movs	r3, #0
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b006      	add	sp, #24
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	fffffeff 	.word	0xfffffeff
 8002110:	fffffdff 	.word	0xfffffdff

08002114 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <OC4Config+0x8c>)
 8002124:	401a      	ands	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <OC4Config+0x90>)
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <OC4Config+0x94>)
 8002148:	401a      	ands	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a15      	ldr	r2, [pc, #84]	; (80021ac <OC4Config+0x98>)
 8002158:	401a      	ands	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	031b      	lsls	r3, r3, #12
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <OC4Config+0x8c>)
 8002168:	401a      	ands	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	031b      	lsls	r3, r3, #12
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fe36 	bl	8001dfa <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b006      	add	sp, #24
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	ffffefff 	.word	0xffffefff
 80021a4:	fffffcff 	.word	0xfffffcff
 80021a8:	ffff8fff 	.word	0xffff8fff
 80021ac:	ffffdfff 	.word	0xffffdfff

080021b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fd ffa3 	bl	8000108 <__udivsi3>
 80021c2:	0003      	movs	r3, r0
 80021c4:	001a      	movs	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <LL_InitTick+0x30>)
 80021c8:	3a01      	subs	r2, #1
 80021ca:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <LL_InitTick+0x30>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <LL_InitTick+0x30>)
 80021d4:	2205      	movs	r2, #5
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021ec:	23fa      	movs	r3, #250	; 0xfa
 80021ee:	009a      	lsls	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ffdb 	bl	80021b0 <LL_InitTick>
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <LL_mDelay+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002212:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	d00c      	beq.n	8002234 <LL_mDelay+0x30>
  {
    Delay++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3301      	adds	r3, #1
 800221e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002220:	e008      	b.n	8002234 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <LL_mDelay+0x40>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	4013      	ands	r3, r2
 800222c:	d002      	beq.n	8002234 <LL_mDelay+0x30>
    {
      Delay--;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3b01      	subs	r3, #1
 8002232:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f3      	bne.n	8002222 <LL_mDelay+0x1e>
    }
  }
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	e000e010 	.word	0xe000e010

08002248 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <LL_SetSystemCoreClock+0x18>)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]
}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	46bd      	mov	sp, r7
 800225a:	b002      	add	sp, #8
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	20000084 	.word	0x20000084

08002264 <__libc_init_array>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	2600      	movs	r6, #0
 8002268:	4d0c      	ldr	r5, [pc, #48]	; (800229c <__libc_init_array+0x38>)
 800226a:	4c0d      	ldr	r4, [pc, #52]	; (80022a0 <__libc_init_array+0x3c>)
 800226c:	1b64      	subs	r4, r4, r5
 800226e:	10a4      	asrs	r4, r4, #2
 8002270:	42a6      	cmp	r6, r4
 8002272:	d109      	bne.n	8002288 <__libc_init_array+0x24>
 8002274:	2600      	movs	r6, #0
 8002276:	f000 f821 	bl	80022bc <_init>
 800227a:	4d0a      	ldr	r5, [pc, #40]	; (80022a4 <__libc_init_array+0x40>)
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <__libc_init_array+0x44>)
 800227e:	1b64      	subs	r4, r4, r5
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	42a6      	cmp	r6, r4
 8002284:	d105      	bne.n	8002292 <__libc_init_array+0x2e>
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	00b3      	lsls	r3, r6, #2
 800228a:	58eb      	ldr	r3, [r5, r3]
 800228c:	4798      	blx	r3
 800228e:	3601      	adds	r6, #1
 8002290:	e7ee      	b.n	8002270 <__libc_init_array+0xc>
 8002292:	00b3      	lsls	r3, r6, #2
 8002294:	58eb      	ldr	r3, [r5, r3]
 8002296:	4798      	blx	r3
 8002298:	3601      	adds	r6, #1
 800229a:	e7f2      	b.n	8002282 <__libc_init_array+0x1e>
 800229c:	080022f4 	.word	0x080022f4
 80022a0:	080022f4 	.word	0x080022f4
 80022a4:	080022f4 	.word	0x080022f4
 80022a8:	080022f8 	.word	0x080022f8

080022ac <memset>:
 80022ac:	0003      	movs	r3, r0
 80022ae:	1812      	adds	r2, r2, r0
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d100      	bne.n	80022b6 <memset+0xa>
 80022b4:	4770      	bx	lr
 80022b6:	7019      	strb	r1, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	e7f9      	b.n	80022b0 <memset+0x4>

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
