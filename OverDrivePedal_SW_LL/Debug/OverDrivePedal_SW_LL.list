
OverDrivePedal_SW_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bf8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001cb8  08001cb8  00011cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cd8  08001cd8  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd8  08001cd8  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd8  08001cd8  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd8  08001cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cdc  08001cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08001ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000108  08001de8  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001de8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c08  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010b2  00000000  00000000  00024d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b0  00000000  00000000  00025df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f8  00000000  00000000  000263a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b642  00000000  00000000  00026898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000473e  00000000  00000000  00031eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003abcc  00000000  00000000  00036618  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000711e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012b0  00000000  00000000  00071260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000108 	.word	0x20000108
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ca0 	.word	0x08001ca0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000010c 	.word	0x2000010c
 8000104:	08001ca0 	.word	0x08001ca0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <NVIC_EnableIRQ+0x28>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b7f      	cmp	r3, #127	; 0x7f
 8000260:	d932      	bls.n	80002c8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000262:	4a2f      	ldr	r2, [pc, #188]	; (8000320 <NVIC_SetPriority+0xd4>)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	0019      	movs	r1, r3
 800026a:	230f      	movs	r3, #15
 800026c:	400b      	ands	r3, r1
 800026e:	3b08      	subs	r3, #8
 8000270:	089b      	lsrs	r3, r3, #2
 8000272:	3306      	adds	r3, #6
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	18d3      	adds	r3, r2, r3
 8000278:	3304      	adds	r3, #4
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1dfa      	adds	r2, r7, #7
 800027e:	7812      	ldrb	r2, [r2, #0]
 8000280:	0011      	movs	r1, r2
 8000282:	2203      	movs	r2, #3
 8000284:	400a      	ands	r2, r1
 8000286:	00d2      	lsls	r2, r2, #3
 8000288:	21ff      	movs	r1, #255	; 0xff
 800028a:	4091      	lsls	r1, r2
 800028c:	000a      	movs	r2, r1
 800028e:	43d2      	mvns	r2, r2
 8000290:	401a      	ands	r2, r3
 8000292:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	019b      	lsls	r3, r3, #6
 8000298:	22ff      	movs	r2, #255	; 0xff
 800029a:	401a      	ands	r2, r3
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	0018      	movs	r0, r3
 80002a2:	2303      	movs	r3, #3
 80002a4:	4003      	ands	r3, r0
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	481d      	ldr	r0, [pc, #116]	; (8000320 <NVIC_SetPriority+0xd4>)
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	001c      	movs	r4, r3
 80002b2:	230f      	movs	r3, #15
 80002b4:	4023      	ands	r3, r4
 80002b6:	3b08      	subs	r3, #8
 80002b8:	089b      	lsrs	r3, r3, #2
 80002ba:	430a      	orrs	r2, r1
 80002bc:	3306      	adds	r3, #6
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	18c3      	adds	r3, r0, r3
 80002c2:	3304      	adds	r3, #4
 80002c4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002c6:	e027      	b.n	8000318 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <NVIC_SetPriority+0xd8>)
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	33c0      	adds	r3, #192	; 0xc0
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	589b      	ldr	r3, [r3, r2]
 80002d8:	1dfa      	adds	r2, r7, #7
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	0011      	movs	r1, r2
 80002de:	2203      	movs	r2, #3
 80002e0:	400a      	ands	r2, r1
 80002e2:	00d2      	lsls	r2, r2, #3
 80002e4:	21ff      	movs	r1, #255	; 0xff
 80002e6:	4091      	lsls	r1, r2
 80002e8:	000a      	movs	r2, r1
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	401a      	ands	r2, r3
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	2303      	movs	r3, #3
 8000300:	4003      	ands	r3, r0
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <NVIC_SetPriority+0xd8>)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b25b      	sxtb	r3, r3
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	33c0      	adds	r3, #192	; 0xc0
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	501a      	str	r2, [r3, r0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e000e100 	.word	0xe000e100

08000328 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	430a      	orrs	r2, r1
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 800033e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4013      	ands	r3, r2
 8000344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	21ff      	movs	r1, #255	; 0xff
 8000364:	400b      	ands	r3, r1
 8000366:	3302      	adds	r3, #2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	589b      	ldr	r3, [r3, r2]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	0c12      	lsrs	r2, r2, #16
 8000370:	210f      	movs	r1, #15
 8000372:	4091      	lsls	r1, r2
 8000374:	000a      	movs	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
 800037a:	0011      	movs	r1, r2
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	0c1b      	lsrs	r3, r3, #16
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	409a      	lsls	r2, r3
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	24ff      	movs	r4, #255	; 0xff
 800038a:	4023      	ands	r3, r4
 800038c:	430a      	orrs	r2, r1
 800038e:	3302      	adds	r3, #2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	501a      	str	r2, [r3, r0]
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b003      	add	sp, #12
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	40010000 	.word	0x40010000

080003a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6819      	ldr	r1, [r3, #0]
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	435a      	muls	r2, r3
 80003b6:	0013      	movs	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	43db      	mvns	r3, r3
 80003be:	400b      	ands	r3, r1
 80003c0:	001a      	movs	r2, r3
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	434b      	muls	r3, r1
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	434b      	muls	r3, r1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}

080003da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b084      	sub	sp, #16
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68d9      	ldr	r1, [r3, #12]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	435a      	muls	r2, r3
 80003f0:	0013      	movs	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	189b      	adds	r3, r3, r2
 80003f6:	43db      	mvns	r3, r3
 80003f8:	400b      	ands	r3, r1
 80003fa:	001a      	movs	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	68b9      	ldr	r1, [r7, #8]
 8000400:	434b      	muls	r3, r1
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	434b      	muls	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}

08000414 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000432:	2418      	movs	r4, #24
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2308      	movs	r3, #8
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f001 fc27 	bl	8001c90 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	003b      	movs	r3, r7
 8000444:	0018      	movs	r0, r3
 8000446:	2318      	movs	r3, #24
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f001 fc20 	bl	8001c90 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000450:	2004      	movs	r0, #4
 8000452:	f7ff ff69 	bl	8000328 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff66 	bl	8000328 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	4a33      	ldr	r2, [pc, #204]	; (8000530 <MX_GPIO_Init+0x104>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f7ff ffd5 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin);
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	009a      	lsls	r2, r3, #2
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ffcd 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CLEAN_ENABLE_Pin;
 800047a:	003b      	movs	r3, r7
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	01d2      	lsls	r2, r2, #7
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000482:	003b      	movs	r3, r7
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000488:	003b      	movs	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000494:	003b      	movs	r3, r7
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CLEAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800049a:	003b      	movs	r3, r7
 800049c:	4a24      	ldr	r2, [pc, #144]	; (8000530 <MX_GPIO_Init+0x104>)
 800049e:	0019      	movs	r1, r3
 80004a0:	0010      	movs	r0, r2
 80004a2:	f001 f8fa 	bl	800169a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FX_ENABLE_Pin;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	0092      	lsls	r2, r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2201      	movs	r2, #1
 80004c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(FX_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80004c6:	003a      	movs	r2, r7
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f8e3 	bl	800169a <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE4);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ff3c 	bl	8000354 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_PULL_UP);
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff ff78 	bl	80003da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_MODE_INPUT);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ff54 	bl	80003a0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2210      	movs	r2, #16
 80004fe:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2202      	movs	r2, #2
 8000510:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000512:	187b      	adds	r3, r7, r1
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ff7d 	bl	8001414 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800051a:	2100      	movs	r1, #0
 800051c:	2007      	movs	r0, #7
 800051e:	f7ff fe95 	bl	800024c <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000522:	2007      	movs	r0, #7
 8000524:	f7ff fe7c 	bl	8000220 <NVIC_EnableIRQ>

}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b009      	add	sp, #36	; 0x24
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	50000800 	.word	0x50000800

08000534 <ledprogram_symcontfade>:
}
*/

// Symmetrical PWM by lookup table
void ledprogram_symcontfade()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

	  if(pwm_dir_forward)
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <ledprogram_symcontfade+0x78>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d006      	beq.n	800054e <ledprogram_symcontfade+0x1a>
		  pwm_bit_pos++;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e005      	b.n	800055a <ledprogram_symcontfade+0x26>
	  else
		  pwm_bit_pos--;
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000558:	701a      	strb	r2, [r3, #0]



	  // change direction at sequence limits
	  if(pwm_bit_pos >= (FADE_LOG_SEQ_DATA_SIZE-1))
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b3e      	cmp	r3, #62	; 0x3e
 8000560:	d908      	bls.n	8000574 <ledprogram_symcontfade+0x40>
	  {
		  //pwm_bit_pos = FADE_LOG_SEQ_DATA_SIZE/5;
		  pwm_dir_forward = 0;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <ledprogram_symcontfade+0x78>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
		  pwm_bit_pos--;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000572:	701a      	strb	r2, [r3, #0]
	  }
	  if(pwm_bit_pos < 1)
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <ledprogram_symcontfade+0x4e>
	  {
		  pwm_dir_forward = 1;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <ledprogram_symcontfade+0x78>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
	  }



	  TIM2->CCR1 = fade_log_seq_data_table[pwm_bit_pos];
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	0019      	movs	r1, r3
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <ledprogram_symcontfade+0x80>)
 800058e:	0089      	lsls	r1, r1, #2
 8000590:	588a      	ldr	r2, [r1, r2]
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = fade_log_seq_data_table[pwm_bit_pos];
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	0019      	movs	r1, r3
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <ledprogram_symcontfade+0x80>)
 80005a0:	0089      	lsls	r1, r1, #2
 80005a2:	588a      	ldr	r2, [r1, r2]
 80005a4:	639a      	str	r2, [r3, #56]	; 0x38

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000100 	.word	0x20000100
 80005b0:	20000124 	.word	0x20000124
 80005b4:	20000000 	.word	0x20000000

080005b8 <NVIC_EnableIRQ>:
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	0002      	movs	r2, r0
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	231f      	movs	r3, #31
 80005cc:	401a      	ands	r2, r3
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <NVIC_EnableIRQ+0x28>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	4091      	lsls	r1, r2
 80005d4:	000a      	movs	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	e000e100 	.word	0xe000e100

080005e4 <NVIC_SetPriority>:
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	0002      	movs	r2, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b7f      	cmp	r3, #127	; 0x7f
 80005f8:	d932      	bls.n	8000660 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <NVIC_SetPriority+0xd4>)
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	0019      	movs	r1, r3
 8000602:	230f      	movs	r3, #15
 8000604:	400b      	ands	r3, r1
 8000606:	3b08      	subs	r3, #8
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	3306      	adds	r3, #6
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	18d3      	adds	r3, r2, r3
 8000610:	3304      	adds	r3, #4
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	1dfa      	adds	r2, r7, #7
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	0011      	movs	r1, r2
 800061a:	2203      	movs	r2, #3
 800061c:	400a      	ands	r2, r1
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	21ff      	movs	r1, #255	; 0xff
 8000622:	4091      	lsls	r1, r2
 8000624:	000a      	movs	r2, r1
 8000626:	43d2      	mvns	r2, r2
 8000628:	401a      	ands	r2, r3
 800062a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	019b      	lsls	r3, r3, #6
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	401a      	ands	r2, r3
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	0018      	movs	r0, r3
 800063a:	2303      	movs	r3, #3
 800063c:	4003      	ands	r3, r0
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <NVIC_SetPriority+0xd4>)
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	001c      	movs	r4, r3
 800064a:	230f      	movs	r3, #15
 800064c:	4023      	ands	r3, r4
 800064e:	3b08      	subs	r3, #8
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	430a      	orrs	r2, r1
 8000654:	3306      	adds	r3, #6
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	18c3      	adds	r3, r0, r3
 800065a:	3304      	adds	r3, #4
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	e027      	b.n	80006b0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <NVIC_SetPriority+0xd8>)
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b25b      	sxtb	r3, r3
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	33c0      	adds	r3, #192	; 0xc0
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	589b      	ldr	r3, [r3, r2]
 8000670:	1dfa      	adds	r2, r7, #7
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	0011      	movs	r1, r2
 8000676:	2203      	movs	r2, #3
 8000678:	400a      	ands	r2, r1
 800067a:	00d2      	lsls	r2, r2, #3
 800067c:	21ff      	movs	r1, #255	; 0xff
 800067e:	4091      	lsls	r1, r2
 8000680:	000a      	movs	r2, r1
 8000682:	43d2      	mvns	r2, r2
 8000684:	401a      	ands	r2, r3
 8000686:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	019b      	lsls	r3, r3, #6
 800068c:	22ff      	movs	r2, #255	; 0xff
 800068e:	401a      	ands	r2, r3
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	0018      	movs	r0, r3
 8000696:	2303      	movs	r3, #3
 8000698:	4003      	ands	r3, r0
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <NVIC_SetPriority+0xd8>)
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	430a      	orrs	r2, r1
 80006aa:	33c0      	adds	r3, #192	; 0xc0
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	501a      	str	r2, [r3, r0]
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b003      	add	sp, #12
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <LL_LPTIM_SetUpdateMode+0x24>)
 80006d0:	401a      	ands	r2, r3
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	431a      	orrs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60da      	str	r2, [r3, #12]
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	ffbfffff 	.word	0xffbfffff

080006e8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <LL_LPTIM_SetCounterMode+0x24>)
 80006f8:	401a      	ands	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60da      	str	r2, [r3, #12]
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	ff7fffff 	.word	0xff7fffff

08000710 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <LL_LPTIM_SetPolarity+0x24>)
 8000720:	401a      	ands	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	ffdfffff 	.word	0xffdfffff

08000738 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <LL_LPTIM_SetPrescaler+0x24>)
 8000748:	401a      	ands	r2, r3
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	fffff1ff 	.word	0xfffff1ff

08000760 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <LL_LPTIM_TrigSw+0x1c>)
 800076e:	401a      	ands	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60da      	str	r2, [r3, #12]
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	fff9ffff 	.word	0xfff9ffff

08000780 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	2201      	movs	r2, #1
 8000790:	4393      	bics	r3, r2
 8000792:	001a      	movs	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	431a      	orrs	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60da      	str	r2, [r3, #12]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <LL_APB1_GRP1_EnableClock>:
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <LL_APB1_GRP1_EnableClock+0x28>)
 80007ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <LL_APB1_GRP1_EnableClock+0x28>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <LL_APB1_GRP1_EnableClock+0x28>)
 80007ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4013      	ands	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b004      	add	sp, #16
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	061b      	lsls	r3, r3, #24
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ffe3 	bl	80007a4 <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn, 0);
 80007de:	2100      	movs	r1, #0
 80007e0:	200d      	movs	r0, #13
 80007e2:	f7ff feff 	bl	80005e4 <NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM1_IRQn);
 80007e6:	200d      	movs	r0, #13
 80007e8:	f7ff fee6 	bl	80005b8 <NVIC_EnableIRQ>

  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_LPTIM1_Init+0x60>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ffc5 	bl	8000780 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 80007f6:	23e0      	movs	r3, #224	; 0xe0
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <MX_LPTIM1_Init+0x60>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f7ff ff9a 	bl	8000738 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_LPTIM1_Init+0x60>)
 8000806:	2100      	movs	r1, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff ff81 	bl	8000710 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_LPTIM1_Init+0x60>)
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ff54 	bl	80006c0 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_LPTIM1_Init+0x60>)
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff63 	bl	80006e8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <MX_LPTIM1_Init+0x60>)
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff ff9b 	bl	8000760 <LL_LPTIM_TrigSw>

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40007c00 	.word	0x40007c00

08000834 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <LL_RCC_HSI_Enable+0x18>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <LL_RCC_HSI_Enable+0x18>)
 800083e:	2101      	movs	r1, #1
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40021000 	.word	0x40021000

08000850 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <LL_RCC_HSI_IsReady+0x1c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2204      	movs	r2, #4
 800085a:	4013      	ands	r3, r2
 800085c:	2b04      	cmp	r3, #4
 800085e:	d101      	bne.n	8000864 <LL_RCC_HSI_IsReady+0x14>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <LL_RCC_HSI_IsReady+0x16>
 8000864:	2300      	movs	r3, #0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800087e:	4013      	ands	r3, r2
 8000880:	0019      	movs	r1, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	021a      	lsls	r2, r3, #8
 8000886:	4b03      	ldr	r3, [pc, #12]	; (8000894 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000888:	430a      	orrs	r2, r1
 800088a:	605a      	str	r2, [r3, #4]
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	ffffe0ff 	.word	0xffffe0ff

0800089c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LL_RCC_SetSysClkSource+0x24>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	2203      	movs	r2, #3
 80008aa:	4393      	bics	r3, r2
 80008ac:	0019      	movs	r1, r3
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <LL_RCC_SetSysClkSource+0x24>)
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	60da      	str	r2, [r3, #12]
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <LL_RCC_GetSysClkSource+0x14>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	220c      	movs	r2, #12
 80008ce:	4013      	ands	r3, r2
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000

080008dc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LL_RCC_SetAHBPrescaler+0x24>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	22f0      	movs	r2, #240	; 0xf0
 80008ea:	4393      	bics	r3, r2
 80008ec:	0019      	movs	r1, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_RCC_SetAHBPrescaler+0x24>)
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	60da      	str	r2, [r3, #12]
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LL_RCC_SetAPB1Prescaler+0x24>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000912:	4013      	ands	r3, r2
 8000914:	0019      	movs	r1, r3
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	430a      	orrs	r2, r1
 800091c:	60da      	str	r2, [r3, #12]
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40021000 	.word	0x40021000
 800092c:	fffff8ff 	.word	0xfffff8ff

08000930 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <LL_RCC_SetAPB2Prescaler+0x24>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <LL_RCC_SetAPB2Prescaler+0x28>)
 800093e:	4013      	ands	r3, r2
 8000940:	0019      	movs	r1, r3
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	430a      	orrs	r2, r1
 8000948:	60da      	str	r2, [r3, #12]
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40021000 	.word	0x40021000
 8000958:	ffffc7ff 	.word	0xffffc7ff

0800095c <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LL_RCC_SetLPTIMClockSource+0x24>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <LL_RCC_SetLPTIMClockSource+0x28>)
 800096a:	4013      	ands	r3, r2
 800096c:	0019      	movs	r1, r3
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <LL_RCC_SetLPTIMClockSource+0x24>)
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	430a      	orrs	r2, r1
 8000974:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021000 	.word	0x40021000
 8000984:	fff3ffff 	.word	0xfff3ffff

08000988 <LL_APB1_GRP1_EnableClock>:
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000992:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	430a      	orrs	r2, r1
 800099a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <LL_APB1_GRP1_EnableClock+0x28>)
 800099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4013      	ands	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b004      	add	sp, #16
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <LL_APB2_GRP1_EnableClock>:
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <LL_APB2_GRP1_EnableClock+0x28>)
 80009be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <LL_APB2_GRP1_EnableClock+0x28>)
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <LL_APB2_GRP1_EnableClock+0x28>)
 80009ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4013      	ands	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <LL_FLASH_SetLatency+0x24>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2201      	movs	r2, #1
 80009ee:	4393      	bics	r3, r2
 80009f0:	0019      	movs	r1, r3
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <LL_FLASH_SetLatency+0x24>)
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40022000 	.word	0x40022000

08000a08 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <LL_FLASH_GetLatency+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4013      	ands	r3, r2
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40022000 	.word	0x40022000

08000a20 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	0019      	movs	r1, r3
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	430a      	orrs	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40007000 	.word	0x40007000
 8000a48:	ffffe7ff 	.word	0xffffe7ff

08000a4c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	621a      	str	r2, [r3, #32]
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d00d      	beq.n	8000ab6 <LL_TIM_OC_SetMode+0x2e>
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b10      	cmp	r3, #16
 8000a9e:	d008      	beq.n	8000ab2 <LL_TIM_OC_SetMode+0x2a>
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d101      	bne.n	8000aae <LL_TIM_OC_SetMode+0x26>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	e004      	b.n	8000ab8 <LL_TIM_OC_SetMode+0x30>
 8000aae:	2306      	movs	r3, #6
 8000ab0:	e002      	b.n	8000ab8 <LL_TIM_OC_SetMode+0x30>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e000      	b.n	8000ab8 <LL_TIM_OC_SetMode+0x30>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3318      	adds	r3, #24
 8000abe:	001a      	movs	r2, r3
 8000ac0:	0029      	movs	r1, r5
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <LL_TIM_OC_SetMode+0x6c>)
 8000ac4:	5c5b      	ldrb	r3, [r3, r1]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	0029      	movs	r1, r5
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LL_TIM_OC_SetMode+0x70>)
 8000ad0:	5c52      	ldrb	r2, [r2, r1]
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	2273      	movs	r2, #115	; 0x73
 8000ad6:	408a      	lsls	r2, r1
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	401a      	ands	r2, r3
 8000adc:	0029      	movs	r1, r5
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <LL_TIM_OC_SetMode+0x70>)
 8000ae0:	5c5b      	ldrb	r3, [r3, r1]
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	408b      	lsls	r3, r1
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6023      	str	r3, [r4, #0]
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b004      	add	sp, #16
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}
 8000af4:	08001cb8 	.word	0x08001cb8
 8000af8:	08001cc0 	.word	0x08001cc0

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ff57 	bl	80009b4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	055b      	lsls	r3, r3, #21
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff ff3c 	bl	8000988 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f85c 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f7ff fc8a 	bl	800042c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b18:	f000 fac1 	bl	800109e <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000b1c:	f7ff fe58 	bl	80007d0 <MX_LPTIM1_Init>
  MX_TIM21_Init();
 8000b20:	f000 fb6c 	bl	80011fc <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	2260      	movs	r2, #96	; 0x60
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ffab 	bl	8000a88 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2101      	movs	r1, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff95 	bl	8000a68 <LL_TIM_CC_EnableChannel>

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2260      	movs	r2, #96	; 0x60
 8000b44:	2110      	movs	r1, #16
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff ff9e 	bl	8000a88 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	2110      	movs	r1, #16
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff ff88 	bl	8000a68 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM2);
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ff75 	bl	8000a4c <LL_TIM_EnableCounter>

  TIM2->ARR = 8191;
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <main+0xbc>)
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  // init the PWM duty to 0%
  TIM2->CCR1 = 0;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2200      	movs	r2, #0
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	2200      	movs	r2, #0
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38



  // init bypass soft switches
  // clean routing enabled, fx routing disabled
  CLEAN_ENABLE_GPIO_Port->ODR |= (CLEAN_ENABLE_Pin);
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <main+0xc0>)
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <main+0xc0>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	01c9      	lsls	r1, r1, #7
 8000b84:	430a      	orrs	r2, r1
 8000b86:	615a      	str	r2, [r3, #20]
  FX_ENABLE_GPIO_Port->ODR &= ~(FX_ENABLE_Pin);
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	695a      	ldr	r2, [r3, #20]
 8000b8e:	23a0      	movs	r3, #160	; 0xa0
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	490b      	ldr	r1, [pc, #44]	; (8000bc0 <main+0xc4>)
 8000b94:	400a      	ands	r2, r1
 8000b96:	615a      	str	r2, [r3, #20]


  // debounce timer
  //LL_TIM_EnableIT_UPDATE(TIM21);
  LL_TIM_EnableCounter(TIM21);
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <main+0xc8>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff56 	bl	8000a4c <LL_TIM_EnableCounter>
  TIM21->PSC = 65535;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <main+0xc8>)
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <main+0xcc>)
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  TIM21->ARR = 65535;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <main+0xc8>)
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <main+0xcc>)
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  LL_mDelay(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f001 f81b 	bl	8001be8 <LL_mDelay>
	  ledprogram_symcontfade();
 8000bb2:	f7ff fcbf 	bl	8000534 <ledprogram_symcontfade>
	  LL_mDelay(100);
 8000bb6:	e7f9      	b.n	8000bac <main+0xb0>
 8000bb8:	00001fff 	.word	0x00001fff
 8000bbc:	50000800 	.word	0x50000800
 8000bc0:	fffffdff 	.word	0xfffffdff
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	0000ffff 	.word	0x0000ffff

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff05 	bl	80009e0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000bd6:	f7ff ff17 	bl	8000a08 <LL_FLASH_GetLatency>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x16>
  {
  Error_Handler();  
 8000bde:	f000 f833 	bl	8000c48 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff ff1a 	bl	8000a20 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000bec:	f7ff fe22 	bl	8000834 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	f7ff fe2d 	bl	8000850 <LL_RCC_HSI_IsReady>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d1fa      	bne.n	8000bf2 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000bfc:	2010      	movs	r0, #16
 8000bfe:	f7ff fe37 	bl	8000870 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fe6a 	bl	80008dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fe7b 	bl	8000904 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fe8e 	bl	8000930 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fe41 	bl	800089c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	f7ff fe52 	bl	80008c4 <LL_RCC_GetSysClkSource>
 8000c20:	0003      	movs	r3, r0
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d1fa      	bne.n	8000c1c <SystemClock_Config+0x50>
  {
  
  }

  LL_Init1msTick(16000000);
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <SystemClock_Config+0x78>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 ffcd 	bl	8001bc8 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SystemClock_Config+0x78>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fffb 	bl	8001c2c <LL_SetSystemCoreClock>
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fe90 	bl	800095c <LL_RCC_SetLPTIMClockSource>
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	00f42400 	.word	0x00f42400

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4013      	ands	r3, r2
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	425a      	negs	r2, r3
 8000c6a:	4153      	adcs	r3, r2
 8000c6c:	b2db      	uxtb	r3, r3
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40010400 	.word	0x40010400

08000c7c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	615a      	str	r2, [r3, #20]
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40010400 	.word	0x40010400

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint16_t interrupt_time = TIM21->CNT;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <EXTI4_15_IRQHandler+0x5c>)
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	1dbb      	adds	r3, r7, #6
 8000cd4:	801a      	strh	r2, [r3, #0]
	if ((interrupt_time - last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <EXTI4_15_IRQHandler+0x60>)
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	2b40      	cmp	r3, #64	; 0x40
 8000ce2:	dd0f      	ble.n	8000d04 <EXTI4_15_IRQHandler+0x3c>
	{
		// toggle bypass soft switches
		CLEAN_ENABLE_GPIO_Port->ODR ^= CLEAN_ENABLE_Pin;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <EXTI4_15_IRQHandler+0x64>)
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <EXTI4_15_IRQHandler+0x64>)
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	01c9      	lsls	r1, r1, #7
 8000cee:	404a      	eors	r2, r1
 8000cf0:	615a      	str	r2, [r3, #20]
		FX_ENABLE_GPIO_Port->ODR ^= FX_ENABLE_Pin;
 8000cf2:	23a0      	movs	r3, #160	; 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	695a      	ldr	r2, [r3, #20]
 8000cf8:	23a0      	movs	r3, #160	; 0xa0
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0089      	lsls	r1, r1, #2
 8000d00:	404a      	eors	r2, r1
 8000d02:	615a      	str	r2, [r3, #20]
	}
	last_interrupt_time = interrupt_time;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <EXTI4_15_IRQHandler+0x60>)
 8000d06:	1dba      	adds	r2, r7, #6
 8000d08:	8812      	ldrh	r2, [r2, #0]
 8000d0a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f7ff ffa1 	bl	8000c54 <LL_EXTI_IsActiveFlag_0_31>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d002      	beq.n	8000d1c <EXTI4_15_IRQHandler+0x54>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8000d16:	2010      	movs	r0, #16
 8000d18:	f7ff ffb0 	bl	8000c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000126 	.word	0x20000126
 8000d2c:	50000800 	.word	0x50000800

08000d30 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	//TIM2->CCR2 = led_value2;
  /* USER CODE END LPTIM1_IRQn 0 */
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <SystemInit+0x64>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <SystemInit+0x64>)
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	0049      	lsls	r1, r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <SystemInit+0x64>)
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <SystemInit+0x64>)
 8000d5c:	4913      	ldr	r1, [pc, #76]	; (8000dac <SystemInit+0x68>)
 8000d5e:	400a      	ands	r2, r1
 8000d60:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <SystemInit+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <SystemInit+0x64>)
 8000d68:	4911      	ldr	r1, [pc, #68]	; (8000db0 <SystemInit+0x6c>)
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <SystemInit+0x64>)
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <SystemInit+0x64>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	438a      	bics	r2, r1
 8000d78:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <SystemInit+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <SystemInit+0x64>)
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <SystemInit+0x70>)
 8000d82:	400a      	ands	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <SystemInit+0x64>)
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SystemInit+0x64>)
 8000d8c:	490a      	ldr	r1, [pc, #40]	; (8000db8 <SystemInit+0x74>)
 8000d8e:	400a      	ands	r2, r1
 8000d90:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SystemInit+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <SystemInit+0x78>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	0512      	lsls	r2, r2, #20
 8000d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40021000 	.word	0x40021000
 8000dac:	88ff400c 	.word	0x88ff400c
 8000db0:	fef6fff6 	.word	0xfef6fff6
 8000db4:	fffbffff 	.word	0xfffbffff
 8000db8:	ff02ffff 	.word	0xff02ffff
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EnableIRQ>:
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	231f      	movs	r3, #31
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <NVIC_EnableIRQ+0x28>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4091      	lsls	r1, r2
 8000ddc:	000a      	movs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	e000e100 	.word	0xe000e100

08000dec <NVIC_SetPriority>:
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000e00:	d932      	bls.n	8000e68 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <NVIC_SetPriority+0xd4>)
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	0019      	movs	r1, r3
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3306      	adds	r3, #6
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	18d3      	adds	r3, r2, r3
 8000e18:	3304      	adds	r3, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1dfa      	adds	r2, r7, #7
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	0011      	movs	r1, r2
 8000e22:	2203      	movs	r2, #3
 8000e24:	400a      	ands	r2, r1
 8000e26:	00d2      	lsls	r2, r2, #3
 8000e28:	21ff      	movs	r1, #255	; 0xff
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	43d2      	mvns	r2, r2
 8000e30:	401a      	ands	r2, r3
 8000e32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	019b      	lsls	r3, r3, #6
 8000e38:	22ff      	movs	r2, #255	; 0xff
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	0018      	movs	r0, r3
 8000e42:	2303      	movs	r3, #3
 8000e44:	4003      	ands	r3, r0
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <NVIC_SetPriority+0xd4>)
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001c      	movs	r4, r3
 8000e52:	230f      	movs	r3, #15
 8000e54:	4023      	ands	r3, r4
 8000e56:	3b08      	subs	r3, #8
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	3306      	adds	r3, #6
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	18c3      	adds	r3, r0, r3
 8000e62:	3304      	adds	r3, #4
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	e027      	b.n	8000eb8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e68:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <NVIC_SetPriority+0xd8>)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	33c0      	adds	r3, #192	; 0xc0
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	589b      	ldr	r3, [r3, r2]
 8000e78:	1dfa      	adds	r2, r7, #7
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	2203      	movs	r2, #3
 8000e80:	400a      	ands	r2, r1
 8000e82:	00d2      	lsls	r2, r2, #3
 8000e84:	21ff      	movs	r1, #255	; 0xff
 8000e86:	4091      	lsls	r1, r2
 8000e88:	000a      	movs	r2, r1
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	019b      	lsls	r3, r3, #6
 8000e94:	22ff      	movs	r2, #255	; 0xff
 8000e96:	401a      	ands	r2, r3
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	4003      	ands	r3, r0
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <NVIC_SetPriority+0xd8>)
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	33c0      	adds	r3, #192	; 0xc0
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	501a      	str	r2, [r3, r0]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <LL_APB1_GRP1_EnableClock>:
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ed2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_APB2_GRP1_EnableClock>:
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <LL_APB2_GRP1_EnableClock+0x28>)
 8000efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <LL_APB2_GRP1_EnableClock+0x28>)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <LL_APB2_GRP1_EnableClock+0x28>)
 8000f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000

08000f20 <LL_IOP_GRP1_EnableClock>:
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b004      	add	sp, #16
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_TIM_DisableARRPreload>:
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	4393      	bics	r3, r2
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d00d      	beq.n	8000f98 <LL_TIM_OC_DisableFast+0x2c>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d008      	beq.n	8000f94 <LL_TIM_OC_DisableFast+0x28>
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d101      	bne.n	8000f90 <LL_TIM_OC_DisableFast+0x24>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e004      	b.n	8000f9a <LL_TIM_OC_DisableFast+0x2e>
 8000f90:	2306      	movs	r3, #6
 8000f92:	e002      	b.n	8000f9a <LL_TIM_OC_DisableFast+0x2e>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e000      	b.n	8000f9a <LL_TIM_OC_DisableFast+0x2e>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3318      	adds	r3, #24
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	0029      	movs	r1, r5
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <LL_TIM_OC_DisableFast+0x5c>)
 8000fa6:	5c5b      	ldrb	r3, [r3, r1]
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	0029      	movs	r1, r5
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <LL_TIM_OC_DisableFast+0x60>)
 8000fb2:	5c52      	ldrb	r2, [r2, r1]
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	408a      	lsls	r2, r1
 8000fba:	43d2      	mvns	r2, r2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	6023      	str	r3, [r4, #0]

}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc8:	08001cc8 	.word	0x08001cc8
 8000fcc:	08001cd0 	.word	0x08001cd0

08000fd0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d00d      	beq.n	8000ffc <LL_TIM_OC_EnablePreload+0x2c>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d008      	beq.n	8000ff8 <LL_TIM_OC_EnablePreload+0x28>
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d101      	bne.n	8000ff4 <LL_TIM_OC_EnablePreload+0x24>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e004      	b.n	8000ffe <LL_TIM_OC_EnablePreload+0x2e>
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	e002      	b.n	8000ffe <LL_TIM_OC_EnablePreload+0x2e>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <LL_TIM_OC_EnablePreload+0x2e>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3318      	adds	r3, #24
 8001004:	001a      	movs	r2, r3
 8001006:	0029      	movs	r1, r5
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <LL_TIM_OC_EnablePreload+0x5c>)
 800100a:	5c5b      	ldrb	r3, [r3, r1]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001010:	6822      	ldr	r2, [r4, #0]
 8001012:	0029      	movs	r1, r5
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LL_TIM_OC_EnablePreload+0x60>)
 8001016:	5c5b      	ldrb	r3, [r3, r1]
 8001018:	0019      	movs	r1, r3
 800101a:	2308      	movs	r3, #8
 800101c:	408b      	lsls	r3, r1
 800101e:	4313      	orrs	r3, r2
 8001020:	6023      	str	r3, [r4, #0]
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bdb0      	pop	{r4, r5, r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	08001cc8 	.word	0x08001cc8
 8001030:	08001cd0 	.word	0x08001cd0

08001034 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <LL_TIM_SetClockSource+0x24>)
 8001044:	401a      	ands	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	ffffbff8 	.word	0xffffbff8

0800105c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2270      	movs	r2, #112	; 0x70
 800106c:	4393      	bics	r3, r2
 800106e:	001a      	movs	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}

08001080 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	4393      	bics	r3, r2
 8001090:	001a      	movs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}

0800109e <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800109e:	b5b0      	push	{r4, r5, r7, lr}
 80010a0:	b08e      	sub	sp, #56	; 0x38
 80010a2:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010a4:	2528      	movs	r5, #40	; 0x28
 80010a6:	197b      	adds	r3, r7, r5
 80010a8:	0018      	movs	r0, r3
 80010aa:	2310      	movs	r3, #16
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f000 fdee 	bl	8001c90 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010b4:	2418      	movs	r4, #24
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	2310      	movs	r3, #16
 80010bc:	001a      	movs	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f000 fde6 	bl	8001c90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	003b      	movs	r3, r7
 80010c6:	0018      	movs	r0, r3
 80010c8:	2318      	movs	r3, #24
 80010ca:	001a      	movs	r2, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	f000 fddf 	bl	8001c90 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fef8 	bl	8000ec8 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80010d8:	197b      	adds	r3, r7, r5
 80010da:	2200      	movs	r2, #0
 80010dc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010de:	197b      	adds	r3, r7, r5
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 64;
 80010e4:	197b      	adds	r3, r7, r5
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80010f0:	197a      	adds	r2, r7, r5
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 fb8b 	bl	8001814 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff ff22 	bl	8000f4c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	2101      	movs	r1, #1
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff5e 	bl	8000fd0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001114:	193b      	adds	r3, r7, r4
 8001116:	2260      	movs	r2, #96	; 0x60
 8001118:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8001120:	193b      	adds	r3, r7, r4
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001126:	193b      	adds	r3, r7, r4
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800112c:	193a      	adds	r2, r7, r4
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	2101      	movs	r1, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fbb5 	bl	80018a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	2101      	movs	r1, #1
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ff13 	bl	8000f6c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	2110      	movs	r1, #16
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ff3f 	bl	8000fd0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001158:	193a      	adds	r2, r7, r4
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	2110      	movs	r1, #16
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fb9f 	bl	80018a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	2110      	movs	r1, #16
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff fefd 	bl	8000f6c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	2100      	movs	r1, #0
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff6f 	bl	800105c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ff7c 	bl	8001080 <LL_TIM_DisableMasterSlaveMode>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff fec9 	bl	8000f20 <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800118e:	003b      	movs	r3, r7
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001194:	003b      	movs	r3, r7
 8001196:	2202      	movs	r2, #2
 8001198:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800119a:	003b      	movs	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a0:	003b      	movs	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a6:	003b      	movs	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2202      	movs	r2, #2
 80011b0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	003a      	movs	r2, r7
 80011b4:	23a0      	movs	r3, #160	; 0xa0
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 fa6d 	bl	800169a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80011c0:	003b      	movs	r3, r7
 80011c2:	2202      	movs	r2, #2
 80011c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011c6:	003b      	movs	r3, r7
 80011c8:	2202      	movs	r2, #2
 80011ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011cc:	003b      	movs	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011d2:	003b      	movs	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011d8:	003b      	movs	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80011de:	003b      	movs	r3, r7
 80011e0:	2202      	movs	r2, #2
 80011e2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	003a      	movs	r2, r7
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 fa54 	bl	800169a <LL_GPIO_Init>

}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b00e      	add	sp, #56	; 0x38
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011fc <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001202:	003b      	movs	r3, r7
 8001204:	0018      	movs	r0, r3
 8001206:	2310      	movs	r3, #16
 8001208:	001a      	movs	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f000 fd40 	bl	8001c90 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 8001210:	2004      	movs	r0, #4
 8001212:	f7ff fe6f 	bl	8000ef4 <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 8001216:	2100      	movs	r1, #0
 8001218:	2014      	movs	r0, #20
 800121a:	f7ff fde7 	bl	8000dec <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 800121e:	2014      	movs	r0, #20
 8001220:	f7ff fdce 	bl	8000dc0 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 65535;
 8001224:	003b      	movs	r3, r7
 8001226:	2201      	movs	r2, #1
 8001228:	4252      	negs	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800122c:	003b      	movs	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8001232:	003b      	movs	r3, r7
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <MX_TIM21_Init+0x7c>)
 8001236:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001238:	003b      	movs	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 800123e:	003b      	movs	r3, r7
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <MX_TIM21_Init+0x80>)
 8001242:	0019      	movs	r1, r3
 8001244:	0010      	movs	r0, r2
 8001246:	f000 fae5 	bl	8001814 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_TIM21_Init+0x80>)
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff fe7d 	bl	8000f4c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_TIM21_Init+0x80>)
 8001254:	2100      	movs	r1, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f7ff feec 	bl	8001034 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_TIM21_Init+0x80>)
 800125e:	2100      	movs	r1, #0
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fefb 	bl	800105c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <MX_TIM21_Init+0x80>)
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff09 	bl	8001080 <LL_TIM_DisableMasterSlaveMode>

}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	0000ffff 	.word	0x0000ffff
 800127c:	40010800 	.word	0x40010800

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001282:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001286:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001288:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <LoopForever+0xa>)
    CMP R1, R2
 800128c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800128e:	d105      	bne.n	800129c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001292:	4913      	ldr	r1, [pc, #76]	; (80012e0 <LoopForever+0x12>)
    STR R1, [R0]
 8001294:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001296:	4813      	ldr	r0, [pc, #76]	; (80012e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001298:	4913      	ldr	r1, [pc, #76]	; (80012e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800129a:	6001      	str	r1, [r0, #0]

0800129c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800129c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800129e:	e003      	b.n	80012a8 <LoopCopyDataInit>

080012a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 80012a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012a6:	3104      	adds	r1, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <LoopForever+0x22>)
  ldr  r3, =_edata
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <LoopForever+0x26>)
  adds  r2, r0, r1
 80012ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b0:	d3f6      	bcc.n	80012a0 <CopyDataInit>
  ldr  r2, =_sbss
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <LoopForever+0x2a>)
  b  LoopFillZerobss
 80012b4:	e002      	b.n	80012bc <LoopFillZerobss>

080012b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80012b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80012b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ba:	3204      	adds	r2, #4

080012bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <LoopForever+0x2e>)
  cmp  r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c0:	d3f9      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012c2:	f7ff fd3f 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f000 fcbf 	bl	8001c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fc17 	bl	8000afc <main>

080012ce <LoopForever>:

LoopForever:
    b LoopForever
 80012ce:	e7fe      	b.n	80012ce <LoopForever>
   ldr   r0, =_estack
 80012d0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80012d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80012d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80012dc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80012e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80012e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80012e8:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 80012ec:	08001ce0 	.word	0x08001ce0
  ldr  r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012f4:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 80012f8:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 80012fc:	20000128 	.word	0x20000128

08001300 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_COMP_IRQHandler>
	...

08001304 <LL_EXTI_EnableIT_0_31>:
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <LL_EXTI_EnableIT_0_31+0x1c>)
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40010400 	.word	0x40010400

08001324 <LL_EXTI_DisableIT_0_31>:
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LL_EXTI_DisableIT_0_31+0x20>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	43d9      	mvns	r1, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <LL_EXTI_DisableIT_0_31+0x20>)
 8001336:	400a      	ands	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40010400 	.word	0x40010400

08001348 <LL_EXTI_EnableEvent_0_31>:
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40010400 	.word	0x40010400

08001368 <LL_EXTI_DisableEvent_0_31>:
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	43d9      	mvns	r1, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <LL_EXTI_DisableEvent_0_31+0x20>)
 800137a:	400a      	ands	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40010400 	.word	0x40010400

0800138c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001396:	6899      	ldr	r1, [r3, #8]
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010400 	.word	0x40010400

080013ac <LL_EXTI_DisableRisingTrig_0_31>:
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80013be:	400a      	ands	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40010400 	.word	0x40010400

080013d0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80013da:	68d9      	ldr	r1, [r3, #12]
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	60da      	str	r2, [r3, #12]
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010400 	.word	0x40010400

080013f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	43d9      	mvns	r1, r3
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001402:	400a      	ands	r2, r1
 8001404:	60da      	str	r2, [r3, #12]
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40010400 	.word	0x40010400

08001414 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800141c:	230f      	movs	r3, #15
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d065      	beq.n	80014f8 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d100      	bne.n	8001436 <LL_EXTI_Init+0x22>
 8001434:	e06b      	b.n	800150e <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	795b      	ldrb	r3, [r3, #5]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d00e      	beq.n	800145c <LL_EXTI_Init+0x48>
 800143e:	2b02      	cmp	r3, #2
 8001440:	d017      	beq.n	8001472 <LL_EXTI_Init+0x5e>
 8001442:	2b00      	cmp	r3, #0
 8001444:	d120      	bne.n	8001488 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff8c 	bl	8001368 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff ff55 	bl	8001304 <LL_EXTI_EnableIT_0_31>
          break;
 800145a:	e01a      	b.n	8001492 <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff5f 	bl	8001324 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff6c 	bl	8001348 <LL_EXTI_EnableEvent_0_31>
          break;
 8001470:	e00f      	b.n	8001492 <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff ff44 	bl	8001304 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ff61 	bl	8001348 <LL_EXTI_EnableEvent_0_31>
          break;
 8001486:	e004      	b.n	8001492 <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8001488:	230f      	movs	r3, #15
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
          break;
 8001490:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	799b      	ldrb	r3, [r3, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d039      	beq.n	800150e <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	799b      	ldrb	r3, [r3, #6]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d00e      	beq.n	80014c0 <LL_EXTI_Init+0xac>
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d017      	beq.n	80014d6 <LL_EXTI_Init+0xc2>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d120      	bne.n	80014ec <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff ff9e 	bl	80013f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff ff67 	bl	800138c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80014be:	e027      	b.n	8001510 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff71 	bl	80013ac <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff7e 	bl	80013d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80014d4:	e01c      	b.n	8001510 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff ff56 	bl	800138c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff73 	bl	80013d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80014ea:	e011      	b.n	8001510 <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
            break;
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	e00b      	b.n	8001510 <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ff11 	bl	8001324 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff ff2e 	bl	8001368 <LL_EXTI_DisableEvent_0_31>
 800150c:	e000      	b.n	8001510 <LL_EXTI_Init+0xfc>
      }
 800150e:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}

0800151e <LL_GPIO_SetPinMode>:
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	435a      	muls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	189b      	adds	r3, r3, r2
 800153a:	43db      	mvns	r3, r3
 800153c:	400b      	ands	r3, r1
 800153e:	001a      	movs	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	434b      	muls	r3, r1
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	434b      	muls	r3, r1
 800154a:	431a      	orrs	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bd80      	pop	{r7, pc}

08001558 <LL_GPIO_SetPinOutputType>:
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	43d2      	mvns	r2, r2
 800156c:	401a      	ands	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	434b      	muls	r3, r1
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}

08001582 <LL_GPIO_SetPinSpeed>:
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	435a      	muls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	189b      	adds	r3, r3, r2
 800159e:	43db      	mvns	r3, r3
 80015a0:	400b      	ands	r3, r1
 80015a2:	001a      	movs	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	434b      	muls	r3, r1
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	434b      	muls	r3, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	609a      	str	r2, [r3, #8]
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}

080015bc <LL_GPIO_SetPinPull>:
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	435a      	muls	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	43db      	mvns	r3, r3
 80015da:	400b      	ands	r3, r1
 80015dc:	001a      	movs	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	434b      	muls	r3, r1
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	434b      	muls	r3, r1
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <LL_GPIO_SetAFPin_0_7>:
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a19      	ldr	r1, [r3, #32]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	4353      	muls	r3, r2
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4353      	muls	r3, r2
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	435a      	muls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	43db      	mvns	r3, r3
 800161c:	400b      	ands	r3, r1
 800161e:	001a      	movs	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	434b      	muls	r3, r1
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	434b      	muls	r3, r1
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	434b      	muls	r3, r1
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	434b      	muls	r3, r1
 8001632:	431a      	orrs	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	621a      	str	r2, [r3, #32]
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}

08001640 <LL_GPIO_SetAFPin_8_15>:
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	0a12      	lsrs	r2, r2, #8
 8001658:	4353      	muls	r3, r2
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	0a12      	lsrs	r2, r2, #8
 800165e:	4353      	muls	r3, r2
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	0a12      	lsrs	r2, r2, #8
 8001664:	435a      	muls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	43db      	mvns	r3, r3
 800166e:	400b      	ands	r3, r1
 8001670:	001a      	movs	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	0a09      	lsrs	r1, r1, #8
 800167a:	434b      	muls	r3, r1
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	0a09      	lsrs	r1, r1, #8
 8001680:	434b      	muls	r3, r1
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	0a09      	lsrs	r1, r1, #8
 8001686:	434b      	muls	r3, r1
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	434b      	muls	r3, r1
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b004      	add	sp, #16
 8001698:	bd80      	pop	{r7, pc}

0800169a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016ac:	e040      	b.n	8001730 <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2101      	movs	r1, #1
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4091      	lsls	r1, r2
 80016b8:	000a      	movs	r2, r1
 80016ba:	4013      	ands	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d032      	beq.n	800172a <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff26 	bl	800151e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d003      	beq.n	80016e2 <LL_GPIO_Init+0x48>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d106      	bne.n	80016f0 <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff ff49 	bl	8001582 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d111      	bne.n	800172a <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2bff      	cmp	r3, #255	; 0xff
 800170a:	d807      	bhi.n	800171c <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ff6e 	bl	80015f6 <LL_GPIO_SetAFPin_0_7>
 800171a:	e006      	b.n	800172a <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff ff8b 	bl	8001640 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	40da      	lsrs	r2, r3
 8001738:	1e13      	subs	r3, r2, #0
 800173a:	d1b8      	bne.n	80016ae <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d003      	beq.n	800174c <LL_GPIO_Init+0xb2>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d107      	bne.n	800175c <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff fefe 	bl	8001558 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800175c:	2300      	movs	r3, #0
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <LL_TIM_SetPrescaler>:
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}

0800177e <LL_TIM_SetAutoReload>:
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}

08001796 <LL_TIM_OC_SetCompareCH1>:
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}

080017ae <LL_TIM_OC_SetCompareCH2>:
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <LL_TIM_OC_SetCompareCH3>:
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}

080017de <LL_TIM_OC_SetCompareCH4>:
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2201      	movs	r2, #1
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	615a      	str	r2, [r3, #20]
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	05db      	lsls	r3, r3, #23
 800182a:	429a      	cmp	r2, r3
 800182c:	d003      	beq.n	8001836 <LL_TIM_Init+0x22>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a1a      	ldr	r2, [pc, #104]	; (800189c <LL_TIM_Init+0x88>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d107      	bne.n	8001846 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2270      	movs	r2, #112	; 0x70
 800183a:	4393      	bics	r3, r2
 800183c:	001a      	movs	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	05db      	lsls	r3, r3, #23
 800184c:	429a      	cmp	r2, r3
 800184e:	d003      	beq.n	8001858 <LL_TIM_Init+0x44>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <LL_TIM_Init+0x88>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d106      	bne.n	8001866 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <LL_TIM_Init+0x8c>)
 800185c:	401a      	ands	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ff82 	bl	800177e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	001a      	movs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff ff6e 	bl	8001766 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff ffb2 	bl	80017f6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001892:	2300      	movs	r3, #0
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b004      	add	sp, #16
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40010800 	.word	0x40010800
 80018a0:	fffffcff 	.word	0xfffffcff

080018a4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80018b0:	2317      	movs	r3, #23
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d017      	beq.n	80018ee <LL_TIM_OC_Init+0x4a>
 80018be:	d802      	bhi.n	80018c6 <LL_TIM_OC_Init+0x22>
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d009      	beq.n	80018d8 <LL_TIM_OC_Init+0x34>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80018c4:	e034      	b.n	8001930 <LL_TIM_OC_Init+0x8c>
  switch (Channel)
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	0052      	lsls	r2, r2, #1
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01a      	beq.n	8001904 <LL_TIM_OC_Init+0x60>
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	0152      	lsls	r2, r2, #5
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d021      	beq.n	800191a <LL_TIM_OC_Init+0x76>
      break;
 80018d6:	e02b      	b.n	8001930 <LL_TIM_OC_Init+0x8c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80018d8:	2317      	movs	r3, #23
 80018da:	18fc      	adds	r4, r7, r3
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f82b 	bl	800193e <OC1Config>
 80018e8:	0003      	movs	r3, r0
 80018ea:	7023      	strb	r3, [r4, #0]
      break;
 80018ec:	e020      	b.n	8001930 <LL_TIM_OC_Init+0x8c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80018ee:	2317      	movs	r3, #23
 80018f0:	18fc      	adds	r4, r7, r3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 f867 	bl	80019cc <OC2Config>
 80018fe:	0003      	movs	r3, r0
 8001900:	7023      	strb	r3, [r4, #0]
      break;
 8001902:	e015      	b.n	8001930 <LL_TIM_OC_Init+0x8c>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001904:	2317      	movs	r3, #23
 8001906:	18fc      	adds	r4, r7, r3
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f000 f8a8 	bl	8001a64 <OC3Config>
 8001914:	0003      	movs	r3, r0
 8001916:	7023      	strb	r3, [r4, #0]
      break;
 8001918:	e00a      	b.n	8001930 <LL_TIM_OC_Init+0x8c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800191a:	2317      	movs	r3, #23
 800191c:	18fc      	adds	r4, r7, r3
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f8e7 	bl	8001af8 <OC4Config>
 800192a:	0003      	movs	r3, r0
 800192c:	7023      	strb	r3, [r4, #0]
      break;
 800192e:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001930:	2317      	movs	r3, #23
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b007      	add	sp, #28
 800193c:	bd90      	pop	{r4, r7, pc}

0800193e <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	2201      	movs	r2, #1
 800194e:	4393      	bics	r3, r2
 8001950:	001a      	movs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2203      	movs	r2, #3
 800196c:	4393      	bics	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2270      	movs	r2, #112	; 0x70
 8001974:	4393      	bics	r3, r2
 8001976:	001a      	movs	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2202      	movs	r2, #2
 8001984:	4393      	bics	r3, r2
 8001986:	001a      	movs	r2, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2201      	movs	r2, #1
 8001994:	4393      	bics	r3, r2
 8001996:	001a      	movs	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0011      	movs	r1, r2
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff feee 	bl	8001796 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b006      	add	sp, #24
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	2210      	movs	r2, #16
 80019dc:	4393      	bics	r3, r2
 80019de:	001a      	movs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <OC2Config+0x90>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <OC2Config+0x94>)
 8001a02:	401a      	ands	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2220      	movs	r2, #32
 8001a12:	4393      	bics	r3, r2
 8001a14:	001a      	movs	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2210      	movs	r2, #16
 8001a24:	4393      	bics	r3, r2
 8001a26:	001a      	movs	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff feb1 	bl	80017ae <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b006      	add	sp, #24
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	fffffcff 	.word	0xfffffcff
 8001a60:	ffff8fff 	.word	0xffff8fff

08001a64 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <OC3Config+0x8c>)
 8001a74:	401a      	ands	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	4393      	bics	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2270      	movs	r2, #112	; 0x70
 8001a98:	4393      	bics	r3, r2
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <OC3Config+0x90>)
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <OC3Config+0x8c>)
 8001ab8:	401a      	ands	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff fe74 	bl	80017c6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b006      	add	sp, #24
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	fffffeff 	.word	0xfffffeff
 8001af4:	fffffdff 	.word	0xfffffdff

08001af8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <OC4Config+0x8c>)
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <OC4Config+0x90>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <OC4Config+0x94>)
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <OC4Config+0x98>)
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	031b      	lsls	r3, r3, #12
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <OC4Config+0x8c>)
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	031b      	lsls	r3, r3, #12
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fe36 	bl	80017de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b006      	add	sp, #24
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	ffffefff 	.word	0xffffefff
 8001b88:	fffffcff 	.word	0xfffffcff
 8001b8c:	ffff8fff 	.word	0xffff8fff
 8001b90:	ffffdfff 	.word	0xffffdfff

08001b94 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001b9e:	6839      	ldr	r1, [r7, #0]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7fe fab1 	bl	8000108 <__udivsi3>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	001a      	movs	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <LL_InitTick+0x30>)
 8001bac:	3a01      	subs	r2, #1
 8001bae:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <LL_InitTick+0x30>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <LL_InitTick+0x30>)
 8001bb8:	2205      	movs	r2, #5
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001bd0:	23fa      	movs	r3, #250	; 0xfa
 8001bd2:	009a      	lsls	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff ffdb 	bl	8001b94 <LL_InitTick>
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <LL_mDelay+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001bf6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	d00c      	beq.n	8001c18 <LL_mDelay+0x30>
  {
    Delay++;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3301      	adds	r3, #1
 8001c02:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001c04:	e008      	b.n	8001c18 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <LL_mDelay+0x40>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d002      	beq.n	8001c18 <LL_mDelay+0x30>
    {
      Delay--;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f3      	bne.n	8001c06 <LL_mDelay+0x1e>
    }
  }
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <LL_SetSystemCoreClock+0x18>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	20000104 	.word	0x20000104

08001c48 <__libc_init_array>:
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	2600      	movs	r6, #0
 8001c4c:	4d0c      	ldr	r5, [pc, #48]	; (8001c80 <__libc_init_array+0x38>)
 8001c4e:	4c0d      	ldr	r4, [pc, #52]	; (8001c84 <__libc_init_array+0x3c>)
 8001c50:	1b64      	subs	r4, r4, r5
 8001c52:	10a4      	asrs	r4, r4, #2
 8001c54:	42a6      	cmp	r6, r4
 8001c56:	d109      	bne.n	8001c6c <__libc_init_array+0x24>
 8001c58:	2600      	movs	r6, #0
 8001c5a:	f000 f821 	bl	8001ca0 <_init>
 8001c5e:	4d0a      	ldr	r5, [pc, #40]	; (8001c88 <__libc_init_array+0x40>)
 8001c60:	4c0a      	ldr	r4, [pc, #40]	; (8001c8c <__libc_init_array+0x44>)
 8001c62:	1b64      	subs	r4, r4, r5
 8001c64:	10a4      	asrs	r4, r4, #2
 8001c66:	42a6      	cmp	r6, r4
 8001c68:	d105      	bne.n	8001c76 <__libc_init_array+0x2e>
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
 8001c6c:	00b3      	lsls	r3, r6, #2
 8001c6e:	58eb      	ldr	r3, [r5, r3]
 8001c70:	4798      	blx	r3
 8001c72:	3601      	adds	r6, #1
 8001c74:	e7ee      	b.n	8001c54 <__libc_init_array+0xc>
 8001c76:	00b3      	lsls	r3, r6, #2
 8001c78:	58eb      	ldr	r3, [r5, r3]
 8001c7a:	4798      	blx	r3
 8001c7c:	3601      	adds	r6, #1
 8001c7e:	e7f2      	b.n	8001c66 <__libc_init_array+0x1e>
 8001c80:	08001cd8 	.word	0x08001cd8
 8001c84:	08001cd8 	.word	0x08001cd8
 8001c88:	08001cd8 	.word	0x08001cd8
 8001c8c:	08001cdc 	.word	0x08001cdc

08001c90 <memset>:
 8001c90:	0003      	movs	r3, r0
 8001c92:	1812      	adds	r2, r2, r0
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d100      	bne.n	8001c9a <memset+0xa>
 8001c98:	4770      	bx	lr
 8001c9a:	7019      	strb	r1, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	e7f9      	b.n	8001c94 <memset+0x4>

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
