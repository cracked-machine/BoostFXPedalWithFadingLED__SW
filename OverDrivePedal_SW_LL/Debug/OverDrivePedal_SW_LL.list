
OverDrivePedal_SW_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da4  08001da4  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08001da4  08001da4  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da4  08001da4  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001da8  08001da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08001dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000048  08001df4  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001df4  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ce5  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001102  00000000  00000000  00024d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00025e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00026430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b64c  00000000  00000000  00026950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000047eb  00000000  00000000  00031f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003abf7  00000000  00000000  00036787  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007137e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001344  00000000  00000000  000713fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d6c 	.word	0x08001d6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	08001d6c 	.word	0x08001d6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <NVIC_EnableIRQ+0x28>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b7f      	cmp	r3, #127	; 0x7f
 8000260:	d932      	bls.n	80002c8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000262:	4a2f      	ldr	r2, [pc, #188]	; (8000320 <NVIC_SetPriority+0xd4>)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	0019      	movs	r1, r3
 800026a:	230f      	movs	r3, #15
 800026c:	400b      	ands	r3, r1
 800026e:	3b08      	subs	r3, #8
 8000270:	089b      	lsrs	r3, r3, #2
 8000272:	3306      	adds	r3, #6
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	18d3      	adds	r3, r2, r3
 8000278:	3304      	adds	r3, #4
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1dfa      	adds	r2, r7, #7
 800027e:	7812      	ldrb	r2, [r2, #0]
 8000280:	0011      	movs	r1, r2
 8000282:	2203      	movs	r2, #3
 8000284:	400a      	ands	r2, r1
 8000286:	00d2      	lsls	r2, r2, #3
 8000288:	21ff      	movs	r1, #255	; 0xff
 800028a:	4091      	lsls	r1, r2
 800028c:	000a      	movs	r2, r1
 800028e:	43d2      	mvns	r2, r2
 8000290:	401a      	ands	r2, r3
 8000292:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	019b      	lsls	r3, r3, #6
 8000298:	22ff      	movs	r2, #255	; 0xff
 800029a:	401a      	ands	r2, r3
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	0018      	movs	r0, r3
 80002a2:	2303      	movs	r3, #3
 80002a4:	4003      	ands	r3, r0
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	481d      	ldr	r0, [pc, #116]	; (8000320 <NVIC_SetPriority+0xd4>)
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	001c      	movs	r4, r3
 80002b2:	230f      	movs	r3, #15
 80002b4:	4023      	ands	r3, r4
 80002b6:	3b08      	subs	r3, #8
 80002b8:	089b      	lsrs	r3, r3, #2
 80002ba:	430a      	orrs	r2, r1
 80002bc:	3306      	adds	r3, #6
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	18c3      	adds	r3, r0, r3
 80002c2:	3304      	adds	r3, #4
 80002c4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002c6:	e027      	b.n	8000318 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <NVIC_SetPriority+0xd8>)
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	33c0      	adds	r3, #192	; 0xc0
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	589b      	ldr	r3, [r3, r2]
 80002d8:	1dfa      	adds	r2, r7, #7
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	0011      	movs	r1, r2
 80002de:	2203      	movs	r2, #3
 80002e0:	400a      	ands	r2, r1
 80002e2:	00d2      	lsls	r2, r2, #3
 80002e4:	21ff      	movs	r1, #255	; 0xff
 80002e6:	4091      	lsls	r1, r2
 80002e8:	000a      	movs	r2, r1
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	401a      	ands	r2, r3
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	2303      	movs	r3, #3
 8000300:	4003      	ands	r3, r0
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <NVIC_SetPriority+0xd8>)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b25b      	sxtb	r3, r3
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	33c0      	adds	r3, #192	; 0xc0
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	501a      	str	r2, [r3, r0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e000e100 	.word	0xe000e100

08000328 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	430a      	orrs	r2, r1
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 800033e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4013      	ands	r3, r2
 8000344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	21ff      	movs	r1, #255	; 0xff
 8000364:	400b      	ands	r3, r1
 8000366:	3302      	adds	r3, #2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	589b      	ldr	r3, [r3, r2]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	0c12      	lsrs	r2, r2, #16
 8000370:	210f      	movs	r1, #15
 8000372:	4091      	lsls	r1, r2
 8000374:	000a      	movs	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
 800037a:	0011      	movs	r1, r2
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	0c1b      	lsrs	r3, r3, #16
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	409a      	lsls	r2, r3
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	24ff      	movs	r4, #255	; 0xff
 800038a:	4023      	ands	r3, r4
 800038c:	430a      	orrs	r2, r1
 800038e:	3302      	adds	r3, #2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	501a      	str	r2, [r3, r0]
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b003      	add	sp, #12
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	40010000 	.word	0x40010000

080003a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6819      	ldr	r1, [r3, #0]
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	435a      	muls	r2, r3
 80003b6:	0013      	movs	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	43db      	mvns	r3, r3
 80003be:	400b      	ands	r3, r1
 80003c0:	001a      	movs	r2, r3
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	434b      	muls	r3, r1
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	434b      	muls	r3, r1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}

080003da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b084      	sub	sp, #16
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68d9      	ldr	r1, [r3, #12]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	435a      	muls	r2, r3
 80003f0:	0013      	movs	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	189b      	adds	r3, r3, r2
 80003f6:	43db      	mvns	r3, r3
 80003f8:	400b      	ands	r3, r1
 80003fa:	001a      	movs	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	68b9      	ldr	r1, [r7, #8]
 8000400:	434b      	muls	r3, r1
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	434b      	muls	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}

08000414 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000432:	2418      	movs	r4, #24
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2308      	movs	r3, #8
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f001 fc8d 	bl	8001d5c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	003b      	movs	r3, r7
 8000444:	0018      	movs	r0, r3
 8000446:	2318      	movs	r3, #24
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f001 fc86 	bl	8001d5c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000450:	2004      	movs	r0, #4
 8000452:	f7ff ff69 	bl	8000328 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff66 	bl	8000328 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	4a33      	ldr	r2, [pc, #204]	; (8000530 <MX_GPIO_Init+0x104>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f7ff ffd5 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin);
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	009a      	lsls	r2, r3, #2
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ffcd 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CLEAN_ENABLE_Pin;
 800047a:	003b      	movs	r3, r7
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	01d2      	lsls	r2, r2, #7
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000482:	003b      	movs	r3, r7
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000488:	003b      	movs	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000494:	003b      	movs	r3, r7
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CLEAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800049a:	003b      	movs	r3, r7
 800049c:	4a24      	ldr	r2, [pc, #144]	; (8000530 <MX_GPIO_Init+0x104>)
 800049e:	0019      	movs	r1, r3
 80004a0:	0010      	movs	r0, r2
 80004a2:	f001 f960 	bl	8001766 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FX_ENABLE_Pin;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	0092      	lsls	r2, r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2201      	movs	r2, #1
 80004c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(FX_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80004c6:	003a      	movs	r2, r7
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f949 	bl	8001766 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE4);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ff3c 	bl	8000354 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_PULL_UP);
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff ff78 	bl	80003da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_MODE_INPUT);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ff54 	bl	80003a0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2210      	movs	r2, #16
 80004fe:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2202      	movs	r2, #2
 8000510:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000512:	187b      	adds	r3, r7, r1
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ffe3 	bl	80014e0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800051a:	2100      	movs	r1, #0
 800051c:	2007      	movs	r0, #7
 800051e:	f7ff fe95 	bl	800024c <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000522:	2007      	movs	r0, #7
 8000524:	f7ff fe7c 	bl	8000220 <NVIC_EnableIRQ>

}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b009      	add	sp, #36	; 0x24
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	50000800 	.word	0x50000800

08000534 <ledprogram_symcontfade>:
uint8_t pwm_dir_forward = 1;


// Symmetrical PWM by lookup table
void ledprogram_symcontfade()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

	  if(pwm_dir_forward)
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <ledprogram_symcontfade+0x78>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d006      	beq.n	800054e <ledprogram_symcontfade+0x1a>
		  pwm_bit_pos++;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e005      	b.n	800055a <ledprogram_symcontfade+0x26>
	  else
		  pwm_bit_pos--;
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000558:	701a      	strb	r2, [r3, #0]



	  // change direction at sequence limits
	  if(pwm_bit_pos >= ((FADE_LOG_SEQ_DATA_SIZE)-1))
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b1e      	cmp	r3, #30
 8000560:	d908      	bls.n	8000574 <ledprogram_symcontfade+0x40>
	  {
		  //pwm_bit_pos = FADE_LOG_SEQ_DATA_SIZE/5;
		  pwm_dir_forward = 0;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <ledprogram_symcontfade+0x78>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
		  pwm_bit_pos--;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000572:	701a      	strb	r2, [r3, #0]
	  }
	  if(pwm_bit_pos < 1)
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <ledprogram_symcontfade+0x4e>
	  {
		  pwm_dir_forward = 1;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <ledprogram_symcontfade+0x78>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
	  }



	  TIM2->CCR1 = fade_log_seq_data_table[pwm_bit_pos];
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	001a      	movs	r2, r3
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <ledprogram_symcontfade+0x80>)
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	5ad2      	ldrh	r2, [r2, r3]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = fade_log_seq_data_table[pwm_bit_pos];
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <ledprogram_symcontfade+0x7c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	001a      	movs	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <ledprogram_symcontfade+0x80>)
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	5ad2      	ldrh	r2, [r2, r3]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	639a      	str	r2, [r3, #56]	; 0x38

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000040 	.word	0x20000040
 80005b0:	20000064 	.word	0x20000064
 80005b4:	20000000 	.word	0x20000000

080005b8 <ledprogram_resetall>:
		  pwm_bit_pos = 0;
}

// reset duty cycles to  0%
void ledprogram_resetall()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	pwm_bit_pos = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <ledprogram_resetall+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	  TIM2->CCR1 = 0;
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2200      	movs	r2, #0
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 0;
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2200      	movs	r2, #0
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000064 	.word	0x20000064

080005dc <NVIC_EnableIRQ>:
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	0002      	movs	r2, r0
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	001a      	movs	r2, r3
 80005ee:	231f      	movs	r3, #31
 80005f0:	401a      	ands	r2, r3
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <NVIC_EnableIRQ+0x28>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	4091      	lsls	r1, r2
 80005f8:	000a      	movs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	e000e100 	.word	0xe000e100

08000608 <NVIC_SetPriority>:
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	0002      	movs	r2, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b7f      	cmp	r3, #127	; 0x7f
 800061c:	d932      	bls.n	8000684 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061e:	4a2f      	ldr	r2, [pc, #188]	; (80006dc <NVIC_SetPriority+0xd4>)
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	0019      	movs	r1, r3
 8000626:	230f      	movs	r3, #15
 8000628:	400b      	ands	r3, r1
 800062a:	3b08      	subs	r3, #8
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	3306      	adds	r3, #6
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	18d3      	adds	r3, r2, r3
 8000634:	3304      	adds	r3, #4
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1dfa      	adds	r2, r7, #7
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	0011      	movs	r1, r2
 800063e:	2203      	movs	r2, #3
 8000640:	400a      	ands	r2, r1
 8000642:	00d2      	lsls	r2, r2, #3
 8000644:	21ff      	movs	r1, #255	; 0xff
 8000646:	4091      	lsls	r1, r2
 8000648:	000a      	movs	r2, r1
 800064a:	43d2      	mvns	r2, r2
 800064c:	401a      	ands	r2, r3
 800064e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	019b      	lsls	r3, r3, #6
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	401a      	ands	r2, r3
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0018      	movs	r0, r3
 800065e:	2303      	movs	r3, #3
 8000660:	4003      	ands	r3, r0
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <NVIC_SetPriority+0xd4>)
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	001c      	movs	r4, r3
 800066e:	230f      	movs	r3, #15
 8000670:	4023      	ands	r3, r4
 8000672:	3b08      	subs	r3, #8
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	430a      	orrs	r2, r1
 8000678:	3306      	adds	r3, #6
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	18c3      	adds	r3, r0, r3
 800067e:	3304      	adds	r3, #4
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	e027      	b.n	80006d4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <NVIC_SetPriority+0xd8>)
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b25b      	sxtb	r3, r3
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	33c0      	adds	r3, #192	; 0xc0
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	589b      	ldr	r3, [r3, r2]
 8000694:	1dfa      	adds	r2, r7, #7
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	0011      	movs	r1, r2
 800069a:	2203      	movs	r2, #3
 800069c:	400a      	ands	r2, r1
 800069e:	00d2      	lsls	r2, r2, #3
 80006a0:	21ff      	movs	r1, #255	; 0xff
 80006a2:	4091      	lsls	r1, r2
 80006a4:	000a      	movs	r2, r1
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	401a      	ands	r2, r3
 80006aa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	401a      	ands	r2, r3
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	0018      	movs	r0, r3
 80006ba:	2303      	movs	r3, #3
 80006bc:	4003      	ands	r3, r0
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <NVIC_SetPriority+0xd8>)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	430a      	orrs	r2, r1
 80006ce:	33c0      	adds	r3, #192	; 0xc0
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	501a      	str	r2, [r3, r0]
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b003      	add	sp, #12
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <LL_LPTIM_SetUpdateMode+0x24>)
 80006f4:	401a      	ands	r2, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	431a      	orrs	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60da      	str	r2, [r3, #12]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	ffbfffff 	.word	0xffbfffff

0800070c <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <LL_LPTIM_SetCounterMode+0x24>)
 800071c:	401a      	ands	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	ff7fffff 	.word	0xff7fffff

08000734 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <LL_LPTIM_SetPolarity+0x24>)
 8000744:	401a      	ands	r2, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	ffdfffff 	.word	0xffdfffff

0800075c <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <LL_LPTIM_SetPrescaler+0x24>)
 800076c:	401a      	ands	r2, r3
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60da      	str	r2, [r3, #12]
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	fffff1ff 	.word	0xfffff1ff

08000784 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <LL_LPTIM_TrigSw+0x1c>)
 8000792:	401a      	ands	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	60da      	str	r2, [r3, #12]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	fff9ffff 	.word	0xfff9ffff

080007a4 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	2201      	movs	r2, #1
 80007b4:	4393      	bics	r3, r2
 80007b6:	001a      	movs	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <LL_APB1_GRP1_EnableClock>:
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80007d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	430a      	orrs	r2, r1
 80007da:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80007de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4013      	ands	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b004      	add	sp, #16
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	061b      	lsls	r3, r3, #24
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff ffe3 	bl	80007c8 <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn, 0);
 8000802:	2100      	movs	r1, #0
 8000804:	200d      	movs	r0, #13
 8000806:	f7ff feff 	bl	8000608 <NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM1_IRQn);
 800080a:	200d      	movs	r0, #13
 800080c:	f7ff fee6 	bl	80005dc <NVIC_EnableIRQ>

  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_LPTIM1_Init+0x60>)
 8000812:	2100      	movs	r1, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ffc5 	bl	80007a4 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 800081a:	23e0      	movs	r3, #224	; 0xe0
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <MX_LPTIM1_Init+0x60>)
 8000820:	0019      	movs	r1, r3
 8000822:	0010      	movs	r0, r2
 8000824:	f7ff ff9a 	bl	800075c <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_LPTIM1_Init+0x60>)
 800082a:	2100      	movs	r1, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff ff81 	bl	8000734 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_LPTIM1_Init+0x60>)
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff ff54 	bl	80006e4 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_LPTIM1_Init+0x60>)
 800083e:	2100      	movs	r1, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ff63 	bl	800070c <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 8000846:	4b03      	ldr	r3, [pc, #12]	; (8000854 <MX_LPTIM1_Init+0x60>)
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff ff9b 	bl	8000784 <LL_LPTIM_TrigSw>

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40007c00 	.word	0x40007c00

08000858 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <LL_RCC_HSI_Enable+0x18>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <LL_RCC_HSI_Enable+0x18>)
 8000862:	2101      	movs	r1, #1
 8000864:	430a      	orrs	r2, r1
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <LL_RCC_HSI_IsReady+0x1c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2204      	movs	r2, #4
 800087e:	4013      	ands	r3, r2
 8000880:	2b04      	cmp	r3, #4
 8000882:	d101      	bne.n	8000888 <LL_RCC_HSI_IsReady+0x14>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <LL_RCC_HSI_IsReady+0x16>
 8000888:	2300      	movs	r3, #0
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a06      	ldr	r2, [pc, #24]	; (80008bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80008a2:	4013      	ands	r3, r2
 80008a4:	0019      	movs	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	021a      	lsls	r2, r3, #8
 80008aa:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80008ac:	430a      	orrs	r2, r1
 80008ae:	605a      	str	r2, [r3, #4]
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	ffffe0ff 	.word	0xffffe0ff

080008c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <LL_RCC_SetSysClkSource+0x24>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	2203      	movs	r2, #3
 80008ce:	4393      	bics	r3, r2
 80008d0:	0019      	movs	r1, r3
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <LL_RCC_SetSysClkSource+0x24>)
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	60da      	str	r2, [r3, #12]
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <LL_RCC_GetSysClkSource+0x14>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	220c      	movs	r2, #12
 80008f2:	4013      	ands	r3, r2
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <LL_RCC_SetAHBPrescaler+0x24>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	22f0      	movs	r2, #240	; 0xf0
 800090e:	4393      	bics	r3, r2
 8000910:	0019      	movs	r1, r3
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <LL_RCC_SetAHBPrescaler+0x24>)
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	430a      	orrs	r2, r1
 8000918:	60da      	str	r2, [r3, #12]
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40021000 	.word	0x40021000

08000928 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000936:	4013      	ands	r3, r2
 8000938:	0019      	movs	r1, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <LL_RCC_SetAPB1Prescaler+0x24>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	430a      	orrs	r2, r1
 8000940:	60da      	str	r2, [r3, #12]
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000
 8000950:	fffff8ff 	.word	0xfffff8ff

08000954 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <LL_RCC_SetAPB2Prescaler+0x24>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <LL_RCC_SetAPB2Prescaler+0x28>)
 8000962:	4013      	ands	r3, r2
 8000964:	0019      	movs	r1, r3
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	430a      	orrs	r2, r1
 800096c:	60da      	str	r2, [r3, #12]
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000
 800097c:	ffffc7ff 	.word	0xffffc7ff

08000980 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <LL_RCC_SetLPTIMClockSource+0x24>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <LL_RCC_SetLPTIMClockSource+0x28>)
 800098e:	4013      	ands	r3, r2
 8000990:	0019      	movs	r1, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <LL_RCC_SetLPTIMClockSource+0x24>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	430a      	orrs	r2, r1
 8000998:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000
 80009a8:	fff3ffff 	.word	0xfff3ffff

080009ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <LL_RCC_PLL_Enable+0x18>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <LL_RCC_PLL_Enable+0x18>)
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	0449      	lsls	r1, r1, #17
 80009ba:	430a      	orrs	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000

080009c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <LL_RCC_PLL_IsReady+0x24>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	049b      	lsls	r3, r3, #18
 80009d4:	401a      	ands	r2, r3
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	049b      	lsls	r3, r3, #18
 80009da:	429a      	cmp	r2, r3
 80009dc:	d101      	bne.n	80009e2 <LL_RCC_PLL_IsReady+0x1a>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <LL_RCC_PLL_IsReady+0x1c>
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40021000 	.word	0x40021000

080009f0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	0019      	movs	r1, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000a12:	430a      	orrs	r2, r1
 8000a14:	60da      	str	r2, [r3, #12]
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b004      	add	sp, #16
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000
 8000a24:	ff02ffff 	.word	0xff02ffff

08000a28 <LL_APB1_GRP1_EnableClock>:
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000a32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b004      	add	sp, #16
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_APB2_GRP1_EnableClock>:
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <LL_APB2_GRP1_EnableClock+0x28>)
 8000a5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LL_APB2_GRP1_EnableClock+0x28>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <LL_APB2_GRP1_EnableClock+0x28>)
 8000a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <LL_FLASH_SetLatency+0x24>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4393      	bics	r3, r2
 8000a90:	0019      	movs	r1, r3
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <LL_FLASH_SetLatency+0x24>)
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <LL_FLASH_GetLatency+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4013      	ands	r3, r2
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	40022000 	.word	0x40022000

08000ac0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40007000 	.word	0x40007000
 8000ae8:	ffffe7ff 	.word	0xffffe7ff

08000aec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2201      	movs	r2, #1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a1a      	ldr	r2, [r3, #32]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	621a      	str	r2, [r3, #32]
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d00d      	beq.n	8000b56 <LL_TIM_OC_SetMode+0x2e>
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b10      	cmp	r3, #16
 8000b3e:	d008      	beq.n	8000b52 <LL_TIM_OC_SetMode+0x2a>
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d101      	bne.n	8000b4e <LL_TIM_OC_SetMode+0x26>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	e004      	b.n	8000b58 <LL_TIM_OC_SetMode+0x30>
 8000b4e:	2306      	movs	r3, #6
 8000b50:	e002      	b.n	8000b58 <LL_TIM_OC_SetMode+0x30>
 8000b52:	2302      	movs	r3, #2
 8000b54:	e000      	b.n	8000b58 <LL_TIM_OC_SetMode+0x30>
 8000b56:	2300      	movs	r3, #0
 8000b58:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3318      	adds	r3, #24
 8000b5e:	001a      	movs	r2, r3
 8000b60:	0029      	movs	r1, r5
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <LL_TIM_OC_SetMode+0x6c>)
 8000b64:	5c5b      	ldrb	r3, [r3, r1]
 8000b66:	18d3      	adds	r3, r2, r3
 8000b68:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	0029      	movs	r1, r5
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LL_TIM_OC_SetMode+0x70>)
 8000b70:	5c52      	ldrb	r2, [r2, r1]
 8000b72:	0011      	movs	r1, r2
 8000b74:	2273      	movs	r2, #115	; 0x73
 8000b76:	408a      	lsls	r2, r1
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	0029      	movs	r1, r5
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <LL_TIM_OC_SetMode+0x70>)
 8000b80:	5c5b      	ldrb	r3, [r3, r1]
 8000b82:	0019      	movs	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	408b      	lsls	r3, r1
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	6023      	str	r3, [r4, #0]
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b004      	add	sp, #16
 8000b92:	bdb0      	pop	{r4, r5, r7, pc}
 8000b94:	08001d84 	.word	0x08001d84
 8000b98:	08001d8c 	.word	0x08001d8c

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff57 	bl	8000a54 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	055b      	lsls	r3, r3, #21
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ff3c 	bl	8000a28 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f862 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff fc3a 	bl	800042c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bb8:	f000 fad7 	bl	800116a <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000bbc:	f7ff fe1a 	bl	80007f4 <MX_LPTIM1_Init>
  MX_TIM21_Init();
 8000bc0:	f000 fb82 	bl	80012c8 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	2260      	movs	r2, #96	; 0x60
 8000bca:	2101      	movs	r1, #1
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ffab 	bl	8000b28 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff95 	bl	8000b08 <LL_TIM_CC_EnableChannel>

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2260      	movs	r2, #96	; 0x60
 8000be4:	2110      	movs	r1, #16
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff ff9e 	bl	8000b28 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff ff88 	bl	8000b08 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM2);
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff75 	bl	8000aec <LL_TIM_EnableCounter>

  TIM2->ARR = 192;
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	22c0      	movs	r2, #192	; 0xc0
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  // init the PWM duty to 0%
  TIM2->CCR1 = 0;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2200      	movs	r2, #0
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	2200      	movs	r2, #0
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38



  // init bypass soft switches
  // clean routing enabled, fx routing disabled
  CLEAN_ENABLE_GPIO_Port->ODR |= (CLEAN_ENABLE_Pin);
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <main+0xcc>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <main+0xcc>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	01c9      	lsls	r1, r1, #7
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
  FX_ENABLE_GPIO_Port->ODR &= ~(FX_ENABLE_Pin);
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <main+0xd0>)
 8000c34:	400a      	ands	r2, r1
 8000c36:	615a      	str	r2, [r3, #20]


  // debounce timer
  //LL_TIM_EnableIT_UPDATE(TIM21);
  LL_TIM_EnableCounter(TIM21);
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <main+0xd4>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff56 	bl	8000aec <LL_TIM_EnableCounter>
  TIM21->PSC = 65535;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <main+0xd4>)
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <main+0xd8>)
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  TIM21->ARR = 65535;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <main+0xd4>)
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <main+0xd8>)
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(FX_ENABLE_GPIO_Port->ODR)
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <main+0xc6>
	  {
		  LL_mDelay(100);
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f001 f82c 	bl	8001cb4 <LL_mDelay>
		  //ledprogram_contfade();
		  ledprogram_symcontfade();
 8000c5c:	f7ff fc6a 	bl	8000534 <ledprogram_symcontfade>
 8000c60:	e7f4      	b.n	8000c4c <main+0xb0>
		  //ledprogram_stepfade();
	  }
	  else
	  {
		  ledprogram_resetall();
 8000c62:	f7ff fca9 	bl	80005b8 <ledprogram_resetall>
	  if(FX_ENABLE_GPIO_Port->ODR)
 8000c66:	e7f1      	b.n	8000c4c <main+0xb0>
 8000c68:	50000800 	.word	0x50000800
 8000c6c:	fffffdff 	.word	0xfffffdff
 8000c70:	40010800 	.word	0x40010800
 8000c74:	0000ffff 	.word	0x0000ffff

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff feff 	bl	8000a80 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000c82:	f7ff ff11 	bl	8000aa8 <LL_FLASH_GetLatency>
 8000c86:	0003      	movs	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000c8c:	f000 f842 	bl	8000d14 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff13 	bl	8000ac0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000c9a:	f7ff fddd 	bl	8000858 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	f7ff fde8 	bl	8000874 <LL_RCC_HSI_IsReady>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d1fa      	bne.n	8000ca0 <SystemClock_Config+0x28>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000caa:	2010      	movs	r0, #16
 8000cac:	f7ff fdf2 	bl	8000894 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	03da      	lsls	r2, r3, #15
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	02db      	lsls	r3, r3, #11
 8000cb8:	0019      	movs	r1, r3
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fe98 	bl	80009f0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cc0:	f7ff fe74 	bl	80009ac <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	f7ff fe7f 	bl	80009c8 <LL_RCC_PLL_IsReady>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d1fa      	bne.n	8000cc6 <SystemClock_Config+0x4e>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fe15 	bl	8000900 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fe26 	bl	8000928 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fe39 	bl	8000954 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f7ff fdec 	bl	80008c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	f7ff fdfd 	bl	80008e8 <LL_RCC_GetSysClkSource>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	2b0c      	cmp	r3, #12
 8000cf2:	d1fa      	bne.n	8000cea <SystemClock_Config+0x72>
  {
  
  }

  LL_Init1msTick(32000000);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemClock_Config+0x98>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 ffcc 	bl	8001c94 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SystemClock_Config+0x98>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fffa 	bl	8001cf8 <LL_SetSystemCoreClock>
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fe3b 	bl	8000980 <LL_RCC_SetLPTIMClockSource>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	01e84800 	.word	0x01e84800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	425a      	negs	r2, r3
 8000d36:	4153      	adcs	r3, r2
 8000d38:	b2db      	uxtb	r3, r3
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40010400 	.word	0x40010400

08000d48 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	615a      	str	r2, [r3, #20]
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40010400 	.word	0x40010400

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint16_t interrupt_time = TIM21->CNT;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <EXTI4_15_IRQHandler+0x5c>)
 8000d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	801a      	strh	r2, [r3, #0]
	if ((interrupt_time - last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <EXTI4_15_IRQHandler+0x60>)
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	2b40      	cmp	r3, #64	; 0x40
 8000dae:	dd0f      	ble.n	8000dd0 <EXTI4_15_IRQHandler+0x3c>
			ledprogram_flash(2, 100);				// slower for fx enable
		else
			ledprogram_flash(1, 100);				// faster for clean enable
*/
		// toggle bypass soft switches
		CLEAN_ENABLE_GPIO_Port->ODR ^= CLEAN_ENABLE_Pin;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <EXTI4_15_IRQHandler+0x64>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <EXTI4_15_IRQHandler+0x64>)
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	01c9      	lsls	r1, r1, #7
 8000dba:	404a      	eors	r2, r1
 8000dbc:	615a      	str	r2, [r3, #20]
		FX_ENABLE_GPIO_Port->ODR ^= FX_ENABLE_Pin;
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	695a      	ldr	r2, [r3, #20]
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	0089      	lsls	r1, r1, #2
 8000dcc:	404a      	eors	r2, r1
 8000dce:	615a      	str	r2, [r3, #20]
	}
	last_interrupt_time = interrupt_time;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <EXTI4_15_IRQHandler+0x60>)
 8000dd2:	1dba      	adds	r2, r7, #6
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f7ff ffa1 	bl	8000d20 <LL_EXTI_IsActiveFlag_0_31>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d002      	beq.n	8000de8 <EXTI4_15_IRQHandler+0x54>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8000de2:	2010      	movs	r0, #16
 8000de4:	f7ff ffb0 	bl	8000d48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010800 	.word	0x40010800
 8000df4:	20000066 	.word	0x20000066
 8000df8:	50000800 	.word	0x50000800

08000dfc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	//TIM2->CCR2 = led_value2;
  /* USER CODE END LPTIM1_IRQn 0 */
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <SystemInit+0x64>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <SystemInit+0x64>)
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	0049      	lsls	r1, r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <SystemInit+0x64>)
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <SystemInit+0x64>)
 8000e28:	4913      	ldr	r1, [pc, #76]	; (8000e78 <SystemInit+0x68>)
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <SystemInit+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <SystemInit+0x64>)
 8000e34:	4911      	ldr	r1, [pc, #68]	; (8000e7c <SystemInit+0x6c>)
 8000e36:	400a      	ands	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <SystemInit+0x64>)
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <SystemInit+0x64>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	438a      	bics	r2, r1
 8000e44:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <SystemInit+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <SystemInit+0x64>)
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <SystemInit+0x70>)
 8000e4e:	400a      	ands	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <SystemInit+0x64>)
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <SystemInit+0x64>)
 8000e58:	490a      	ldr	r1, [pc, #40]	; (8000e84 <SystemInit+0x74>)
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SystemInit+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SystemInit+0x78>)
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	0512      	lsls	r2, r2, #20
 8000e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40021000 	.word	0x40021000
 8000e78:	88ff400c 	.word	0x88ff400c
 8000e7c:	fef6fff6 	.word	0xfef6fff6
 8000e80:	fffbffff 	.word	0xfffbffff
 8000e84:	ff02ffff 	.word	0xff02ffff
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EnableIRQ>:
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	0002      	movs	r2, r0
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	231f      	movs	r3, #31
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <NVIC_EnableIRQ+0x28>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <NVIC_SetPriority>:
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ecc:	d932      	bls.n	8000f34 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ece:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <NVIC_SetPriority+0xd4>)
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	400b      	ands	r3, r1
 8000eda:	3b08      	subs	r3, #8
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3306      	adds	r3, #6
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	18d3      	adds	r3, r2, r3
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	1dfa      	adds	r2, r7, #7
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	0011      	movs	r1, r2
 8000eee:	2203      	movs	r2, #3
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	00d2      	lsls	r2, r2, #3
 8000ef4:	21ff      	movs	r1, #255	; 0xff
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	43d2      	mvns	r2, r2
 8000efc:	401a      	ands	r2, r3
 8000efe:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	019b      	lsls	r3, r3, #6
 8000f04:	22ff      	movs	r2, #255	; 0xff
 8000f06:	401a      	ands	r2, r3
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	2303      	movs	r3, #3
 8000f10:	4003      	ands	r3, r0
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f16:	481d      	ldr	r0, [pc, #116]	; (8000f8c <NVIC_SetPriority+0xd4>)
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	230f      	movs	r3, #15
 8000f20:	4023      	ands	r3, r4
 8000f22:	3b08      	subs	r3, #8
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	430a      	orrs	r2, r1
 8000f28:	3306      	adds	r3, #6
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	18c3      	adds	r3, r0, r3
 8000f2e:	3304      	adds	r3, #4
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	e027      	b.n	8000f84 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <NVIC_SetPriority+0xd8>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	33c0      	adds	r3, #192	; 0xc0
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	589b      	ldr	r3, [r3, r2]
 8000f44:	1dfa      	adds	r2, r7, #7
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	0011      	movs	r1, r2
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	00d2      	lsls	r2, r2, #3
 8000f50:	21ff      	movs	r1, #255	; 0xff
 8000f52:	4091      	lsls	r1, r2
 8000f54:	000a      	movs	r2, r1
 8000f56:	43d2      	mvns	r2, r2
 8000f58:	401a      	ands	r2, r3
 8000f5a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	019b      	lsls	r3, r3, #6
 8000f60:	22ff      	movs	r2, #255	; 0xff
 8000f62:	401a      	ands	r2, r3
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	4003      	ands	r3, r0
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <NVIC_SetPriority+0xd8>)
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	33c0      	adds	r3, #192	; 0xc0
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	501a      	str	r2, [r3, r0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b003      	add	sp, #12
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <LL_APB1_GRP1_EnableClock>:
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000f9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_APB1_GRP1_EnableClock+0x28>)
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <LL_APB2_GRP1_EnableClock>:
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <LL_APB2_GRP1_EnableClock+0x28>)
 8000fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <LL_APB2_GRP1_EnableClock+0x28>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_APB2_GRP1_EnableClock+0x28>)
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_IOP_GRP1_EnableClock>:
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ff6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <LL_IOP_GRP1_EnableClock+0x28>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000

08001018 <LL_TIM_DisableARRPreload>:
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	4393      	bics	r3, r2
 8001028:	001a      	movs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00d      	beq.n	8001064 <LL_TIM_OC_DisableFast+0x2c>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b10      	cmp	r3, #16
 800104c:	d008      	beq.n	8001060 <LL_TIM_OC_DisableFast+0x28>
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	429a      	cmp	r2, r3
 8001056:	d101      	bne.n	800105c <LL_TIM_OC_DisableFast+0x24>
 8001058:	2304      	movs	r3, #4
 800105a:	e004      	b.n	8001066 <LL_TIM_OC_DisableFast+0x2e>
 800105c:	2306      	movs	r3, #6
 800105e:	e002      	b.n	8001066 <LL_TIM_OC_DisableFast+0x2e>
 8001060:	2302      	movs	r3, #2
 8001062:	e000      	b.n	8001066 <LL_TIM_OC_DisableFast+0x2e>
 8001064:	2300      	movs	r3, #0
 8001066:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3318      	adds	r3, #24
 800106c:	001a      	movs	r2, r3
 800106e:	0029      	movs	r1, r5
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LL_TIM_OC_DisableFast+0x5c>)
 8001072:	5c5b      	ldrb	r3, [r3, r1]
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	0029      	movs	r1, r5
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <LL_TIM_OC_DisableFast+0x60>)
 800107e:	5c52      	ldrb	r2, [r2, r1]
 8001080:	0011      	movs	r1, r2
 8001082:	2204      	movs	r2, #4
 8001084:	408a      	lsls	r2, r1
 8001086:	43d2      	mvns	r2, r2
 8001088:	4013      	ands	r3, r2
 800108a:	6023      	str	r3, [r4, #0]

}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	08001d94 	.word	0x08001d94
 8001098:	08001d9c 	.word	0x08001d9c

0800109c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00d      	beq.n	80010c8 <LL_TIM_OC_EnablePreload+0x2c>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d008      	beq.n	80010c4 <LL_TIM_OC_EnablePreload+0x28>
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d101      	bne.n	80010c0 <LL_TIM_OC_EnablePreload+0x24>
 80010bc:	2304      	movs	r3, #4
 80010be:	e004      	b.n	80010ca <LL_TIM_OC_EnablePreload+0x2e>
 80010c0:	2306      	movs	r3, #6
 80010c2:	e002      	b.n	80010ca <LL_TIM_OC_EnablePreload+0x2e>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e000      	b.n	80010ca <LL_TIM_OC_EnablePreload+0x2e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3318      	adds	r3, #24
 80010d0:	001a      	movs	r2, r3
 80010d2:	0029      	movs	r1, r5
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <LL_TIM_OC_EnablePreload+0x5c>)
 80010d6:	5c5b      	ldrb	r3, [r3, r1]
 80010d8:	18d3      	adds	r3, r2, r3
 80010da:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	0029      	movs	r1, r5
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <LL_TIM_OC_EnablePreload+0x60>)
 80010e2:	5c5b      	ldrb	r3, [r3, r1]
 80010e4:	0019      	movs	r1, r3
 80010e6:	2308      	movs	r3, #8
 80010e8:	408b      	lsls	r3, r1
 80010ea:	4313      	orrs	r3, r2
 80010ec:	6023      	str	r3, [r4, #0]
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	08001d94 	.word	0x08001d94
 80010fc:	08001d9c 	.word	0x08001d9c

08001100 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <LL_TIM_SetClockSource+0x24>)
 8001110:	401a      	ands	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	609a      	str	r2, [r3, #8]
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	ffffbff8 	.word	0xffffbff8

08001128 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2270      	movs	r2, #112	; 0x70
 8001138:	4393      	bics	r3, r2
 800113a:	001a      	movs	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	605a      	str	r2, [r3, #4]
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	4393      	bics	r3, r2
 800115c:	001a      	movs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	609a      	str	r2, [r3, #8]
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}

0800116a <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800116a:	b5b0      	push	{r4, r5, r7, lr}
 800116c:	b08e      	sub	sp, #56	; 0x38
 800116e:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001170:	2528      	movs	r5, #40	; 0x28
 8001172:	197b      	adds	r3, r7, r5
 8001174:	0018      	movs	r0, r3
 8001176:	2310      	movs	r3, #16
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f000 fdee 	bl	8001d5c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001180:	2418      	movs	r4, #24
 8001182:	193b      	adds	r3, r7, r4
 8001184:	0018      	movs	r0, r3
 8001186:	2310      	movs	r3, #16
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f000 fde6 	bl	8001d5c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	003b      	movs	r3, r7
 8001192:	0018      	movs	r0, r3
 8001194:	2318      	movs	r3, #24
 8001196:	001a      	movs	r2, r3
 8001198:	2100      	movs	r1, #0
 800119a:	f000 fddf 	bl	8001d5c <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fef8 	bl	8000f94 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80011a4:	197b      	adds	r3, r7, r5
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011aa:	197b      	adds	r3, r7, r5
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 32;
 80011b0:	197b      	adds	r3, r7, r5
 80011b2:	2220      	movs	r2, #32
 80011b4:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80011bc:	197a      	adds	r2, r7, r5
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fb8b 	bl	80018e0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ff22 	bl	8001018 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	2101      	movs	r1, #1
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff ff5e 	bl	800109c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2260      	movs	r2, #96	; 0x60
 80011e4:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80011f8:	193a      	adds	r2, r7, r4
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	2101      	movs	r1, #1
 8001200:	0018      	movs	r0, r3
 8001202:	f000 fbb5 	bl	8001970 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	2101      	movs	r1, #1
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ff13 	bl	8001038 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2110      	movs	r1, #16
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff ff3f 	bl	800109c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800121e:	193b      	adds	r3, r7, r4
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001224:	193a      	adds	r2, r7, r4
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	2110      	movs	r1, #16
 800122c:	0018      	movs	r0, r3
 800122e:	f000 fb9f 	bl	8001970 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	2110      	movs	r1, #16
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fefd 	bl	8001038 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	2100      	movs	r1, #0
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff6f 	bl	8001128 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff ff7c 	bl	800114c <LL_TIM_DisableMasterSlaveMode>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fec9 	bl	8000fec <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800125a:	003b      	movs	r3, r7
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001260:	003b      	movs	r3, r7
 8001262:	2202      	movs	r2, #2
 8001264:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001266:	003b      	movs	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800126c:	003b      	movs	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001272:	003b      	movs	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001278:	003b      	movs	r3, r7
 800127a:	2202      	movs	r2, #2
 800127c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	003a      	movs	r2, r7
 8001280:	23a0      	movs	r3, #160	; 0xa0
 8001282:	05db      	lsls	r3, r3, #23
 8001284:	0011      	movs	r1, r2
 8001286:	0018      	movs	r0, r3
 8001288:	f000 fa6d 	bl	8001766 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800128c:	003b      	movs	r3, r7
 800128e:	2202      	movs	r2, #2
 8001290:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001292:	003b      	movs	r3, r7
 8001294:	2202      	movs	r2, #2
 8001296:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001298:	003b      	movs	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129e:	003b      	movs	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a4:	003b      	movs	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80012aa:	003b      	movs	r3, r7
 80012ac:	2202      	movs	r2, #2
 80012ae:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	003a      	movs	r2, r7
 80012b2:	23a0      	movs	r3, #160	; 0xa0
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	0011      	movs	r1, r2
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 fa54 	bl	8001766 <LL_GPIO_Init>

}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b00e      	add	sp, #56	; 0x38
 80012c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012c8 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012ce:	003b      	movs	r3, r7
 80012d0:	0018      	movs	r0, r3
 80012d2:	2310      	movs	r3, #16
 80012d4:	001a      	movs	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	f000 fd40 	bl	8001d5c <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff fe6f 	bl	8000fc0 <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2014      	movs	r0, #20
 80012e6:	f7ff fde7 	bl	8000eb8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 80012ea:	2014      	movs	r0, #20
 80012ec:	f7ff fdce 	bl	8000e8c <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 65535;
 80012f0:	003b      	movs	r3, r7
 80012f2:	2201      	movs	r2, #1
 80012f4:	4252      	negs	r2, r2
 80012f6:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012f8:	003b      	movs	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 80012fe:	003b      	movs	r3, r7
 8001300:	4a10      	ldr	r2, [pc, #64]	; (8001344 <MX_TIM21_Init+0x7c>)
 8001302:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001304:	003b      	movs	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 800130a:	003b      	movs	r3, r7
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <MX_TIM21_Init+0x80>)
 800130e:	0019      	movs	r1, r3
 8001310:	0010      	movs	r0, r2
 8001312:	f000 fae5 	bl	80018e0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_TIM21_Init+0x80>)
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fe7d 	bl	8001018 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_TIM21_Init+0x80>)
 8001320:	2100      	movs	r1, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff feec 	bl	8001100 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MX_TIM21_Init+0x80>)
 800132a:	2100      	movs	r1, #0
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff fefb 	bl	8001128 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <MX_TIM21_Init+0x80>)
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ff09 	bl	800114c <LL_TIM_DisableMasterSlaveMode>

}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	0000ffff 	.word	0x0000ffff
 8001348:	40010800 	.word	0x40010800

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001352:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001354:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <LoopForever+0xa>)
    CMP R1, R2
 8001358:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800135a:	d105      	bne.n	8001368 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800135e:	4913      	ldr	r1, [pc, #76]	; (80013ac <LoopForever+0x12>)
    STR R1, [R0]
 8001360:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001364:	4913      	ldr	r1, [pc, #76]	; (80013b4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001366:	6001      	str	r1, [r0, #0]

08001368 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800136a:	e003      	b.n	8001374 <LoopCopyDataInit>

0800136c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 800136e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001372:	3104      	adds	r1, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <LoopForever+0x22>)
  ldr  r3, =_edata
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <LoopForever+0x26>)
  adds  r2, r0, r1
 8001378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800137a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800137c:	d3f6      	bcc.n	800136c <CopyDataInit>
  ldr  r2, =_sbss
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8001380:	e002      	b.n	8001388 <LoopFillZerobss>

08001382 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001382:	2300      	movs	r3, #0
  str  r3, [r2]
 8001384:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001386:	3204      	adds	r2, #4

08001388 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <LoopForever+0x2e>)
  cmp  r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800138c:	d3f9      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800138e:	f7ff fd3f 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f000 fcbf 	bl	8001d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fc01 	bl	8000b9c <main>

0800139a <LoopForever>:

LoopForever:
    b LoopForever
 800139a:	e7fe      	b.n	800139a <LoopForever>
   ldr   r0, =_estack
 800139c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80013a0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80013a4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80013a8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80013ac:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80013b0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80013b4:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 80013b8:	08001dac 	.word	0x08001dac
  ldr  r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013c0:	20000048 	.word	0x20000048
  ldr  r2, =_sbss
 80013c4:	20000048 	.word	0x20000048
  ldr  r3, = _ebss
 80013c8:	20000068 	.word	0x20000068

080013cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC1_COMP_IRQHandler>
	...

080013d0 <LL_EXTI_EnableIT_0_31>:
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <LL_EXTI_EnableIT_0_31+0x1c>)
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <LL_EXTI_EnableIT_0_31+0x1c>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010400 	.word	0x40010400

080013f0 <LL_EXTI_DisableIT_0_31>:
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_EXTI_DisableIT_0_31+0x20>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	43d9      	mvns	r1, r3
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <LL_EXTI_DisableIT_0_31+0x20>)
 8001402:	400a      	ands	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40010400 	.word	0x40010400

08001414 <LL_EXTI_EnableEvent_0_31>:
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010400 	.word	0x40010400

08001434 <LL_EXTI_DisableEvent_0_31>:
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_EXTI_DisableEvent_0_31+0x20>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	43d9      	mvns	r1, r3
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001446:	400a      	ands	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40010400 	.word	0x40010400

08001458 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001462:	6899      	ldr	r1, [r3, #8]
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	430a      	orrs	r2, r1
 800146a:	609a      	str	r2, [r3, #8]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010400 	.word	0x40010400

08001478 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	43d9      	mvns	r1, r3
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800148a:	400a      	ands	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40010400 	.word	0x40010400

0800149c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80014a6:	68d9      	ldr	r1, [r3, #12]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010400 	.word	0x40010400

080014bc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	60da      	str	r2, [r3, #12]
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40010400 	.word	0x40010400

080014e0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d065      	beq.n	80015c4 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d100      	bne.n	8001502 <LL_EXTI_Init+0x22>
 8001500:	e06b      	b.n	80015da <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	795b      	ldrb	r3, [r3, #5]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d00e      	beq.n	8001528 <LL_EXTI_Init+0x48>
 800150a:	2b02      	cmp	r3, #2
 800150c:	d017      	beq.n	800153e <LL_EXTI_Init+0x5e>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d120      	bne.n	8001554 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff ff8c 	bl	8001434 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ff55 	bl	80013d0 <LL_EXTI_EnableIT_0_31>
          break;
 8001526:	e01a      	b.n	800155e <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff ff6c 	bl	8001414 <LL_EXTI_EnableEvent_0_31>
          break;
 800153c:	e00f      	b.n	800155e <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff ff44 	bl	80013d0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ff61 	bl	8001414 <LL_EXTI_EnableEvent_0_31>
          break;
 8001552:	e004      	b.n	800155e <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
          break;
 800155c:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	799b      	ldrb	r3, [r3, #6]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d039      	beq.n	80015da <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	799b      	ldrb	r3, [r3, #6]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d00e      	beq.n	800158c <LL_EXTI_Init+0xac>
 800156e:	2b03      	cmp	r3, #3
 8001570:	d017      	beq.n	80015a2 <LL_EXTI_Init+0xc2>
 8001572:	2b01      	cmp	r3, #1
 8001574:	d120      	bne.n	80015b8 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff ff9e 	bl	80014bc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff ff67 	bl	8001458 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800158a:	e027      	b.n	80015dc <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff71 	bl	8001478 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff7e 	bl	800149c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80015a0:	e01c      	b.n	80015dc <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff ff56 	bl	8001458 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff ff73 	bl	800149c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80015b6:	e011      	b.n	80015dc <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
            break;
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	e00b      	b.n	80015dc <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ff11 	bl	80013f0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff ff2e 	bl	8001434 <LL_EXTI_DisableEvent_0_31>
 80015d8:	e000      	b.n	80015dc <LL_EXTI_Init+0xfc>
      }
 80015da:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80015dc:	230f      	movs	r3, #15
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	781b      	ldrb	r3, [r3, #0]
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <LL_GPIO_SetPinMode>:
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	435a      	muls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	189b      	adds	r3, r3, r2
 8001606:	43db      	mvns	r3, r3
 8001608:	400b      	ands	r3, r1
 800160a:	001a      	movs	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	434b      	muls	r3, r1
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	434b      	muls	r3, r1
 8001616:	431a      	orrs	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}

08001624 <LL_GPIO_SetPinOutputType>:
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	43d2      	mvns	r2, r2
 8001638:	401a      	ands	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	434b      	muls	r3, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	605a      	str	r2, [r3, #4]
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}

0800164e <LL_GPIO_SetPinSpeed>:
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	435a      	muls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	189b      	adds	r3, r3, r2
 800166a:	43db      	mvns	r3, r3
 800166c:	400b      	ands	r3, r1
 800166e:	001a      	movs	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	434b      	muls	r3, r1
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	434b      	muls	r3, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	609a      	str	r2, [r3, #8]
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <LL_GPIO_SetPinPull>:
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68d9      	ldr	r1, [r3, #12]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	435a      	muls	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	43db      	mvns	r3, r3
 80016a6:	400b      	ands	r3, r1
 80016a8:	001a      	movs	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	434b      	muls	r3, r1
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	434b      	muls	r3, r1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	60da      	str	r2, [r3, #12]
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <LL_GPIO_SetAFPin_0_7>:
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a19      	ldr	r1, [r3, #32]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	4353      	muls	r3, r2
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	4353      	muls	r3, r2
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	435a      	muls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	43db      	mvns	r3, r3
 80016e8:	400b      	ands	r3, r1
 80016ea:	001a      	movs	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	434b      	muls	r3, r1
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	434b      	muls	r3, r1
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	434b      	muls	r3, r1
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	434b      	muls	r3, r1
 80016fe:	431a      	orrs	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	621a      	str	r2, [r3, #32]
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}

0800170c <LL_GPIO_SetAFPin_8_15>:
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	0a12      	lsrs	r2, r2, #8
 8001724:	4353      	muls	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	0a12      	lsrs	r2, r2, #8
 800172a:	4353      	muls	r3, r2
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	0a12      	lsrs	r2, r2, #8
 8001730:	435a      	muls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	43db      	mvns	r3, r3
 800173a:	400b      	ands	r3, r1
 800173c:	001a      	movs	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	0a09      	lsrs	r1, r1, #8
 8001746:	434b      	muls	r3, r1
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	0a09      	lsrs	r1, r1, #8
 800174c:	434b      	muls	r3, r1
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	0a09      	lsrs	r1, r1, #8
 8001752:	434b      	muls	r3, r1
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	434b      	muls	r3, r1
 8001758:	431a      	orrs	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001778:	e040      	b.n	80017fc <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4091      	lsls	r1, r2
 8001784:	000a      	movs	r2, r1
 8001786:	4013      	ands	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d032      	beq.n	80017f6 <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff ff26 	bl	80015ea <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <LL_GPIO_Init+0x48>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d106      	bne.n	80017bc <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff ff49 	bl	800164e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff ff5f 	bl	8001688 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d111      	bne.n	80017f6 <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d807      	bhi.n	80017e8 <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff ff6e 	bl	80016c2 <LL_GPIO_SetAFPin_0_7>
 80017e6:	e006      	b.n	80017f6 <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff8b 	bl	800170c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	40da      	lsrs	r2, r3
 8001804:	1e13      	subs	r3, r2, #0
 8001806:	d1b8      	bne.n	800177a <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <LL_GPIO_Init+0xb2>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d107      	bne.n	8001828 <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fefe 	bl	8001624 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001828:	2300      	movs	r3, #0
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}

08001832 <LL_TIM_SetPrescaler>:
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}

0800184a <LL_TIM_SetAutoReload>:
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}

08001862 <LL_TIM_OC_SetCompareCH1>:
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}

0800187a <LL_TIM_OC_SetCompareCH2>:
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}

08001892 <LL_TIM_OC_SetCompareCH3>:
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}

080018aa <LL_TIM_OC_SetCompareCH4>:
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2201      	movs	r2, #1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	615a      	str	r2, [r3, #20]
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b002      	add	sp, #8
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	05db      	lsls	r3, r3, #23
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d003      	beq.n	8001902 <LL_TIM_Init+0x22>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <LL_TIM_Init+0x88>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d107      	bne.n	8001912 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2270      	movs	r2, #112	; 0x70
 8001906:	4393      	bics	r3, r2
 8001908:	001a      	movs	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	05db      	lsls	r3, r3, #23
 8001918:	429a      	cmp	r2, r3
 800191a:	d003      	beq.n	8001924 <LL_TIM_Init+0x44>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <LL_TIM_Init+0x88>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d106      	bne.n	8001932 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <LL_TIM_Init+0x8c>)
 8001928:	401a      	ands	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff ff82 	bl	800184a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	001a      	movs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff ff6e 	bl	8001832 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff ffb2 	bl	80018c2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800195e:	2300      	movs	r3, #0
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b004      	add	sp, #16
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010800 	.word	0x40010800
 800196c:	fffffcff 	.word	0xfffffcff

08001970 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800197c:	2317      	movs	r3, #23
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d017      	beq.n	80019ba <LL_TIM_OC_Init+0x4a>
 800198a:	d802      	bhi.n	8001992 <LL_TIM_OC_Init+0x22>
 800198c:	2b01      	cmp	r3, #1
 800198e:	d009      	beq.n	80019a4 <LL_TIM_OC_Init+0x34>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001990:	e034      	b.n	80019fc <LL_TIM_OC_Init+0x8c>
  switch (Channel)
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0052      	lsls	r2, r2, #1
 8001996:	4293      	cmp	r3, r2
 8001998:	d01a      	beq.n	80019d0 <LL_TIM_OC_Init+0x60>
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	0152      	lsls	r2, r2, #5
 800199e:	4293      	cmp	r3, r2
 80019a0:	d021      	beq.n	80019e6 <LL_TIM_OC_Init+0x76>
      break;
 80019a2:	e02b      	b.n	80019fc <LL_TIM_OC_Init+0x8c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80019a4:	2317      	movs	r3, #23
 80019a6:	18fc      	adds	r4, r7, r3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0011      	movs	r1, r2
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 f82b 	bl	8001a0a <OC1Config>
 80019b4:	0003      	movs	r3, r0
 80019b6:	7023      	strb	r3, [r4, #0]
      break;
 80019b8:	e020      	b.n	80019fc <LL_TIM_OC_Init+0x8c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80019ba:	2317      	movs	r3, #23
 80019bc:	18fc      	adds	r4, r7, r3
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f867 	bl	8001a98 <OC2Config>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
      break;
 80019ce:	e015      	b.n	80019fc <LL_TIM_OC_Init+0x8c>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80019d0:	2317      	movs	r3, #23
 80019d2:	18fc      	adds	r4, r7, r3
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0011      	movs	r1, r2
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 f8a8 	bl	8001b30 <OC3Config>
 80019e0:	0003      	movs	r3, r0
 80019e2:	7023      	strb	r3, [r4, #0]
      break;
 80019e4:	e00a      	b.n	80019fc <LL_TIM_OC_Init+0x8c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80019e6:	2317      	movs	r3, #23
 80019e8:	18fc      	adds	r4, r7, r3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 f8e7 	bl	8001bc4 <OC4Config>
 80019f6:	0003      	movs	r3, r0
 80019f8:	7023      	strb	r3, [r4, #0]
      break;
 80019fa:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 80019fc:	2317      	movs	r3, #23
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	781b      	ldrb	r3, [r3, #0]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b007      	add	sp, #28
 8001a08:	bd90      	pop	{r4, r7, pc}

08001a0a <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2203      	movs	r2, #3
 8001a38:	4393      	bics	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2270      	movs	r2, #112	; 0x70
 8001a40:	4393      	bics	r3, r2
 8001a42:	001a      	movs	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4393      	bics	r3, r2
 8001a52:	001a      	movs	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4393      	bics	r3, r2
 8001a62:	001a      	movs	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff feee 	bl	8001862 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b006      	add	sp, #24
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	001a      	movs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <OC2Config+0x90>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <OC2Config+0x94>)
 8001ace:	401a      	ands	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4393      	bics	r3, r2
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2210      	movs	r2, #16
 8001af0:	4393      	bics	r3, r2
 8001af2:	001a      	movs	r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0011      	movs	r1, r2
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff feb1 	bl	800187a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b006      	add	sp, #24
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	fffffcff 	.word	0xfffffcff
 8001b2c:	ffff8fff 	.word	0xffff8fff

08001b30 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <OC3Config+0x8c>)
 8001b40:	401a      	ands	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2270      	movs	r2, #112	; 0x70
 8001b64:	4393      	bics	r3, r2
 8001b66:	001a      	movs	r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <OC3Config+0x90>)
 8001b74:	401a      	ands	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <OC3Config+0x8c>)
 8001b84:	401a      	ands	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff fe74 	bl	8001892 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b006      	add	sp, #24
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	fffffeff 	.word	0xfffffeff
 8001bc0:	fffffdff 	.word	0xfffffdff

08001bc4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <OC4Config+0x8c>)
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <OC4Config+0x90>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <OC4Config+0x94>)
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <OC4Config+0x98>)
 8001c08:	401a      	ands	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	031b      	lsls	r3, r3, #12
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <OC4Config+0x8c>)
 8001c18:	401a      	ands	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	031b      	lsls	r3, r3, #12
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fe36 	bl	80018aa <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b006      	add	sp, #24
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	ffffefff 	.word	0xffffefff
 8001c54:	fffffcff 	.word	0xfffffcff
 8001c58:	ffff8fff 	.word	0xffff8fff
 8001c5c:	ffffdfff 	.word	0xffffdfff

08001c60 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe fa4b 	bl	8000108 <__udivsi3>
 8001c72:	0003      	movs	r3, r0
 8001c74:	001a      	movs	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <LL_InitTick+0x30>)
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <LL_InitTick+0x30>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <LL_InitTick+0x30>)
 8001c84:	2205      	movs	r2, #5
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001c9c:	23fa      	movs	r3, #250	; 0xfa
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ffdb 	bl	8001c60 <LL_InitTick>
}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <LL_mDelay+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001cc2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	d00c      	beq.n	8001ce4 <LL_mDelay+0x30>
  {
    Delay++;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001cd0:	e008      	b.n	8001ce4 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <LL_mDelay+0x40>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d002      	beq.n	8001ce4 <LL_mDelay+0x30>
    {
      Delay--;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f3      	bne.n	8001cd2 <LL_mDelay+0x1e>
    }
  }
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <LL_SetSystemCoreClock+0x18>)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	20000044 	.word	0x20000044

08001d14 <__libc_init_array>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	2600      	movs	r6, #0
 8001d18:	4d0c      	ldr	r5, [pc, #48]	; (8001d4c <__libc_init_array+0x38>)
 8001d1a:	4c0d      	ldr	r4, [pc, #52]	; (8001d50 <__libc_init_array+0x3c>)
 8001d1c:	1b64      	subs	r4, r4, r5
 8001d1e:	10a4      	asrs	r4, r4, #2
 8001d20:	42a6      	cmp	r6, r4
 8001d22:	d109      	bne.n	8001d38 <__libc_init_array+0x24>
 8001d24:	2600      	movs	r6, #0
 8001d26:	f000 f821 	bl	8001d6c <_init>
 8001d2a:	4d0a      	ldr	r5, [pc, #40]	; (8001d54 <__libc_init_array+0x40>)
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	; (8001d58 <__libc_init_array+0x44>)
 8001d2e:	1b64      	subs	r4, r4, r5
 8001d30:	10a4      	asrs	r4, r4, #2
 8001d32:	42a6      	cmp	r6, r4
 8001d34:	d105      	bne.n	8001d42 <__libc_init_array+0x2e>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	00b3      	lsls	r3, r6, #2
 8001d3a:	58eb      	ldr	r3, [r5, r3]
 8001d3c:	4798      	blx	r3
 8001d3e:	3601      	adds	r6, #1
 8001d40:	e7ee      	b.n	8001d20 <__libc_init_array+0xc>
 8001d42:	00b3      	lsls	r3, r6, #2
 8001d44:	58eb      	ldr	r3, [r5, r3]
 8001d46:	4798      	blx	r3
 8001d48:	3601      	adds	r6, #1
 8001d4a:	e7f2      	b.n	8001d32 <__libc_init_array+0x1e>
 8001d4c:	08001da4 	.word	0x08001da4
 8001d50:	08001da4 	.word	0x08001da4
 8001d54:	08001da4 	.word	0x08001da4
 8001d58:	08001da8 	.word	0x08001da8

08001d5c <memset>:
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	1812      	adds	r2, r2, r0
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d100      	bne.n	8001d66 <memset+0xa>
 8001d64:	4770      	bx	lr
 8001d66:	7019      	strb	r1, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	e7f9      	b.n	8001d60 <memset+0x4>

08001d6c <_init>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d72:	bc08      	pop	{r3}
 8001d74:	469e      	mov	lr, r3
 8001d76:	4770      	bx	lr

08001d78 <_fini>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7e:	bc08      	pop	{r3}
 8001d80:	469e      	mov	lr, r3
 8001d82:	4770      	bx	lr
