
OverDrivePedal_SW_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800249c  0800249c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800249c  0800249c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800249c  0800249c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080024a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000004  080024a8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  080024a8  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ebd  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a33  00000000  00000000  00028ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002a920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012057  00000000  00000000  0002be78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c13  00000000  00000000  0003decf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a870  00000000  00000000  00046ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1352  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f0  00000000  00000000  000b13d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002464 	.word	0x08002464

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002464 	.word	0x08002464

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <NVIC_EnableIRQ+0x28>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b7f      	cmp	r3, #127	; 0x7f
 8000260:	d932      	bls.n	80002c8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000262:	4a2f      	ldr	r2, [pc, #188]	; (8000320 <NVIC_SetPriority+0xd4>)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	0019      	movs	r1, r3
 800026a:	230f      	movs	r3, #15
 800026c:	400b      	ands	r3, r1
 800026e:	3b08      	subs	r3, #8
 8000270:	089b      	lsrs	r3, r3, #2
 8000272:	3306      	adds	r3, #6
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	18d3      	adds	r3, r2, r3
 8000278:	3304      	adds	r3, #4
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1dfa      	adds	r2, r7, #7
 800027e:	7812      	ldrb	r2, [r2, #0]
 8000280:	0011      	movs	r1, r2
 8000282:	2203      	movs	r2, #3
 8000284:	400a      	ands	r2, r1
 8000286:	00d2      	lsls	r2, r2, #3
 8000288:	21ff      	movs	r1, #255	; 0xff
 800028a:	4091      	lsls	r1, r2
 800028c:	000a      	movs	r2, r1
 800028e:	43d2      	mvns	r2, r2
 8000290:	401a      	ands	r2, r3
 8000292:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	019b      	lsls	r3, r3, #6
 8000298:	22ff      	movs	r2, #255	; 0xff
 800029a:	401a      	ands	r2, r3
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	0018      	movs	r0, r3
 80002a2:	2303      	movs	r3, #3
 80002a4:	4003      	ands	r3, r0
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	481d      	ldr	r0, [pc, #116]	; (8000320 <NVIC_SetPriority+0xd4>)
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	001c      	movs	r4, r3
 80002b2:	230f      	movs	r3, #15
 80002b4:	4023      	ands	r3, r4
 80002b6:	3b08      	subs	r3, #8
 80002b8:	089b      	lsrs	r3, r3, #2
 80002ba:	430a      	orrs	r2, r1
 80002bc:	3306      	adds	r3, #6
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	18c3      	adds	r3, r0, r3
 80002c2:	3304      	adds	r3, #4
 80002c4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002c6:	e027      	b.n	8000318 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <NVIC_SetPriority+0xd8>)
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	33c0      	adds	r3, #192	; 0xc0
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	589b      	ldr	r3, [r3, r2]
 80002d8:	1dfa      	adds	r2, r7, #7
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	0011      	movs	r1, r2
 80002de:	2203      	movs	r2, #3
 80002e0:	400a      	ands	r2, r1
 80002e2:	00d2      	lsls	r2, r2, #3
 80002e4:	21ff      	movs	r1, #255	; 0xff
 80002e6:	4091      	lsls	r1, r2
 80002e8:	000a      	movs	r2, r1
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	019b      	lsls	r3, r3, #6
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	401a      	ands	r2, r3
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	2303      	movs	r3, #3
 8000300:	4003      	ands	r3, r0
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <NVIC_SetPriority+0xd8>)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b25b      	sxtb	r3, r3
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	33c0      	adds	r3, #192	; 0xc0
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	501a      	str	r2, [r3, r0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e000e100 	.word	0xe000e100

08000328 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	430a      	orrs	r2, r1
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <LL_IOP_GRP1_EnableClock+0x28>)
 800033e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4013      	ands	r3, r2
 8000344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	21ff      	movs	r1, #255	; 0xff
 8000364:	400b      	ands	r3, r1
 8000366:	3302      	adds	r3, #2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	589b      	ldr	r3, [r3, r2]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	0c12      	lsrs	r2, r2, #16
 8000370:	210f      	movs	r1, #15
 8000372:	4091      	lsls	r1, r2
 8000374:	000a      	movs	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
 800037a:	0011      	movs	r1, r2
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	0c1b      	lsrs	r3, r3, #16
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	409a      	lsls	r2, r3
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <LL_SYSCFG_SetEXTISource+0x48>)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	24ff      	movs	r4, #255	; 0xff
 800038a:	4023      	ands	r3, r4
 800038c:	430a      	orrs	r2, r1
 800038e:	3302      	adds	r3, #2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	501a      	str	r2, [r3, r0]
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b003      	add	sp, #12
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	40010000 	.word	0x40010000

080003a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6819      	ldr	r1, [r3, #0]
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	435a      	muls	r2, r3
 80003b6:	0013      	movs	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	43db      	mvns	r3, r3
 80003be:	400b      	ands	r3, r1
 80003c0:	001a      	movs	r2, r3
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	434b      	muls	r3, r1
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	434b      	muls	r3, r1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}

080003da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b084      	sub	sp, #16
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68d9      	ldr	r1, [r3, #12]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	435a      	muls	r2, r3
 80003f0:	0013      	movs	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	189b      	adds	r3, r3, r2
 80003f6:	43db      	mvns	r3, r3
 80003f8:	400b      	ands	r3, r1
 80003fa:	001a      	movs	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	68b9      	ldr	r1, [r7, #8]
 8000400:	434b      	muls	r3, r1
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	434b      	muls	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}

08000414 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000432:	2418      	movs	r4, #24
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2308      	movs	r3, #8
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f002 f809 	bl	8002454 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	003b      	movs	r3, r7
 8000444:	0018      	movs	r0, r3
 8000446:	2318      	movs	r3, #24
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f002 f802 	bl	8002454 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000450:	2004      	movs	r0, #4
 8000452:	f7ff ff69 	bl	8000328 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff66 	bl	8000328 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	4a33      	ldr	r2, [pc, #204]	; (8000530 <MX_GPIO_Init+0x104>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f7ff ffd5 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin);
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	009a      	lsls	r2, r3, #2
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ffcd 	bl	8000414 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CLEAN_ENABLE_Pin;
 800047a:	003b      	movs	r3, r7
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	01d2      	lsls	r2, r2, #7
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000482:	003b      	movs	r3, r7
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000488:	003b      	movs	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000494:	003b      	movs	r3, r7
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CLEAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800049a:	003b      	movs	r3, r7
 800049c:	4a24      	ldr	r2, [pc, #144]	; (8000530 <MX_GPIO_Init+0x104>)
 800049e:	0019      	movs	r1, r3
 80004a0:	0010      	movs	r0, r2
 80004a2:	f001 fd06 	bl	8001eb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FX_ENABLE_Pin;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	0092      	lsls	r2, r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2201      	movs	r2, #1
 80004c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(FX_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80004c6:	003a      	movs	r2, r7
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fcef 	bl	8001eb2 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE4);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ff3c 	bl	8000354 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_PULL_UP);
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff ff78 	bl	80003da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIO_EXTI4_BYPASS_GPIO_Port, GPIO_EXTI4_BYPASS_Pin, LL_GPIO_MODE_INPUT);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ff54 	bl	80003a0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2210      	movs	r2, #16
 80004fe:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2202      	movs	r2, #2
 8000510:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000512:	187b      	adds	r3, r7, r1
 8000514:	0018      	movs	r0, r3
 8000516:	f001 fb89 	bl	8001c2c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800051a:	2100      	movs	r1, #0
 800051c:	2007      	movs	r0, #7
 800051e:	f7ff fe95 	bl	800024c <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000522:	2007      	movs	r0, #7
 8000524:	f7ff fe7c 	bl	8000220 <NVIC_EnableIRQ>

}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b009      	add	sp, #36	; 0x24
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	50000800 	.word	0x50000800

08000534 <NVIC_EnableIRQ>:
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	231f      	movs	r3, #31
 8000548:	401a      	ands	r2, r3
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <NVIC_EnableIRQ+0x28>)
 800054c:	2101      	movs	r1, #1
 800054e:	4091      	lsls	r1, r2
 8000550:	000a      	movs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000e100 	.word	0xe000e100

08000560 <NVIC_SetPriority>:
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b7f      	cmp	r3, #127	; 0x7f
 8000574:	d932      	bls.n	80005dc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <NVIC_SetPriority+0xd4>)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0019      	movs	r1, r3
 800057e:	230f      	movs	r3, #15
 8000580:	400b      	ands	r3, r1
 8000582:	3b08      	subs	r3, #8
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	3306      	adds	r3, #6
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	3304      	adds	r3, #4
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	0011      	movs	r1, r2
 8000596:	2203      	movs	r2, #3
 8000598:	400a      	ands	r2, r1
 800059a:	00d2      	lsls	r2, r2, #3
 800059c:	21ff      	movs	r1, #255	; 0xff
 800059e:	4091      	lsls	r1, r2
 80005a0:	000a      	movs	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	401a      	ands	r2, r3
 80005a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	401a      	ands	r2, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	4003      	ands	r3, r0
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <NVIC_SetPriority+0xd4>)
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001c      	movs	r4, r3
 80005c6:	230f      	movs	r3, #15
 80005c8:	4023      	ands	r3, r4
 80005ca:	3b08      	subs	r3, #8
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	3306      	adds	r3, #6
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	18c3      	adds	r3, r0, r3
 80005d6:	3304      	adds	r3, #4
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	e027      	b.n	800062c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <NVIC_SetPriority+0xd8>)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	33c0      	adds	r3, #192	; 0xc0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0011      	movs	r1, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	400a      	ands	r2, r1
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	21ff      	movs	r1, #255	; 0xff
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	2303      	movs	r3, #3
 8000614:	4003      	ands	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <NVIC_SetPriority+0xd8>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	430a      	orrs	r2, r1
 8000626:	33c0      	adds	r3, #192	; 0xc0
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	501a      	str	r2, [r3, r0]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b003      	add	sp, #12
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000e100 	.word	0xe000e100

0800063c <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <LL_LPTIM_SetUpdateMode+0x24>)
 800064c:	401a      	ands	r2, r3
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60da      	str	r2, [r3, #12]
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	ffbfffff 	.word	0xffbfffff

08000664 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <LL_LPTIM_SetCounterMode+0x24>)
 8000674:	401a      	ands	r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60da      	str	r2, [r3, #12]
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	ff7fffff 	.word	0xff7fffff

0800068c <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <LL_LPTIM_SetPolarity+0x24>)
 800069c:	401a      	ands	r2, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	431a      	orrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	ffdfffff 	.word	0xffdfffff

080006b4 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <LL_LPTIM_SetPrescaler+0x24>)
 80006c4:	401a      	ands	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	fffff1ff 	.word	0xfffff1ff

080006dc <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <LL_LPTIM_TrigSw+0x1c>)
 80006ea:	401a      	ands	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60da      	str	r2, [r3, #12]
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	fff9ffff 	.word	0xfff9ffff

080006fc <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	2201      	movs	r2, #1
 800070c:	4393      	bics	r3, r2
 800070e:	001a      	movs	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	431a      	orrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	60da      	str	r2, [r3, #12]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}

08000720 <LL_APB1_GRP1_EnableClock>:
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <LL_APB1_GRP1_EnableClock+0x28>)
 800072a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LL_APB1_GRP1_EnableClock+0x28>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	430a      	orrs	r2, r1
 8000732:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_APB1_GRP1_EnableClock+0x28>)
 8000736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4013      	ands	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b004      	add	sp, #16
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000

0800074c <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	061b      	lsls	r3, r3, #24
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff ffe3 	bl	8000720 <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn, 0);
 800075a:	2100      	movs	r1, #0
 800075c:	200d      	movs	r0, #13
 800075e:	f7ff feff 	bl	8000560 <NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM1_IRQn);
 8000762:	200d      	movs	r0, #13
 8000764:	f7ff fee6 	bl	8000534 <NVIC_EnableIRQ>

  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_LPTIM1_Init+0x60>)
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ffc5 	bl	80006fc <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 8000772:	23e0      	movs	r3, #224	; 0xe0
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <MX_LPTIM1_Init+0x60>)
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f7ff ff9a 	bl	80006b4 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_LPTIM1_Init+0x60>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff ff81 	bl	800068c <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_LPTIM1_Init+0x60>)
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff54 	bl	800063c <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <MX_LPTIM1_Init+0x60>)
 8000796:	2100      	movs	r1, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ff63 	bl	8000664 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 800079e:	4b03      	ldr	r3, [pc, #12]	; (80007ac <MX_LPTIM1_Init+0x60>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f7ff ff9b 	bl	80006dc <LL_LPTIM_TrigSw>

}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40007c00 	.word	0x40007c00

080007b0 <LL_LPTIM_Enable>:
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2201      	movs	r2, #1
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	611a      	str	r2, [r3, #16]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <LL_LPTIM_StartCounter>:
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	2206      	movs	r2, #6
 80007dc:	4393      	bics	r3, r2
 80007de:	001a      	movs	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	611a      	str	r2, [r3, #16]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LL_LPTIM_EnableIT_UP>:
  * @rmtoll IER          UPIE          LL_LPTIM_EnableIT_UP
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_UP(LPTIM_TypeDef *LPTIMx)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_UPIE);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	2220      	movs	r2, #32
 80007fe:	431a      	orrs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	609a      	str	r2, [r3, #8]
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}

0800080c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <LL_RCC_HSI_Enable+0x18>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <LL_RCC_HSI_Enable+0x18>)
 8000816:	2101      	movs	r1, #1
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LL_RCC_HSI_IsReady+0x1c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2204      	movs	r2, #4
 8000832:	4013      	ands	r3, r2
 8000834:	2b04      	cmp	r3, #4
 8000836:	d101      	bne.n	800083c <LL_RCC_HSI_IsReady+0x14>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <LL_RCC_HSI_IsReady+0x16>
 800083c:	2300      	movs	r3, #0
}
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000

08000848 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000856:	4013      	ands	r3, r2
 8000858:	0019      	movs	r1, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	021a      	lsls	r2, r3, #8
 800085e:	4b03      	ldr	r3, [pc, #12]	; (800086c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000860:	430a      	orrs	r2, r1
 8000862:	605a      	str	r2, [r3, #4]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	ffffe0ff 	.word	0xffffe0ff

08000874 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <LL_RCC_SetSysClkSource+0x24>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	2203      	movs	r2, #3
 8000882:	4393      	bics	r3, r2
 8000884:	0019      	movs	r1, r3
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <LL_RCC_SetSysClkSource+0x24>)
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	430a      	orrs	r2, r1
 800088c:	60da      	str	r2, [r3, #12]
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <LL_RCC_GetSysClkSource+0x14>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	220c      	movs	r2, #12
 80008a6:	4013      	ands	r3, r2
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000

080008b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	22f0      	movs	r2, #240	; 0xf0
 80008c2:	4393      	bics	r3, r2
 80008c4:	0019      	movs	r1, r3
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	60da      	str	r2, [r3, #12]
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000

080008dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <LL_RCC_SetAPB1Prescaler+0x28>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	0019      	movs	r1, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	60da      	str	r2, [r3, #12]
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000
 8000904:	fffff8ff 	.word	0xfffff8ff

08000908 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000916:	4013      	ands	r3, r2
 8000918:	0019      	movs	r1, r3
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <LL_RCC_SetAPB2Prescaler+0x24>)
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	430a      	orrs	r2, r1
 8000920:	60da      	str	r2, [r3, #12]
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000
 8000930:	ffffc7ff 	.word	0xffffc7ff

08000934 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <LL_RCC_SetLPTIMClockSource+0x24>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <LL_RCC_SetLPTIMClockSource+0x28>)
 8000942:	4013      	ands	r3, r2
 8000944:	0019      	movs	r1, r3
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <LL_RCC_SetLPTIMClockSource+0x24>)
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	430a      	orrs	r2, r1
 800094c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40021000 	.word	0x40021000
 800095c:	fff3ffff 	.word	0xfff3ffff

08000960 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LL_FLASH_SetLatency+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	4393      	bics	r3, r2
 8000970:	0019      	movs	r1, r3
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <LL_FLASH_SetLatency+0x24>)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	430a      	orrs	r2, r1
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40022000 	.word	0x40022000

08000988 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <LL_FLASH_GetLatency+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	4013      	ands	r3, r2
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40022000 	.word	0x40022000

080009a0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	0019      	movs	r1, r3
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40007000 	.word	0x40007000
 80009c8:	ffffe7ff 	.word	0xffffe7ff

080009cc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2201      	movs	r2, #1
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a1a      	ldr	r2, [r3, #32]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	621a      	str	r2, [r3, #32]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d00d      	beq.n	8000a36 <LL_TIM_OC_SetMode+0x2e>
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b10      	cmp	r3, #16
 8000a1e:	d008      	beq.n	8000a32 <LL_TIM_OC_SetMode+0x2a>
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d101      	bne.n	8000a2e <LL_TIM_OC_SetMode+0x26>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e004      	b.n	8000a38 <LL_TIM_OC_SetMode+0x30>
 8000a2e:	2306      	movs	r3, #6
 8000a30:	e002      	b.n	8000a38 <LL_TIM_OC_SetMode+0x30>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e000      	b.n	8000a38 <LL_TIM_OC_SetMode+0x30>
 8000a36:	2300      	movs	r3, #0
 8000a38:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3318      	adds	r3, #24
 8000a3e:	001a      	movs	r2, r3
 8000a40:	0029      	movs	r1, r5
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <LL_TIM_OC_SetMode+0x6c>)
 8000a44:	5c5b      	ldrb	r3, [r3, r1]
 8000a46:	18d3      	adds	r3, r2, r3
 8000a48:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	0029      	movs	r1, r5
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LL_TIM_OC_SetMode+0x70>)
 8000a50:	5c52      	ldrb	r2, [r2, r1]
 8000a52:	0011      	movs	r1, r2
 8000a54:	2273      	movs	r2, #115	; 0x73
 8000a56:	408a      	lsls	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0029      	movs	r1, r5
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <LL_TIM_OC_SetMode+0x70>)
 8000a60:	5c5b      	ldrb	r3, [r3, r1]
 8000a62:	0019      	movs	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	408b      	lsls	r3, r1
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	6023      	str	r3, [r4, #0]
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b004      	add	sp, #16
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	0800247c 	.word	0x0800247c
 8000a78:	08002484 	.word	0x08002484

08000a7c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60da      	str	r2, [r3, #12]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 fbec 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f8a8 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f7ff fcc2 	bl	800042c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000aa8:	f000 fa7f 	bl	8000faa <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000aac:	f7ff fe4e 	bl	800074c <MX_LPTIM1_Init>
  MX_TIM21_Init();
 8000ab0:	f000 fb2a 	bl	8001108 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	2260      	movs	r2, #96	; 0x60
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ffa3 	bl	8000a08 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff8d 	bl	80009e8 <LL_TIM_CC_EnableChannel>

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	2260      	movs	r2, #96	; 0x60
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff ff96 	bl	8000a08 <LL_TIM_OC_SetMode>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff ff80 	bl	80009e8 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM2);
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ff6d 	bl	80009cc <LL_TIM_EnableCounter>

  TIM2->ARR = 8191;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <main+0x140>)
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
  // init the PWM duty to 0%
  TIM2->CCR1 = 0;
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	2200      	movs	r2, #0
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38



  // init bypass soft switches
  // clean routing enabled, fx routing disabled
  CLEAN_ENABLE_GPIO_Port->ODR |= (CLEAN_ENABLE_Pin);
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <main+0x144>)
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <main+0x144>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	01c9      	lsls	r1, r1, #7
 8000b14:	430a      	orrs	r2, r1
 8000b16:	615a      	str	r2, [r3, #20]
  FX_ENABLE_GPIO_Port->ODR &= ~(FX_ENABLE_Pin);
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	492f      	ldr	r1, [pc, #188]	; (8000be0 <main+0x148>)
 8000b24:	400a      	ands	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]


  // led fade timer
  LL_TIM_EnableIT_UPDATE(TIM21);
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <main+0x14c>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff ffa6 	bl	8000a7c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM21);
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <main+0x14c>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ff4a 	bl	80009cc <LL_TIM_EnableCounter>
  TIM21->PSC = 65535;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <main+0x14c>)
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <main+0x150>)
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  TIM21->ARR = 65535;
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <main+0x14c>)
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <main+0x150>)
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  //HAL_TIM_Base_Start_IT(&htim21);

  // debounce timer
  LL_LPTIM_EnableIT_UP(LPTIM1);
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <main+0x154>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe52 	bl	80007f0 <LL_LPTIM_EnableIT_UP>
  LL_LPTIM_Enable(LPTIM1);
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <main+0x154>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fe2e 	bl	80007b0 <LL_LPTIM_Enable>
  LL_LPTIM_StartCounter(LPTIM1,LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <main+0x154>)
 8000b56:	2104      	movs	r1, #4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fe37 	bl	80007cc <LL_LPTIM_StartCounter>

  //HAL_LPTIM_Counter_Start_IT(&hlptim1, LED_PERIOD_LIMIT);
  LPTIM1->CFGR |= LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_2;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <main+0x154>)
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <main+0x154>)
 8000b64:	21e0      	movs	r1, #224	; 0xe0
 8000b66:	0109      	lsls	r1, r1, #4
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	60da      	str	r2, [r3, #12]
  LPTIM1->ARR = 65535;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <main+0x154>)
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <main+0x150>)
 8000b70:	619a      	str	r2, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_mDelay(200);
 8000b72:	20c8      	movs	r0, #200	; 0xc8
 8000b74:	f001 fc1a 	bl	80023ac <LL_mDelay>
	  TIM2->CCR1 = 0;
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 0;
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	2200      	movs	r2, #0
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM2->CCR1 |= (1<<pwm_bit_pos);
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <main+0x158>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0019      	movs	r1, r3
 8000b94:	2301      	movs	r3, #1
 8000b96:	408b      	lsls	r3, r1
 8000b98:	0019      	movs	r1, r3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 |= (1<<pwm_bit_pos);
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <main+0x158>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	0019      	movs	r1, r3
 8000bae:	2301      	movs	r3, #1
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	639a      	str	r2, [r3, #56]	; 0x38

	  pwm_bit_pos++;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <main+0x158>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <main+0x158>)
 8000bc6:	701a      	strb	r2, [r3, #0]
	  if(pwm_bit_pos > 15)
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <main+0x158>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d9d0      	bls.n	8000b72 <main+0xda>
		  pwm_bit_pos = 0;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <main+0x158>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	  LL_mDelay(200);
 8000bd6:	e7cc      	b.n	8000b72 <main+0xda>
 8000bd8:	00001fff 	.word	0x00001fff
 8000bdc:	50000800 	.word	0x50000800
 8000be0:	fffffdff 	.word	0xfffffdff
 8000be4:	40010800 	.word	0x40010800
 8000be8:	0000ffff 	.word	0x0000ffff
 8000bec:	40007c00 	.word	0x40007c00
 8000bf0:	20000020 	.word	0x20000020

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff feb1 	bl	8000960 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000bfe:	f7ff fec3 	bl	8000988 <LL_FLASH_GetLatency>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x16>
  {
  Error_Handler();  
 8000c06:	f000 f835 	bl	8000c74 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fec6 	bl	80009a0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000c14:	f7ff fdfa 	bl	800080c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	f7ff fe05 	bl	8000828 <LL_RCC_HSI_IsReady>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d1fa      	bne.n	8000c1a <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c24:	2010      	movs	r0, #16
 8000c26:	f7ff fe0f 	bl	8000848 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fe42 	bl	80008b4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff fe53 	bl	80008dc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fe66 	bl	8000908 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe19 	bl	8000874 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	f7ff fe2a 	bl	800089c <LL_RCC_GetSysClkSource>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d1fa      	bne.n	8000c44 <SystemClock_Config+0x50>
  {
  
  }
  LL_SetSystemCoreClock(16000000);
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <SystemClock_Config+0x7c>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 fbcd 	bl	80023f0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 fb2e 	bl	80012b8 <HAL_InitTick>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x70>
  {
    Error_Handler();  
 8000c60:	f000 f808 	bl	8000c74 <Error_Handler>
  };
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fe65 	bl	8000934 <LL_RCC_SetLPTIMClockSource>
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	00f42400 	.word	0x00f42400

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_MspInit+0x24>)
 8000c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x24>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_MspInit+0x24>)
 8000c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_MspInit+0x24>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0549      	lsls	r1, r1, #21
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	425a      	negs	r2, r3
 8000cbe:	4153      	adcs	r3, r2
 8000cc0:	b2db      	uxtb	r3, r3
}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	615a      	str	r2, [r3, #20]
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40010400 	.word	0x40010400

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 fafa 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint16_t interrupt_time = TIM21->CNT;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <EXTI4_15_IRQHandler+0x5c>)
 8000d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	801a      	strh	r2, [r3, #0]
	if ((interrupt_time - last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <EXTI4_15_IRQHandler+0x60>)
 8000d34:	8812      	ldrh	r2, [r2, #0]
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	2b40      	cmp	r3, #64	; 0x40
 8000d3a:	dd0f      	ble.n	8000d5c <EXTI4_15_IRQHandler+0x3c>
	{
		// toggle bypass soft switches
		CLEAN_ENABLE_GPIO_Port->ODR ^= CLEAN_ENABLE_Pin;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <EXTI4_15_IRQHandler+0x64>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <EXTI4_15_IRQHandler+0x64>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	01c9      	lsls	r1, r1, #7
 8000d46:	404a      	eors	r2, r1
 8000d48:	615a      	str	r2, [r3, #20]
		FX_ENABLE_GPIO_Port->ODR ^= FX_ENABLE_Pin;
 8000d4a:	23a0      	movs	r3, #160	; 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0089      	lsls	r1, r1, #2
 8000d58:	404a      	eors	r2, r1
 8000d5a:	615a      	str	r2, [r3, #20]
	}
	last_interrupt_time = interrupt_time;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <EXTI4_15_IRQHandler+0x60>)
 8000d5e:	1dba      	adds	r2, r7, #6
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000d64:	2010      	movs	r0, #16
 8000d66:	f7ff ff9f 	bl	8000ca8 <LL_EXTI_IsActiveFlag_0_31>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d002      	beq.n	8000d74 <EXTI4_15_IRQHandler+0x54>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f7ff ffae 	bl	8000cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	20000022 	.word	0x20000022
 8000d84:	50000800 	.word	0x50000800

08000d88 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END LPTIM1_IRQn 0 */
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <TIM21_IRQHandler+0x14>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fbc8 	bl	8001530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	20000024 	.word	0x20000024

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <SystemInit+0x64>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <SystemInit+0x64>)
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	0049      	lsls	r1, r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <SystemInit+0x64>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <SystemInit+0x64>)
 8000dc4:	4913      	ldr	r1, [pc, #76]	; (8000e14 <SystemInit+0x68>)
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <SystemInit+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <SystemInit+0x64>)
 8000dd0:	4911      	ldr	r1, [pc, #68]	; (8000e18 <SystemInit+0x6c>)
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <SystemInit+0x64>)
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <SystemInit+0x64>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	438a      	bics	r2, r1
 8000de0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <SystemInit+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <SystemInit+0x64>)
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <SystemInit+0x70>)
 8000dea:	400a      	ands	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x64>)
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <SystemInit+0x64>)
 8000df4:	490a      	ldr	r1, [pc, #40]	; (8000e20 <SystemInit+0x74>)
 8000df6:	400a      	ands	r2, r1
 8000df8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SystemInit+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SystemInit+0x78>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0512      	lsls	r2, r2, #20
 8000e06:	609a      	str	r2, [r3, #8]
#endif
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021000 	.word	0x40021000
 8000e14:	88ff400c 	.word	0x88ff400c
 8000e18:	fef6fff6 	.word	0xfef6fff6
 8000e1c:	fffbffff 	.word	0xfffbffff
 8000e20:	ff02ffff 	.word	0xff02ffff
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <LL_APB1_GRP1_EnableClock>:
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000e32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4013      	ands	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_IOP_GRP1_EnableClock>:
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <LL_IOP_GRP1_EnableClock+0x28>)
 8000e5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_IOP_GRP1_EnableClock+0x28>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <LL_IOP_GRP1_EnableClock+0x28>)
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_TIM_DisableARRPreload>:
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	4393      	bics	r3, r2
 8000e90:	001a      	movs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <LL_TIM_OC_DisableFast>:
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d00d      	beq.n	8000ecc <LL_TIM_OC_DisableFast+0x2c>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d008      	beq.n	8000ec8 <LL_TIM_OC_DisableFast+0x28>
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d101      	bne.n	8000ec4 <LL_TIM_OC_DisableFast+0x24>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e004      	b.n	8000ece <LL_TIM_OC_DisableFast+0x2e>
 8000ec4:	2306      	movs	r3, #6
 8000ec6:	e002      	b.n	8000ece <LL_TIM_OC_DisableFast+0x2e>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e000      	b.n	8000ece <LL_TIM_OC_DisableFast+0x2e>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3318      	adds	r3, #24
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	0029      	movs	r1, r5
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <LL_TIM_OC_DisableFast+0x5c>)
 8000eda:	5c5b      	ldrb	r3, [r3, r1]
 8000edc:	18d3      	adds	r3, r2, r3
 8000ede:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	0029      	movs	r1, r5
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <LL_TIM_OC_DisableFast+0x60>)
 8000ee6:	5c52      	ldrb	r2, [r2, r1]
 8000ee8:	0011      	movs	r1, r2
 8000eea:	2204      	movs	r2, #4
 8000eec:	408a      	lsls	r2, r1
 8000eee:	43d2      	mvns	r2, r2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	6023      	str	r3, [r4, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}
 8000efc:	0800248c 	.word	0x0800248c
 8000f00:	08002494 	.word	0x08002494

08000f04 <LL_TIM_OC_EnablePreload>:
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d00d      	beq.n	8000f30 <LL_TIM_OC_EnablePreload+0x2c>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d008      	beq.n	8000f2c <LL_TIM_OC_EnablePreload+0x28>
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d101      	bne.n	8000f28 <LL_TIM_OC_EnablePreload+0x24>
 8000f24:	2304      	movs	r3, #4
 8000f26:	e004      	b.n	8000f32 <LL_TIM_OC_EnablePreload+0x2e>
 8000f28:	2306      	movs	r3, #6
 8000f2a:	e002      	b.n	8000f32 <LL_TIM_OC_EnablePreload+0x2e>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e000      	b.n	8000f32 <LL_TIM_OC_EnablePreload+0x2e>
 8000f30:	2300      	movs	r3, #0
 8000f32:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3318      	adds	r3, #24
 8000f38:	001a      	movs	r2, r3
 8000f3a:	0029      	movs	r1, r5
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <LL_TIM_OC_EnablePreload+0x5c>)
 8000f3e:	5c5b      	ldrb	r3, [r3, r1]
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000f44:	6822      	ldr	r2, [r4, #0]
 8000f46:	0029      	movs	r1, r5
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <LL_TIM_OC_EnablePreload+0x60>)
 8000f4a:	5c5b      	ldrb	r3, [r3, r1]
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	2308      	movs	r3, #8
 8000f50:	408b      	lsls	r3, r1
 8000f52:	4313      	orrs	r3, r2
 8000f54:	6023      	str	r3, [r4, #0]
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	0800248c 	.word	0x0800248c
 8000f64:	08002494 	.word	0x08002494

08000f68 <LL_TIM_SetTriggerOutput>:
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2270      	movs	r2, #112	; 0x70
 8000f78:	4393      	bics	r3, r2
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	605a      	str	r2, [r3, #4]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <LL_TIM_DisableMasterSlaveMode>:
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	4393      	bics	r3, r2
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <MX_TIM2_Init>:

TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000faa:	b5b0      	push	{r4, r5, r7, lr}
 8000fac:	b08e      	sub	sp, #56	; 0x38
 8000fae:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fb0:	2528      	movs	r5, #40	; 0x28
 8000fb2:	197b      	adds	r3, r7, r5
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f001 fa4a 	bl	8002454 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000fc0:	2418      	movs	r4, #24
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	001a      	movs	r2, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f001 fa42 	bl	8002454 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2318      	movs	r3, #24
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f001 fa3b 	bl	8002454 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff ff22 	bl	8000e28 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8000fe4:	197b      	adds	r3, r7, r5
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fea:	197b      	adds	r3, r7, r5
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 64;
 8000ff0:	197b      	adds	r3, r7, r5
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ffc:	197a      	adds	r2, r7, r5
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f001 f811 	bl	800202c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff36 	bl	8000e80 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	2101      	movs	r1, #1
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff ff72 	bl	8000f04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001020:	193b      	adds	r3, r7, r4
 8001022:	2260      	movs	r2, #96	; 0x60
 8001024:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001038:	193a      	adds	r2, r7, r4
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	2101      	movs	r1, #1
 8001040:	0018      	movs	r0, r3
 8001042:	f001 f83b 	bl	80020bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	2101      	movs	r1, #1
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff27 	bl	8000ea0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	2110      	movs	r1, #16
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff53 	bl	8000f04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001064:	193a      	adds	r2, r7, r4
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	2110      	movs	r1, #16
 800106c:	0018      	movs	r0, r3
 800106e:	f001 f825 	bl	80020bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	2110      	movs	r1, #16
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ff11 	bl	8000ea0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	2100      	movs	r1, #0
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff6f 	bl	8000f68 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff7c 	bl	8000f8c <LL_TIM_DisableMasterSlaveMode>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fedd 	bl	8000e54 <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800109a:	003b      	movs	r3, r7
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010a0:	003b      	movs	r3, r7
 80010a2:	2202      	movs	r2, #2
 80010a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010a6:	003b      	movs	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ac:	003b      	movs	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010b2:	003b      	movs	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80010b8:	003b      	movs	r3, r7
 80010ba:	2202      	movs	r2, #2
 80010bc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	003a      	movs	r2, r7
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 fef3 	bl	8001eb2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80010cc:	003b      	movs	r3, r7
 80010ce:	2202      	movs	r2, #2
 80010d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010d2:	003b      	movs	r3, r7
 80010d4:	2202      	movs	r2, #2
 80010d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010d8:	003b      	movs	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010de:	003b      	movs	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e4:	003b      	movs	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80010ea:	003b      	movs	r3, r7
 80010ec:	2202      	movs	r2, #2
 80010ee:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	003a      	movs	r2, r7
 80010f2:	23a0      	movs	r3, #160	; 0xa0
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 feda 	bl	8001eb2 <LL_GPIO_Init>

}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b00e      	add	sp, #56	; 0x38
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001108 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	2308      	movs	r3, #8
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	0018      	movs	r0, r3
 8001114:	2310      	movs	r3, #16
 8001116:	001a      	movs	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	f001 f99b 	bl	8002454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111e:	003b      	movs	r3, r7
 8001120:	0018      	movs	r0, r3
 8001122:	2308      	movs	r3, #8
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f001 f994 	bl	8002454 <memset>

  htim21.Instance = TIM21;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_TIM21_Init+0xa0>)
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <MX_TIM21_Init+0xa4>)
 8001130:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 65535;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_TIM21_Init+0xa0>)
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <MX_TIM21_Init+0xa8>)
 8001136:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_TIM21_Init+0xa0>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_TIM21_Init+0xa0>)
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <MX_TIM21_Init+0xa8>)
 8001142:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_TIM21_Init+0xa0>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_TIM21_Init+0xa0>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_TIM21_Init+0xa0>)
 8001152:	0018      	movs	r0, r3
 8001154:	f000 f9c0 	bl	80014d8 <HAL_TIM_Base_Init>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 800115c:	f7ff fd8a 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	2108      	movs	r1, #8
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	0152      	lsls	r2, r2, #5
 8001168:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800116a:	187a      	adds	r2, r7, r1
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_TIM21_Init+0xa0>)
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f000 fac5 	bl	8001700 <HAL_TIM_ConfigClockSource>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800117a:	f7ff fd7b 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	003b      	movs	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	003b      	movs	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800118a:	003a      	movs	r2, r7
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_TIM21_Init+0xa0>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f000 fc7f 	bl	8001a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800119a:	f7ff fd6b 	bl	8000c74 <Error_Handler>
  }

}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b006      	add	sp, #24
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000024 	.word	0x20000024
 80011ac:	40010800 	.word	0x40010800
 80011b0:	0000ffff 	.word	0x0000ffff

080011b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x38>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10d      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011cc:	2104      	movs	r1, #4
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2014      	movs	r0, #20
 80011d8:	f000 f94c 	bl	8001474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80011dc:	2014      	movs	r0, #20
 80011de:	f000 f95e 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40021000 	.word	0x40021000

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011f6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80011f8:	4813      	ldr	r0, [pc, #76]	; (8001248 <LoopForever+0x6>)
    LDR R1, [R0]
 80011fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80011fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <LoopForever+0xa>)
    CMP R1, R2
 8001200:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001202:	d105      	bne.n	8001210 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001206:	4913      	ldr	r1, [pc, #76]	; (8001254 <LoopForever+0x12>)
    STR R1, [R0]
 8001208:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800120c:	4913      	ldr	r1, [pc, #76]	; (800125c <LoopForever+0x1a>)
    STR R1, [R0]
 800120e:	6001      	str	r1, [r0, #0]

08001210 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001212:	e003      	b.n	800121c <LoopCopyDataInit>

08001214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8001216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121a:	3104      	adds	r1, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <LoopForever+0x22>)
  ldr  r3, =_edata
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <LoopForever+0x26>)
  adds  r2, r0, r1
 8001220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001224:	d3f6      	bcc.n	8001214 <CopyDataInit>
  ldr  r2, =_sbss
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <LoopForever+0x2a>)
  b  LoopFillZerobss
 8001228:	e002      	b.n	8001230 <LoopFillZerobss>

0800122a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800122a:	2300      	movs	r3, #0
  str  r3, [r2]
 800122c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122e:	3204      	adds	r2, #4

08001230 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <LoopForever+0x2e>)
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001234:	d3f9      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001236:	f7ff fdb9 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f001 f8e7 	bl	800240c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fc2b 	bl	8000a98 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
   ldr   r0, =_estack
 8001244:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001248:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800124c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001250:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001254:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001258:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800125c:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8001260:	080024a4 	.word	0x080024a4
  ldr  r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001268:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800126c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001270:	20000064 	.word	0x20000064

08001274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_COMP_IRQHandler>
	...

08001278 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_Init+0x3c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Init+0x3c>)
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f811 	bl	80012b8 <HAL_InitTick>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d003      	beq.n	80012a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e001      	b.n	80012a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a2:	f7ff fced 	bl	8000c80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_InitTick+0x50>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	23fa      	movs	r3, #250	; 0xfa
 80012ce:	0099      	lsls	r1, r3, #2
 80012d0:	0010      	movs	r0, r2
 80012d2:	f7fe ff19 	bl	8000108 <__udivsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	0018      	movs	r0, r3
 80012da:	f000 f8f0 	bl	80014be <HAL_SYSTICK_Config>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d004      	beq.n	80012ec <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80012e2:	230f      	movs	r3, #15
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e006      	b.n	80012fa <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	2301      	movs	r3, #1
 80012f0:	425b      	negs	r3, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 f8bd 	bl	8001474 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80012fa:	230f      	movs	r3, #15
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  uwTick++;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_IncTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_IncTick+0x14>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000060 	.word	0x20000060

08001324 <NVIC_EnableIRQ>:
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	0002      	movs	r2, r0
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	001a      	movs	r2, r3
 8001336:	231f      	movs	r3, #31
 8001338:	401a      	ands	r2, r3
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <NVIC_EnableIRQ+0x28>)
 800133c:	2101      	movs	r1, #1
 800133e:	4091      	lsls	r1, r2
 8001340:	000a      	movs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}
 800134c:	e000e100 	.word	0xe000e100

08001350 <NVIC_SetPriority>:
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	0002      	movs	r2, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b7f      	cmp	r3, #127	; 0x7f
 8001364:	d932      	bls.n	80013cc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <NVIC_SetPriority+0xd4>)
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	0019      	movs	r1, r3
 800136e:	230f      	movs	r3, #15
 8001370:	400b      	ands	r3, r1
 8001372:	3b08      	subs	r3, #8
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3306      	adds	r3, #6
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	3304      	adds	r3, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1dfa      	adds	r2, r7, #7
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	0011      	movs	r1, r2
 8001386:	2203      	movs	r2, #3
 8001388:	400a      	ands	r2, r1
 800138a:	00d2      	lsls	r2, r2, #3
 800138c:	21ff      	movs	r1, #255	; 0xff
 800138e:	4091      	lsls	r1, r2
 8001390:	000a      	movs	r2, r1
 8001392:	43d2      	mvns	r2, r2
 8001394:	401a      	ands	r2, r3
 8001396:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	019b      	lsls	r3, r3, #6
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	401a      	ands	r2, r3
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	2303      	movs	r3, #3
 80013a8:	4003      	ands	r3, r0
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ae:	481d      	ldr	r0, [pc, #116]	; (8001424 <NVIC_SetPriority+0xd4>)
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	001c      	movs	r4, r3
 80013b6:	230f      	movs	r3, #15
 80013b8:	4023      	ands	r3, r4
 80013ba:	3b08      	subs	r3, #8
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	430a      	orrs	r2, r1
 80013c0:	3306      	adds	r3, #6
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	18c3      	adds	r3, r0, r3
 80013c6:	3304      	adds	r3, #4
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	e027      	b.n	800141c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013cc:	4a16      	ldr	r2, [pc, #88]	; (8001428 <NVIC_SetPriority+0xd8>)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	33c0      	adds	r3, #192	; 0xc0
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	589b      	ldr	r3, [r3, r2]
 80013dc:	1dfa      	adds	r2, r7, #7
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	0011      	movs	r1, r2
 80013e2:	2203      	movs	r2, #3
 80013e4:	400a      	ands	r2, r1
 80013e6:	00d2      	lsls	r2, r2, #3
 80013e8:	21ff      	movs	r1, #255	; 0xff
 80013ea:	4091      	lsls	r1, r2
 80013ec:	000a      	movs	r2, r1
 80013ee:	43d2      	mvns	r2, r2
 80013f0:	401a      	ands	r2, r3
 80013f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	019b      	lsls	r3, r3, #6
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	401a      	ands	r2, r3
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	0018      	movs	r0, r3
 8001402:	2303      	movs	r3, #3
 8001404:	4003      	ands	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <NVIC_SetPriority+0xd8>)
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	430a      	orrs	r2, r1
 8001416:	33c0      	adds	r3, #192	; 0xc0
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	501a      	str	r2, [r3, r0]
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b003      	add	sp, #12
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	e000e100 	.word	0xe000e100

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <SysTick_Config+0x40>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e010      	b.n	8001464 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <SysTick_Config+0x44>)
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	3a01      	subs	r2, #1
 8001448:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	2301      	movs	r3, #1
 800144c:	425b      	negs	r3, r3
 800144e:	2103      	movs	r1, #3
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff ff7d 	bl	8001350 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SysTick_Config+0x44>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x44>)
 800145e:	2207      	movs	r2, #7
 8001460:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}
 800146c:	00ffffff 	.word	0x00ffffff
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	210f      	movs	r1, #15
 8001480:	187b      	adds	r3, r7, r1
 8001482:	1c02      	adds	r2, r0, #0
 8001484:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	187b      	adds	r3, r7, r1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b25b      	sxtb	r3, r3
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <NVIC_SetPriority>
}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	0002      	movs	r2, r0
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ff37 	bl	8001324 <NVIC_EnableIRQ>
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ffaf 	bl	800142c <SysTick_Config>
 80014ce:	0003      	movs	r3, r0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e01e      	b.n	8001528 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2239      	movs	r2, #57	; 0x39
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2238      	movs	r2, #56	; 0x38
 80014fa:	2100      	movs	r1, #0
 80014fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fe57 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2239      	movs	r2, #57	; 0x39
 800150a:	2102      	movs	r1, #2
 800150c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3304      	adds	r3, #4
 8001516:	0019      	movs	r1, r3
 8001518:	0010      	movs	r0, r2
 800151a:	f000 f9d7 	bl	80018cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2239      	movs	r2, #57	; 0x39
 8001522:	2101      	movs	r1, #1
 8001524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d124      	bne.n	8001590 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	2b02      	cmp	r3, #2
 8001552:	d11d      	bne.n	8001590 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2203      	movs	r2, #3
 800155a:	4252      	negs	r2, r2
 800155c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2203      	movs	r2, #3
 800156c:	4013      	ands	r3, r2
 800156e:	d004      	beq.n	800157a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f992 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8001578:	e007      	b.n	800158a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f000 f985 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f000 f991 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	2b04      	cmp	r3, #4
 800159c:	d125      	bne.n	80015ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2204      	movs	r2, #4
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d11e      	bne.n	80015ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2205      	movs	r2, #5
 80015b2:	4252      	negs	r2, r2
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2202      	movs	r2, #2
 80015ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f965 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 80015d2:	e007      	b.n	80015e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 f958 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 f964 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2208      	movs	r2, #8
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d124      	bne.n	8001642 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2208      	movs	r2, #8
 8001600:	4013      	ands	r3, r2
 8001602:	2b08      	cmp	r3, #8
 8001604:	d11d      	bne.n	8001642 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2209      	movs	r2, #9
 800160c:	4252      	negs	r2, r2
 800160e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2204      	movs	r2, #4
 8001614:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2203      	movs	r2, #3
 800161e:	4013      	ands	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f000 f939 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 800162a:	e007      	b.n	800163c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f92c 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	0018      	movs	r0, r3
 8001638:	f000 f938 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2210      	movs	r2, #16
 800164a:	4013      	ands	r3, r2
 800164c:	2b10      	cmp	r3, #16
 800164e:	d125      	bne.n	800169c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2210      	movs	r2, #16
 8001658:	4013      	ands	r3, r2
 800165a:	2b10      	cmp	r3, #16
 800165c:	d11e      	bne.n	800169c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2211      	movs	r2, #17
 8001664:	4252      	negs	r2, r2
 8001666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2208      	movs	r2, #8
 800166c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d004      	beq.n	8001686 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f90c 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8001684:	e007      	b.n	8001696 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	0018      	movs	r0, r3
 800168a:	f000 f8ff 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f90b 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10f      	bne.n	80016ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2202      	movs	r2, #2
 80016be:	4252      	negs	r2, r2
 80016c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f8d9 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	d10f      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b40      	cmp	r3, #64	; 0x40
 80016e4:	d108      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2241      	movs	r2, #65	; 0x41
 80016ec:	4252      	negs	r2, r2
 80016ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 f8e2 	bl	80018bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2238      	movs	r2, #56	; 0x38
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_TIM_ConfigClockSource+0x18>
 8001714:	2302      	movs	r3, #2
 8001716:	e0ab      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x170>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2238      	movs	r2, #56	; 0x38
 800171c:	2101      	movs	r1, #1
 800171e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2239      	movs	r2, #57	; 0x39
 8001724:	2102      	movs	r1, #2
 8001726:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2277      	movs	r2, #119	; 0x77
 8001734:	4393      	bics	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_TIM_ConfigClockSource+0x178>)
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b40      	cmp	r3, #64	; 0x40
 800174e:	d100      	bne.n	8001752 <HAL_TIM_ConfigClockSource+0x52>
 8001750:	e06b      	b.n	800182a <HAL_TIM_ConfigClockSource+0x12a>
 8001752:	d80e      	bhi.n	8001772 <HAL_TIM_ConfigClockSource+0x72>
 8001754:	2b10      	cmp	r3, #16
 8001756:	d100      	bne.n	800175a <HAL_TIM_ConfigClockSource+0x5a>
 8001758:	e077      	b.n	800184a <HAL_TIM_ConfigClockSource+0x14a>
 800175a:	d803      	bhi.n	8001764 <HAL_TIM_ConfigClockSource+0x64>
 800175c:	2b00      	cmp	r3, #0
 800175e:	d100      	bne.n	8001762 <HAL_TIM_ConfigClockSource+0x62>
 8001760:	e073      	b.n	800184a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001762:	e07c      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001764:	2b20      	cmp	r3, #32
 8001766:	d100      	bne.n	800176a <HAL_TIM_ConfigClockSource+0x6a>
 8001768:	e06f      	b.n	800184a <HAL_TIM_ConfigClockSource+0x14a>
 800176a:	2b30      	cmp	r3, #48	; 0x30
 800176c:	d100      	bne.n	8001770 <HAL_TIM_ConfigClockSource+0x70>
 800176e:	e06c      	b.n	800184a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001770:	e075      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001772:	2b70      	cmp	r3, #112	; 0x70
 8001774:	d00e      	beq.n	8001794 <HAL_TIM_ConfigClockSource+0x94>
 8001776:	d804      	bhi.n	8001782 <HAL_TIM_ConfigClockSource+0x82>
 8001778:	2b50      	cmp	r3, #80	; 0x50
 800177a:	d036      	beq.n	80017ea <HAL_TIM_ConfigClockSource+0xea>
 800177c:	2b60      	cmp	r3, #96	; 0x60
 800177e:	d044      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001780:	e06d      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0152      	lsls	r2, r2, #5
 8001786:	4293      	cmp	r3, r2
 8001788:	d068      	beq.n	800185c <HAL_TIM_ConfigClockSource+0x15c>
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	0192      	lsls	r2, r2, #6
 800178e:	4293      	cmp	r3, r2
 8001790:	d017      	beq.n	80017c2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001792:	e064      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f000 f956 	bl	8001a54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2277      	movs	r2, #119	; 0x77
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	609a      	str	r2, [r3, #8]
      break;
 80017c0:	e04d      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f000 f93f 	bl	8001a54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	01c9      	lsls	r1, r1, #7
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]
      break;
 80017e8:	e039      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	001a      	movs	r2, r3
 80017f8:	f000 f8b2 	bl	8001960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2150      	movs	r1, #80	; 0x50
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f90c 	bl	8001a20 <TIM_ITRx_SetConfig>
      break;
 8001808:	e029      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6859      	ldr	r1, [r3, #4]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	001a      	movs	r2, r3
 8001818:	f000 f8d0 	bl	80019bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2160      	movs	r1, #96	; 0x60
 8001822:	0018      	movs	r0, r3
 8001824:	f000 f8fc 	bl	8001a20 <TIM_ITRx_SetConfig>
      break;
 8001828:	e019      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	001a      	movs	r2, r3
 8001838:	f000 f892 	bl	8001960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2140      	movs	r1, #64	; 0x40
 8001842:	0018      	movs	r0, r3
 8001844:	f000 f8ec 	bl	8001a20 <TIM_ITRx_SetConfig>
      break;
 8001848:	e009      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0019      	movs	r1, r3
 8001854:	0010      	movs	r0, r2
 8001856:	f000 f8e3 	bl	8001a20 <TIM_ITRx_SetConfig>
      break;
 800185a:	e000      	b.n	800185e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800185c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2239      	movs	r2, #57	; 0x39
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2238      	movs	r2, #56	; 0x38
 800186a:	2100      	movs	r1, #0
 800186c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}
 8001878:	ffff00ff 	.word	0xffff00ff

0800187c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}

080018cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	05db      	lsls	r3, r3, #23
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d003      	beq.n	80018ee <TIM_Base_SetConfig+0x22>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <TIM_Base_SetConfig+0x8c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d108      	bne.n	8001900 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2270      	movs	r2, #112	; 0x70
 80018f2:	4393      	bics	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	429a      	cmp	r2, r3
 8001908:	d003      	beq.n	8001912 <TIM_Base_SetConfig+0x46>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <TIM_Base_SetConfig+0x8c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <TIM_Base_SetConfig+0x90>)
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4393      	bics	r3, r2
 800192a:	001a      	movs	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	615a      	str	r2, [r3, #20]
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40010800 	.word	0x40010800
 800195c:	fffffcff 	.word	0xfffffcff

08001960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	2201      	movs	r2, #1
 8001978:	4393      	bics	r3, r2
 800197a:	001a      	movs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	22f0      	movs	r2, #240	; 0xf0
 800198a:	4393      	bics	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	220a      	movs	r2, #10
 800199c:	4393      	bics	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	621a      	str	r2, [r3, #32]
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b006      	add	sp, #24
 80019ba:	bd80      	pop	{r7, pc}

080019bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	2210      	movs	r2, #16
 80019ce:	4393      	bics	r3, r2
 80019d0:	001a      	movs	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <TIM_TI2_ConfigInputStage+0x60>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	031b      	lsls	r3, r3, #12
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	22a0      	movs	r2, #160	; 0xa0
 80019f8:	4393      	bics	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	621a      	str	r2, [r3, #32]
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b006      	add	sp, #24
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	ffff0fff 	.word	0xffff0fff

08001a20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2270      	movs	r2, #112	; 0x70
 8001a34:	4393      	bics	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	2207      	movs	r2, #7
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	609a      	str	r2, [r3, #8]
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b004      	add	sp, #16
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <TIM_ETR_SetConfig+0x3c>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	021a      	lsls	r2, r3, #8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	609a      	str	r2, [r3, #8]
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b006      	add	sp, #24
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	ffff00ff 	.word	0xffff00ff

08001a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2238      	movs	r2, #56	; 0x38
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e032      	b.n	8001b12 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2238      	movs	r2, #56	; 0x38
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2239      	movs	r2, #57	; 0x39
 8001ab8:	2102      	movs	r1, #2
 8001aba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2270      	movs	r2, #112	; 0x70
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2239      	movs	r2, #57	; 0x39
 8001b04:	2101      	movs	r1, #1
 8001b06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2238      	movs	r2, #56	; 0x38
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <LL_EXTI_EnableIT_0_31>:
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <LL_EXTI_DisableIT_0_31>:
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <LL_EXTI_DisableIT_0_31+0x20>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <LL_EXTI_DisableIT_0_31+0x20>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40010400 	.word	0x40010400

08001b60 <LL_EXTI_EnableEvent_0_31>:
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010400 	.word	0x40010400

08001b80 <LL_EXTI_DisableEvent_0_31>:
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40010400 	.word	0x40010400

08001be8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010400 	.word	0x40010400

08001c08 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40010400 	.word	0x40010400

08001c2c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c34:	230f      	movs	r3, #15
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d065      	beq.n	8001d10 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d100      	bne.n	8001c4e <LL_EXTI_Init+0x22>
 8001c4c:	e06b      	b.n	8001d26 <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d00e      	beq.n	8001c74 <LL_EXTI_Init+0x48>
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d017      	beq.n	8001c8a <LL_EXTI_Init+0x5e>
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d120      	bne.n	8001ca0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff ff8c 	bl	8001b80 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ff55 	bl	8001b1c <LL_EXTI_EnableIT_0_31>
          break;
 8001c72:	e01a      	b.n	8001caa <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ff5f 	bl	8001b3c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff ff6c 	bl	8001b60 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c88:	e00f      	b.n	8001caa <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff ff44 	bl	8001b1c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ff61 	bl	8001b60 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c9e:	e004      	b.n	8001caa <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
          break;
 8001ca8:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	799b      	ldrb	r3, [r3, #6]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d039      	beq.n	8001d26 <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	799b      	ldrb	r3, [r3, #6]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d00e      	beq.n	8001cd8 <LL_EXTI_Init+0xac>
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d017      	beq.n	8001cee <LL_EXTI_Init+0xc2>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d120      	bne.n	8001d04 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff ff9e 	bl	8001c08 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ff67 	bl	8001ba4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001cd6:	e027      	b.n	8001d28 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ff71 	bl	8001bc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff ff7e 	bl	8001be8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001cec:	e01c      	b.n	8001d28 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff ff56 	bl	8001ba4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff ff73 	bl	8001be8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d02:	e011      	b.n	8001d28 <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 8001d04:	230f      	movs	r3, #15
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
            break;
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	e00b      	b.n	8001d28 <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff ff11 	bl	8001b3c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff ff2e 	bl	8001b80 <LL_EXTI_DisableEvent_0_31>
 8001d24:	e000      	b.n	8001d28 <LL_EXTI_Init+0xfc>
      }
 8001d26:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b004      	add	sp, #16
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <LL_GPIO_SetPinMode>:
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	435a      	muls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	43db      	mvns	r3, r3
 8001d54:	400b      	ands	r3, r1
 8001d56:	001a      	movs	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	434b      	muls	r3, r1
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	434b      	muls	r3, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b004      	add	sp, #16
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <LL_GPIO_SetPinOutputType>:
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	43d2      	mvns	r2, r2
 8001d84:	401a      	ands	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	434b      	muls	r3, r1
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <LL_GPIO_SetPinSpeed>:
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6899      	ldr	r1, [r3, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	435a      	muls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	189b      	adds	r3, r3, r2
 8001db6:	43db      	mvns	r3, r3
 8001db8:	400b      	ands	r3, r1
 8001dba:	001a      	movs	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	434b      	muls	r3, r1
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	434b      	muls	r3, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b004      	add	sp, #16
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <LL_GPIO_SetPinPull>:
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68d9      	ldr	r1, [r3, #12]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	435a      	muls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	189b      	adds	r3, r3, r2
 8001df0:	43db      	mvns	r3, r3
 8001df2:	400b      	ands	r3, r1
 8001df4:	001a      	movs	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	434b      	muls	r3, r1
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	434b      	muls	r3, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	60da      	str	r2, [r3, #12]
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <LL_GPIO_SetAFPin_0_7>:
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a19      	ldr	r1, [r3, #32]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	4353      	muls	r3, r2
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4353      	muls	r3, r2
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	435a      	muls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	43db      	mvns	r3, r3
 8001e34:	400b      	ands	r3, r1
 8001e36:	001a      	movs	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	434b      	muls	r3, r1
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	434b      	muls	r3, r1
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	434b      	muls	r3, r1
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	434b      	muls	r3, r1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	621a      	str	r2, [r3, #32]
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <LL_GPIO_SetAFPin_8_15>:
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	0a12      	lsrs	r2, r2, #8
 8001e70:	4353      	muls	r3, r2
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	0a12      	lsrs	r2, r2, #8
 8001e76:	4353      	muls	r3, r2
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	0a12      	lsrs	r2, r2, #8
 8001e7c:	435a      	muls	r2, r3
 8001e7e:	0013      	movs	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	43db      	mvns	r3, r3
 8001e86:	400b      	ands	r3, r1
 8001e88:	001a      	movs	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	0a09      	lsrs	r1, r1, #8
 8001e92:	434b      	muls	r3, r1
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	0a09      	lsrs	r1, r1, #8
 8001e98:	434b      	muls	r3, r1
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	0a09      	lsrs	r1, r1, #8
 8001e9e:	434b      	muls	r3, r1
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	434b      	muls	r3, r1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ec4:	e040      	b.n	8001f48 <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4091      	lsls	r1, r2
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d032      	beq.n	8001f42 <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ff26 	bl	8001d36 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d003      	beq.n	8001efa <LL_GPIO_Init+0x48>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d106      	bne.n	8001f08 <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff ff49 	bl	8001d9a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d111      	bne.n	8001f42 <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d807      	bhi.n	8001f34 <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ff6e 	bl	8001e0e <LL_GPIO_SetAFPin_0_7>
 8001f32:	e006      	b.n	8001f42 <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff ff8b 	bl	8001e58 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	40da      	lsrs	r2, r3
 8001f50:	1e13      	subs	r3, r2, #0
 8001f52:	d1b8      	bne.n	8001ec6 <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d003      	beq.n	8001f64 <LL_GPIO_Init+0xb2>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d107      	bne.n	8001f74 <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff fefe 	bl	8001d70 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b004      	add	sp, #16
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <LL_TIM_SetPrescaler>:
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <LL_TIM_SetAutoReload>:
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}

08001fae <LL_TIM_OC_SetCompareCH1>:
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <LL_TIM_OC_SetCompareCH2>:
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <LL_TIM_OC_SetCompareCH3>:
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <LL_TIM_OC_SetCompareCH4>:
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}

0800200e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2201      	movs	r2, #1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	615a      	str	r2, [r3, #20]
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	429a      	cmp	r2, r3
 8002044:	d003      	beq.n	800204e <LL_TIM_Init+0x22>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <LL_TIM_Init+0x88>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d107      	bne.n	800205e <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2270      	movs	r2, #112	; 0x70
 8002052:	4393      	bics	r3, r2
 8002054:	001a      	movs	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	05db      	lsls	r3, r3, #23
 8002064:	429a      	cmp	r2, r3
 8002066:	d003      	beq.n	8002070 <LL_TIM_Init+0x44>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <LL_TIM_Init+0x88>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d106      	bne.n	800207e <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <LL_TIM_Init+0x8c>)
 8002074:	401a      	ands	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0011      	movs	r1, r2
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff82 	bl	8001f96 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	001a      	movs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff6e 	bl	8001f7e <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ffb2 	bl	800200e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40010800 	.word	0x40010800
 80020b8:	fffffcff 	.word	0xfffffcff

080020bc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80020c8:	2317      	movs	r3, #23
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d017      	beq.n	8002106 <LL_TIM_OC_Init+0x4a>
 80020d6:	d802      	bhi.n	80020de <LL_TIM_OC_Init+0x22>
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d009      	beq.n	80020f0 <LL_TIM_OC_Init+0x34>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80020dc:	e034      	b.n	8002148 <LL_TIM_OC_Init+0x8c>
  switch (Channel)
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	0052      	lsls	r2, r2, #1
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01a      	beq.n	800211c <LL_TIM_OC_Init+0x60>
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	0152      	lsls	r2, r2, #5
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d021      	beq.n	8002132 <LL_TIM_OC_Init+0x76>
      break;
 80020ee:	e02b      	b.n	8002148 <LL_TIM_OC_Init+0x8c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80020f0:	2317      	movs	r3, #23
 80020f2:	18fc      	adds	r4, r7, r3
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	0011      	movs	r1, r2
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 f82b 	bl	8002156 <OC1Config>
 8002100:	0003      	movs	r3, r0
 8002102:	7023      	strb	r3, [r4, #0]
      break;
 8002104:	e020      	b.n	8002148 <LL_TIM_OC_Init+0x8c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002106:	2317      	movs	r3, #23
 8002108:	18fc      	adds	r4, r7, r3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	0011      	movs	r1, r2
 8002110:	0018      	movs	r0, r3
 8002112:	f000 f867 	bl	80021e4 <OC2Config>
 8002116:	0003      	movs	r3, r0
 8002118:	7023      	strb	r3, [r4, #0]
      break;
 800211a:	e015      	b.n	8002148 <LL_TIM_OC_Init+0x8c>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800211c:	2317      	movs	r3, #23
 800211e:	18fc      	adds	r4, r7, r3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0011      	movs	r1, r2
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f8a8 	bl	800227c <OC3Config>
 800212c:	0003      	movs	r3, r0
 800212e:	7023      	strb	r3, [r4, #0]
      break;
 8002130:	e00a      	b.n	8002148 <LL_TIM_OC_Init+0x8c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002132:	2317      	movs	r3, #23
 8002134:	18fc      	adds	r4, r7, r3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f8e7 	bl	8002310 <OC4Config>
 8002142:	0003      	movs	r3, r0
 8002144:	7023      	strb	r3, [r4, #0]
      break;
 8002146:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002148:	2317      	movs	r3, #23
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	781b      	ldrb	r3, [r3, #0]
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b007      	add	sp, #28
 8002154:	bd90      	pop	{r4, r7, pc}

08002156 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	2201      	movs	r2, #1
 8002166:	4393      	bics	r3, r2
 8002168:	001a      	movs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2203      	movs	r2, #3
 8002184:	4393      	bics	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2270      	movs	r2, #112	; 0x70
 800218c:	4393      	bics	r3, r2
 800218e:	001a      	movs	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2202      	movs	r2, #2
 800219c:	4393      	bics	r3, r2
 800219e:	001a      	movs	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4393      	bics	r3, r2
 80021ae:	001a      	movs	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff feee 	bl	8001fae <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b006      	add	sp, #24
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	2210      	movs	r2, #16
 80021f4:	4393      	bics	r3, r2
 80021f6:	001a      	movs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <OC2Config+0x90>)
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <OC2Config+0x94>)
 800221a:	401a      	ands	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2220      	movs	r2, #32
 800222a:	4393      	bics	r3, r2
 800222c:	001a      	movs	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2210      	movs	r2, #16
 800223c:	4393      	bics	r3, r2
 800223e:	001a      	movs	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0011      	movs	r1, r2
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff feb1 	bl	8001fc6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b006      	add	sp, #24
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fffffcff 	.word	0xfffffcff
 8002278:	ffff8fff 	.word	0xffff8fff

0800227c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <OC3Config+0x8c>)
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2203      	movs	r2, #3
 80022a8:	4393      	bics	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2270      	movs	r2, #112	; 0x70
 80022b0:	4393      	bics	r3, r2
 80022b2:	001a      	movs	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <OC3Config+0x90>)
 80022c0:	401a      	ands	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <OC3Config+0x8c>)
 80022d0:	401a      	ands	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0011      	movs	r1, r2
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7ff fe74 	bl	8001fde <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b006      	add	sp, #24
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	fffffeff 	.word	0xfffffeff
 800230c:	fffffdff 	.word	0xfffffdff

08002310 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a1f      	ldr	r2, [pc, #124]	; (800239c <OC4Config+0x8c>)
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <OC4Config+0x90>)
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <OC4Config+0x94>)
 8002344:	401a      	ands	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <OC4Config+0x98>)
 8002354:	401a      	ands	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	031b      	lsls	r3, r3, #12
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <OC4Config+0x8c>)
 8002364:	401a      	ands	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	031b      	lsls	r3, r3, #12
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0011      	movs	r1, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff fe36 	bl	8001ff6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b006      	add	sp, #24
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	ffffefff 	.word	0xffffefff
 80023a0:	fffffcff 	.word	0xfffffcff
 80023a4:	ffff8fff 	.word	0xffff8fff
 80023a8:	ffffdfff 	.word	0xffffdfff

080023ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <LL_mDelay+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80023ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3301      	adds	r3, #1
 80023c0:	d00c      	beq.n	80023dc <LL_mDelay+0x30>
  {
    Delay++;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3301      	adds	r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80023c8:	e008      	b.n	80023dc <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <LL_mDelay+0x40>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	4013      	ands	r3, r2
 80023d4:	d002      	beq.n	80023dc <LL_mDelay+0x30>
    {
      Delay--;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3b01      	subs	r3, #1
 80023da:	607b      	str	r3, [r7, #4]
  while (Delay)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f3      	bne.n	80023ca <LL_mDelay+0x1e>
    }
  }
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <LL_SetSystemCoreClock+0x18>)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	20000000 	.word	0x20000000

0800240c <__libc_init_array>:
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	2600      	movs	r6, #0
 8002410:	4d0c      	ldr	r5, [pc, #48]	; (8002444 <__libc_init_array+0x38>)
 8002412:	4c0d      	ldr	r4, [pc, #52]	; (8002448 <__libc_init_array+0x3c>)
 8002414:	1b64      	subs	r4, r4, r5
 8002416:	10a4      	asrs	r4, r4, #2
 8002418:	42a6      	cmp	r6, r4
 800241a:	d109      	bne.n	8002430 <__libc_init_array+0x24>
 800241c:	2600      	movs	r6, #0
 800241e:	f000 f821 	bl	8002464 <_init>
 8002422:	4d0a      	ldr	r5, [pc, #40]	; (800244c <__libc_init_array+0x40>)
 8002424:	4c0a      	ldr	r4, [pc, #40]	; (8002450 <__libc_init_array+0x44>)
 8002426:	1b64      	subs	r4, r4, r5
 8002428:	10a4      	asrs	r4, r4, #2
 800242a:	42a6      	cmp	r6, r4
 800242c:	d105      	bne.n	800243a <__libc_init_array+0x2e>
 800242e:	bd70      	pop	{r4, r5, r6, pc}
 8002430:	00b3      	lsls	r3, r6, #2
 8002432:	58eb      	ldr	r3, [r5, r3]
 8002434:	4798      	blx	r3
 8002436:	3601      	adds	r6, #1
 8002438:	e7ee      	b.n	8002418 <__libc_init_array+0xc>
 800243a:	00b3      	lsls	r3, r6, #2
 800243c:	58eb      	ldr	r3, [r5, r3]
 800243e:	4798      	blx	r3
 8002440:	3601      	adds	r6, #1
 8002442:	e7f2      	b.n	800242a <__libc_init_array+0x1e>
 8002444:	0800249c 	.word	0x0800249c
 8002448:	0800249c 	.word	0x0800249c
 800244c:	0800249c 	.word	0x0800249c
 8002450:	080024a0 	.word	0x080024a0

08002454 <memset>:
 8002454:	0003      	movs	r3, r0
 8002456:	1812      	adds	r2, r2, r0
 8002458:	4293      	cmp	r3, r2
 800245a:	d100      	bne.n	800245e <memset+0xa>
 800245c:	4770      	bx	lr
 800245e:	7019      	strb	r1, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	e7f9      	b.n	8002458 <memset+0x4>

08002464 <_init>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr

08002470 <_fini>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr
