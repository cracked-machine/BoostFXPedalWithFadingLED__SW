
OverDrivePedal_SW_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800129c  0800129c  0001129c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012bc  080012bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012bc  080012bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012bc  080012bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012bc  080012bc  000112bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080012c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080012c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000319a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b29  00000000  00000000  000231c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000428  00000000  00000000  00023cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003a0  00000000  00000000  00024118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000af52  00000000  00000000  000244b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003334  00000000  00000000  0002f40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00039852  00000000  00000000  0003273e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006bf90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d98  00000000  00000000  0006c00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001284 	.word	0x08001284

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001284 	.word	0x08001284

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <LL_IOP_GRP1_EnableClock+0x28>)
 800022a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <LL_IOP_GRP1_EnableClock+0x28>)
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	430a      	orrs	r2, r1
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <LL_IOP_GRP1_EnableClock+0x28>)
 8000236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4013      	ands	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023e:	68fb      	ldr	r3, [r7, #12]
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b004      	add	sp, #16
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40021000 	.word	0x40021000

0800024c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000250:	2001      	movs	r0, #1
 8000252:	f7ff ffe5 	bl	8000220 <LL_IOP_GRP1_EnableClock>

}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <LL_RCC_MSI_Enable+0x18>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <LL_RCC_MSI_Enable+0x18>)
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	0049      	lsls	r1, r1, #1
 800026a:	430a      	orrs	r2, r1
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000

08000278 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <LL_RCC_MSI_IsReady+0x24>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	401a      	ands	r2, r3
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	429a      	cmp	r2, r3
 800028c:	d101      	bne.n	8000292 <LL_RCC_MSI_IsReady+0x1a>
 800028e:	2301      	movs	r3, #1
 8000290:	e000      	b.n	8000294 <LL_RCC_MSI_IsReady+0x1c>
 8000292:	2300      	movs	r3, #0
}
 8000294:	0018      	movs	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40021000 	.word	0x40021000

080002a0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <LL_RCC_MSI_SetRange+0x24>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <LL_RCC_MSI_SetRange+0x28>)
 80002ae:	4013      	ands	r3, r2
 80002b0:	0019      	movs	r1, r3
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <LL_RCC_MSI_SetRange+0x24>)
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	430a      	orrs	r2, r1
 80002b8:	605a      	str	r2, [r3, #4]
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b002      	add	sp, #8
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	40021000 	.word	0x40021000
 80002c8:	ffff1fff 	.word	0xffff1fff

080002cc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	021b      	lsls	r3, r3, #8
 80002da:	0a19      	lsrs	r1, r3, #8
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	061a      	lsls	r2, r3, #24
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 80002e2:	430a      	orrs	r2, r1
 80002e4:	605a      	str	r2, [r3, #4]
}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b002      	add	sp, #8
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <LL_RCC_SetSysClkSource+0x24>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	2203      	movs	r2, #3
 8000302:	4393      	bics	r3, r2
 8000304:	0019      	movs	r1, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <LL_RCC_SetSysClkSource+0x24>)
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	430a      	orrs	r2, r1
 800030c:	60da      	str	r2, [r3, #12]
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40021000 	.word	0x40021000

0800031c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <LL_RCC_GetSysClkSource+0x14>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	220c      	movs	r2, #12
 8000326:	4013      	ands	r3, r2
}
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	40021000 	.word	0x40021000

08000334 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <LL_RCC_SetAHBPrescaler+0x24>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	22f0      	movs	r2, #240	; 0xf0
 8000342:	4393      	bics	r3, r2
 8000344:	0019      	movs	r1, r3
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_RCC_SetAHBPrescaler+0x24>)
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	430a      	orrs	r2, r1
 800034c:	60da      	str	r2, [r3, #12]
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b002      	add	sp, #8
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	40021000 	.word	0x40021000

0800035c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a06      	ldr	r2, [pc, #24]	; (8000384 <LL_RCC_SetAPB1Prescaler+0x28>)
 800036a:	4013      	ands	r3, r2
 800036c:	0019      	movs	r1, r3
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	430a      	orrs	r2, r1
 8000374:	60da      	str	r2, [r3, #12]
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b002      	add	sp, #8
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40021000 	.word	0x40021000
 8000384:	fffff8ff 	.word	0xfffff8ff

08000388 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000396:	4013      	ands	r3, r2
 8000398:	0019      	movs	r1, r3
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <LL_RCC_SetAPB2Prescaler+0x24>)
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	430a      	orrs	r2, r1
 80003a0:	60da      	str	r2, [r3, #12]
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40021000 	.word	0x40021000
 80003b0:	ffffc7ff 	.word	0xffffc7ff

080003b4 <LL_APB1_GRP1_EnableClock>:
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <LL_APB1_GRP1_EnableClock+0x28>)
 80003be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <LL_APB1_GRP1_EnableClock+0x28>)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <LL_APB1_GRP1_EnableClock+0x28>)
 80003ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b004      	add	sp, #16
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_APB2_GRP1_EnableClock>:
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <LL_APB2_GRP1_EnableClock+0x28>)
 80003ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_APB2_GRP1_EnableClock+0x28>)
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <LL_APB2_GRP1_EnableClock+0x28>)
 80003f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b004      	add	sp, #16
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000

0800040c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_FLASH_SetLatency+0x24>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2201      	movs	r2, #1
 800041a:	4393      	bics	r3, r2
 800041c:	0019      	movs	r1, r3
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <LL_FLASH_SetLatency+0x24>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40022000 	.word	0x40022000

08000434 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <LL_FLASH_GetLatency+0x14>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	4013      	ands	r3, r2
}
 8000440:	0018      	movs	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40022000 	.word	0x40022000

0800044c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800045a:	4013      	ands	r3, r2
 800045c:	0019      	movs	r1, r3
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	430a      	orrs	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40007000 	.word	0x40007000
 8000474:	ffffe7ff 	.word	0xffffe7ff

08000478 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2201      	movs	r2, #1
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6a1a      	ldr	r2, [r3, #32]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	431a      	orrs	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	621a      	str	r2, [r3, #32]
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 80004b4:	b5b0      	push	{r4, r5, r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d00d      	beq.n	80004e2 <LL_TIM_OC_SetMode+0x2e>
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2b10      	cmp	r3, #16
 80004ca:	d008      	beq.n	80004de <LL_TIM_OC_SetMode+0x2a>
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d101      	bne.n	80004da <LL_TIM_OC_SetMode+0x26>
 80004d6:	2304      	movs	r3, #4
 80004d8:	e004      	b.n	80004e4 <LL_TIM_OC_SetMode+0x30>
 80004da:	2306      	movs	r3, #6
 80004dc:	e002      	b.n	80004e4 <LL_TIM_OC_SetMode+0x30>
 80004de:	2302      	movs	r3, #2
 80004e0:	e000      	b.n	80004e4 <LL_TIM_OC_SetMode+0x30>
 80004e2:	2300      	movs	r3, #0
 80004e4:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3318      	adds	r3, #24
 80004ea:	001a      	movs	r2, r3
 80004ec:	0029      	movs	r1, r5
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <LL_TIM_OC_SetMode+0x6c>)
 80004f0:	5c5b      	ldrb	r3, [r3, r1]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	001c      	movs	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	0029      	movs	r1, r5
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LL_TIM_OC_SetMode+0x70>)
 80004fc:	5c52      	ldrb	r2, [r2, r1]
 80004fe:	0011      	movs	r1, r2
 8000500:	2273      	movs	r2, #115	; 0x73
 8000502:	408a      	lsls	r2, r1
 8000504:	43d2      	mvns	r2, r2
 8000506:	401a      	ands	r2, r3
 8000508:	0029      	movs	r1, r5
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_TIM_OC_SetMode+0x70>)
 800050c:	5c5b      	ldrb	r3, [r3, r1]
 800050e:	0019      	movs	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	408b      	lsls	r3, r1
 8000514:	4313      	orrs	r3, r2
 8000516:	6023      	str	r3, [r4, #0]
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bdb0      	pop	{r4, r5, r7, pc}
 8000520:	0800129c 	.word	0x0800129c
 8000524:	080012a4 	.word	0x080012a4

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff ff57 	bl	80003e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	055b      	lsls	r3, r3, #21
 8000536:	0018      	movs	r0, r3
 8000538:	f7ff ff3c 	bl	80003b4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f868 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f7ff fe84 	bl	800024c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000544:	f000 f9bd 	bl	80008c2 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2260      	movs	r2, #96	; 0x60
 800054e:	2101      	movs	r1, #1
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff ffaf 	bl	80004b4 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2260      	movs	r2, #96	; 0x60
 800055c:	2110      	movs	r1, #16
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ffa8 	bl	80004b4 <LL_TIM_OC_SetMode>

  TIM2->ARR = 8191;
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <main+0xe0>)
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = 32768;
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	0212      	lsls	r2, r2, #8
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 32768;
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	0212      	lsls	r2, r2, #8
 800057e:	639a      	str	r2, [r3, #56]	; 0x38

  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	2101      	movs	r1, #1
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff84 	bl	8000494 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2110      	movs	r1, #16
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff7e 	bl	8000494 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM2);
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	0018      	movs	r0, r3
 800059e:	f7ff ff6b 	bl	8000478 <LL_TIM_EnableCounter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_mDelay(200);
 80005a2:	20c8      	movs	r0, #200	; 0xc8
 80005a4:	f000 fe12 	bl	80011cc <LL_mDelay>
	  TIM2->CCR1 = 0;
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2200      	movs	r2, #0
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 0;
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2200      	movs	r2, #0
 80005b6:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM2->CCR1 |= (1<<pwm_bit_pos);
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0xe4>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	0019      	movs	r1, r3
 80005c4:	2301      	movs	r3, #1
 80005c6:	408b      	lsls	r3, r1
 80005c8:	0019      	movs	r1, r3
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	430a      	orrs	r2, r1
 80005d0:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 |= (1<<pwm_bit_pos);
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	05db      	lsls	r3, r3, #23
 80005d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <main+0xe4>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	0019      	movs	r1, r3
 80005de:	2301      	movs	r3, #1
 80005e0:	408b      	lsls	r3, r1
 80005e2:	0019      	movs	r1, r3
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	430a      	orrs	r2, r1
 80005ea:	639a      	str	r2, [r3, #56]	; 0x38

	  pwm_bit_pos++;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <main+0xe4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <main+0xe4>)
 80005f6:	701a      	strb	r2, [r3, #0]
	  if(pwm_bit_pos > 15)
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <main+0xe4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d9d0      	bls.n	80005a2 <main+0x7a>
		  pwm_bit_pos = 0;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <main+0xe4>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	  LL_mDelay(200);
 8000606:	e7cc      	b.n	80005a2 <main+0x7a>
 8000608:	00001fff 	.word	0x00001fff
 800060c:	20000020 	.word	0x20000020

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff fef9 	bl	800040c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800061a:	f7ff ff0b 	bl	8000434 <LL_FLASH_GetLatency>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x16>
  {
  Error_Handler();  
 8000622:	f000 f833 	bl	800068c <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff0e 	bl	800044c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8000630:	f7ff fe14 	bl	800025c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	f7ff fe1f 	bl	8000278 <LL_RCC_MSI_IsReady>
 800063a:	0003      	movs	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1fa      	bne.n	8000636 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_5);
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fe2b 	bl	80002a0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fe3e 	bl	80002cc <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff fe6f 	bl	8000334 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff fe80 	bl	800035c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fe93 	bl	8000388 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe46 	bl	80002f4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	f7ff fe57 	bl	800031c <LL_RCC_GetSysClkSource>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d1fb      	bne.n	800066a <SystemClock_Config+0x5a>
  {
  
  }

  LL_Init1msTick(2097000);
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SystemClock_Config+0x78>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fd99 	bl	80011ac <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <SystemClock_Config+0x78>)
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fdc7 	bl	8001210 <LL_SetSystemCoreClock>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	001fff68 	.word	0x001fff68

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <HardFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <SystemInit+0x64>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <SystemInit+0x64>)
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0049      	lsls	r1, r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <SystemInit+0x64>)
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <SystemInit+0x64>)
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <SystemInit+0x68>)
 80006de:	400a      	ands	r2, r1
 80006e0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <SystemInit+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <SystemInit+0x64>)
 80006e8:	4911      	ldr	r1, [pc, #68]	; (8000730 <SystemInit+0x6c>)
 80006ea:	400a      	ands	r2, r1
 80006ec:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <SystemInit+0x64>)
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <SystemInit+0x64>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	438a      	bics	r2, r1
 80006f8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <SystemInit+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <SystemInit+0x64>)
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <SystemInit+0x70>)
 8000702:	400a      	ands	r2, r1
 8000704:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <SystemInit+0x64>)
 8000708:	68da      	ldr	r2, [r3, #12]
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <SystemInit+0x64>)
 800070c:	490a      	ldr	r1, [pc, #40]	; (8000738 <SystemInit+0x74>)
 800070e:	400a      	ands	r2, r1
 8000710:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SystemInit+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <SystemInit+0x78>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0512      	lsls	r2, r2, #20
 800071e:	609a      	str	r2, [r3, #8]
#endif
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	88ff400c 	.word	0x88ff400c
 8000730:	fef6fff6 	.word	0xfef6fff6
 8000734:	fffbffff 	.word	0xfffbffff
 8000738:	ff02ffff 	.word	0xff02ffff
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <LL_APB1_GRP1_EnableClock>:
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <LL_APB1_GRP1_EnableClock+0x28>)
 800074a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LL_APB1_GRP1_EnableClock+0x28>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	430a      	orrs	r2, r1
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <LL_APB1_GRP1_EnableClock+0x28>)
 8000756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4013      	ands	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b004      	add	sp, #16
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <LL_IOP_GRP1_EnableClock>:
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LL_IOP_GRP1_EnableClock+0x28>)
 8000776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <LL_IOP_GRP1_EnableClock+0x28>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	430a      	orrs	r2, r1
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_IOP_GRP1_EnableClock+0x28>)
 8000782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4013      	ands	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000

08000798 <LL_TIM_DisableARRPreload>:
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	4393      	bics	r3, r2
 80007a8:	001a      	movs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d00d      	beq.n	80007e4 <LL_TIM_OC_DisableFast+0x2c>
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d008      	beq.n	80007e0 <LL_TIM_OC_DisableFast+0x28>
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d101      	bne.n	80007dc <LL_TIM_OC_DisableFast+0x24>
 80007d8:	2304      	movs	r3, #4
 80007da:	e004      	b.n	80007e6 <LL_TIM_OC_DisableFast+0x2e>
 80007dc:	2306      	movs	r3, #6
 80007de:	e002      	b.n	80007e6 <LL_TIM_OC_DisableFast+0x2e>
 80007e0:	2302      	movs	r3, #2
 80007e2:	e000      	b.n	80007e6 <LL_TIM_OC_DisableFast+0x2e>
 80007e4:	2300      	movs	r3, #0
 80007e6:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3318      	adds	r3, #24
 80007ec:	001a      	movs	r2, r3
 80007ee:	0029      	movs	r1, r5
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LL_TIM_OC_DisableFast+0x5c>)
 80007f2:	5c5b      	ldrb	r3, [r3, r1]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	001c      	movs	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	0029      	movs	r1, r5
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <LL_TIM_OC_DisableFast+0x60>)
 80007fe:	5c52      	ldrb	r2, [r2, r1]
 8000800:	0011      	movs	r1, r2
 8000802:	2204      	movs	r2, #4
 8000804:	408a      	lsls	r2, r1
 8000806:	43d2      	mvns	r2, r2
 8000808:	4013      	ands	r3, r2
 800080a:	6023      	str	r3, [r4, #0]

}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bdb0      	pop	{r4, r5, r7, pc}
 8000814:	080012ac 	.word	0x080012ac
 8000818:	080012b4 	.word	0x080012b4

0800081c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800081c:	b5b0      	push	{r4, r5, r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d00d      	beq.n	8000848 <LL_TIM_OC_EnablePreload+0x2c>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b10      	cmp	r3, #16
 8000830:	d008      	beq.n	8000844 <LL_TIM_OC_EnablePreload+0x28>
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	429a      	cmp	r2, r3
 800083a:	d101      	bne.n	8000840 <LL_TIM_OC_EnablePreload+0x24>
 800083c:	2304      	movs	r3, #4
 800083e:	e004      	b.n	800084a <LL_TIM_OC_EnablePreload+0x2e>
 8000840:	2306      	movs	r3, #6
 8000842:	e002      	b.n	800084a <LL_TIM_OC_EnablePreload+0x2e>
 8000844:	2302      	movs	r3, #2
 8000846:	e000      	b.n	800084a <LL_TIM_OC_EnablePreload+0x2e>
 8000848:	2300      	movs	r3, #0
 800084a:	001d      	movs	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3318      	adds	r3, #24
 8000850:	001a      	movs	r2, r3
 8000852:	0029      	movs	r1, r5
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <LL_TIM_OC_EnablePreload+0x5c>)
 8000856:	5c5b      	ldrb	r3, [r3, r1]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	001c      	movs	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800085c:	6822      	ldr	r2, [r4, #0]
 800085e:	0029      	movs	r1, r5
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <LL_TIM_OC_EnablePreload+0x60>)
 8000862:	5c5b      	ldrb	r3, [r3, r1]
 8000864:	0019      	movs	r1, r3
 8000866:	2308      	movs	r3, #8
 8000868:	408b      	lsls	r3, r1
 800086a:	4313      	orrs	r3, r2
 800086c:	6023      	str	r3, [r4, #0]
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bdb0      	pop	{r4, r5, r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	080012ac 	.word	0x080012ac
 800087c:	080012b4 	.word	0x080012b4

08000880 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2270      	movs	r2, #112	; 0x70
 8000890:	4393      	bics	r3, r2
 8000892:	001a      	movs	r2, r3
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	605a      	str	r2, [r3, #4]
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	4393      	bics	r3, r2
 80008b4:	001a      	movs	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	609a      	str	r2, [r3, #8]
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008c2:	b5b0      	push	{r4, r5, r7, lr}
 80008c4:	b08e      	sub	sp, #56	; 0x38
 80008c6:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80008c8:	2528      	movs	r5, #40	; 0x28
 80008ca:	197b      	adds	r3, r7, r5
 80008cc:	0018      	movs	r0, r3
 80008ce:	2310      	movs	r3, #16
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f000 fcce 	bl	8001274 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80008d8:	2418      	movs	r4, #24
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2310      	movs	r3, #16
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f000 fcc6 	bl	8001274 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	003b      	movs	r3, r7
 80008ea:	0018      	movs	r0, r3
 80008ec:	2318      	movs	r3, #24
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f000 fcbf 	bl	8001274 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ff22 	bl	8000740 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000902:	197b      	adds	r3, r7, r5
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 64;
 8000908:	197b      	adds	r3, r7, r5
 800090a:	2240      	movs	r2, #64	; 0x40
 800090c:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800090e:	197b      	adds	r3, r7, r5
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000914:	197a      	adds	r2, r7, r5
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fa6b 	bl	8000df8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff ff36 	bl	8000798 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2101      	movs	r1, #1
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff ff72 	bl	800081c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2260      	movs	r2, #96	; 0x60
 800093c:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000950:	193a      	adds	r2, r7, r4
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2101      	movs	r1, #1
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fa95 	bl	8000e88 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2101      	movs	r1, #1
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff27 	bl	80007b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2110      	movs	r1, #16
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff ff53 	bl	800081c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800097c:	193a      	adds	r2, r7, r4
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2110      	movs	r1, #16
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fa7f 	bl	8000e88 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2110      	movs	r1, #16
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff11 	bl	80007b8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FORCED_ACTIVE;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2250      	movs	r2, #80	; 0x50
 800099a:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80009a2:	193a      	adds	r2, r7, r4
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	0059      	lsls	r1, r3, #1
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fa6b 	bl	8000e88 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fefb 	bl	80007b8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2100      	movs	r1, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff59 	bl	8000880 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff ff66 	bl	80008a4 <LL_TIM_DisableMasterSlaveMode>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fec7 	bl	800076c <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA10     ------> TIM2_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80009de:	003b      	movs	r3, r7
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009e4:	003b      	movs	r3, r7
 80009e6:	2202      	movs	r2, #2
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009ea:	003b      	movs	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80009fc:	003b      	movs	r3, r7
 80009fe:	2202      	movs	r2, #2
 8000a00:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	003a      	movs	r2, r7
 8000a04:	23a0      	movs	r3, #160	; 0xa0
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f937 	bl	8000c7e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a10:	003b      	movs	r3, r7
 8000a12:	2202      	movs	r2, #2
 8000a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2202      	movs	r2, #2
 8000a1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2202      	movs	r2, #2
 8000a32:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	003a      	movs	r2, r7
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 f91e 	bl	8000c7e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	00d2      	lsls	r2, r2, #3
 8000a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a50:	003b      	movs	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a56:	003b      	movs	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2205      	movs	r2, #5
 8000a66:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	003a      	movs	r2, r7
 8000a6a:	23a0      	movs	r3, #160	; 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 f904 	bl	8000c7e <LL_GPIO_Init>

}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b00e      	add	sp, #56	; 0x38
 8000a7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a86:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a88:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <LoopForever+0xa>)
    CMP R1, R2
 8000a8c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a8e:	d105      	bne.n	8000a9c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a92:	4913      	ldr	r1, [pc, #76]	; (8000ae0 <LoopForever+0x12>)
    STR R1, [R0]
 8000a94:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a96:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a98:	4913      	ldr	r1, [pc, #76]	; (8000ae8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a9a:	6001      	str	r1, [r0, #0]

08000a9c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000a9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9e:	e003      	b.n	8000aa8 <LoopCopyDataInit>

08000aa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000aa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa6:	3104      	adds	r1, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000aac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab0:	d3f6      	bcc.n	8000aa0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000ab4:	e002      	b.n	8000abc <LoopFillZerobss>

08000ab6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000ab6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ab8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aba:	3204      	adds	r2, #4

08000abc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <LoopForever+0x2e>)
  cmp  r2, r3
 8000abe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac0:	d3f9      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac2:	f7ff fdff 	bl	80006c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f000 fbb1 	bl	800122c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd2d 	bl	8000528 <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
   ldr   r0, =_estack
 8000ad0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000ad4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ad8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000adc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000ae0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ae4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ae8:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000aec:	080012c4 	.word	0x080012c4
  ldr  r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000af4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000af8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000afc:	20000024 	.word	0x20000024

08000b00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_COMP_IRQHandler>

08000b02 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	435a      	muls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	189b      	adds	r3, r3, r2
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	400b      	ands	r3, r1
 8000b22:	001a      	movs	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	434b      	muls	r3, r1
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	434b      	muls	r3, r1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	68ba      	ldr	r2, [r7, #8]
 8000b4e:	43d2      	mvns	r2, r2
 8000b50:	401a      	ands	r2, r3
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	434b      	muls	r3, r1
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	605a      	str	r2, [r3, #4]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6899      	ldr	r1, [r3, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	435a      	muls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	43db      	mvns	r3, r3
 8000b84:	400b      	ands	r3, r1
 8000b86:	001a      	movs	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	68b9      	ldr	r1, [r7, #8]
 8000b8c:	434b      	muls	r3, r1
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	434b      	muls	r3, r1
 8000b92:	431a      	orrs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	609a      	str	r2, [r3, #8]
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b004      	add	sp, #16
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68d9      	ldr	r1, [r3, #12]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	435a      	muls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	434b      	muls	r3, r1
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	434b      	muls	r3, r1
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	60da      	str	r2, [r3, #12]
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6a19      	ldr	r1, [r3, #32]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	4353      	muls	r3, r2
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	4353      	muls	r3, r2
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	435a      	muls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	400b      	ands	r3, r1
 8000c02:	001a      	movs	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	434b      	muls	r3, r1
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	434b      	muls	r3, r1
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	434b      	muls	r3, r1
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	434b      	muls	r3, r1
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b004      	add	sp, #16
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	0a12      	lsrs	r2, r2, #8
 8000c3c:	4353      	muls	r3, r2
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	0a12      	lsrs	r2, r2, #8
 8000c42:	4353      	muls	r3, r2
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	0a12      	lsrs	r2, r2, #8
 8000c48:	435a      	muls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	43db      	mvns	r3, r3
 8000c52:	400b      	ands	r3, r1
 8000c54:	001a      	movs	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	0a09      	lsrs	r1, r1, #8
 8000c5e:	434b      	muls	r3, r1
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	0a09      	lsrs	r1, r1, #8
 8000c64:	434b      	muls	r3, r1
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	0a09      	lsrs	r1, r1, #8
 8000c6a:	434b      	muls	r3, r1
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	434b      	muls	r3, r1
 8000c70:	431a      	orrs	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000c90:	e040      	b.n	8000d14 <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2101      	movs	r1, #1
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d032      	beq.n	8000d0e <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ff26 	bl	8000b02 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d003      	beq.n	8000cc6 <LL_GPIO_Init+0x48>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d106      	bne.n	8000cd4 <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff ff49 	bl	8000b66 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff5f 	bl	8000ba0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d111      	bne.n	8000d0e <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2bff      	cmp	r3, #255	; 0xff
 8000cee:	d807      	bhi.n	8000d00 <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff6e 	bl	8000bda <LL_GPIO_SetAFPin_0_7>
 8000cfe:	e006      	b.n	8000d0e <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	695a      	ldr	r2, [r3, #20]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff8b 	bl	8000c24 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	40da      	lsrs	r2, r3
 8000d1c:	1e13      	subs	r3, r2, #0
 8000d1e:	d1b8      	bne.n	8000c92 <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d003      	beq.n	8000d30 <LL_GPIO_Init+0xb2>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d107      	bne.n	8000d40 <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fefe 	bl	8000b3c <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <LL_TIM_SetPrescaler>:
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <LL_TIM_SetAutoReload>:
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <LL_TIM_OC_SetCompareCH1>:
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <LL_TIM_OC_SetCompareCH2>:
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}

08000daa <LL_TIM_OC_SetCompareCH3>:
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <LL_TIM_OC_SetCompareCH4>:
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	2201      	movs	r2, #1
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	615a      	str	r2, [r3, #20]
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d003      	beq.n	8000e1a <LL_TIM_Init+0x22>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <LL_TIM_Init+0x88>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d107      	bne.n	8000e2a <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2270      	movs	r2, #112	; 0x70
 8000e1e:	4393      	bics	r3, r2
 8000e20:	001a      	movs	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d003      	beq.n	8000e3c <LL_TIM_Init+0x44>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <LL_TIM_Init+0x88>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d106      	bne.n	8000e4a <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <LL_TIM_Init+0x8c>)
 8000e40:	401a      	ands	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff82 	bl	8000d62 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	001a      	movs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff ff6e 	bl	8000d4a <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ffb2 	bl	8000dda <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010800 	.word	0x40010800
 8000e84:	fffffcff 	.word	0xfffffcff

08000e88 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000e94:	2317      	movs	r3, #23
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d017      	beq.n	8000ed2 <LL_TIM_OC_Init+0x4a>
 8000ea2:	d802      	bhi.n	8000eaa <LL_TIM_OC_Init+0x22>
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d009      	beq.n	8000ebc <LL_TIM_OC_Init+0x34>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8000ea8:	e034      	b.n	8000f14 <LL_TIM_OC_Init+0x8c>
  switch (Channel)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0052      	lsls	r2, r2, #1
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d01a      	beq.n	8000ee8 <LL_TIM_OC_Init+0x60>
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0152      	lsls	r2, r2, #5
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d021      	beq.n	8000efe <LL_TIM_OC_Init+0x76>
      break;
 8000eba:	e02b      	b.n	8000f14 <LL_TIM_OC_Init+0x8c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000ebc:	2317      	movs	r3, #23
 8000ebe:	18fc      	adds	r4, r7, r3
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f82b 	bl	8000f22 <OC1Config>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
      break;
 8000ed0:	e020      	b.n	8000f14 <LL_TIM_OC_Init+0x8c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000ed2:	2317      	movs	r3, #23
 8000ed4:	18fc      	adds	r4, r7, r3
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 f867 	bl	8000fb0 <OC2Config>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]
      break;
 8000ee6:	e015      	b.n	8000f14 <LL_TIM_OC_Init+0x8c>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000ee8:	2317      	movs	r3, #23
 8000eea:	18fc      	adds	r4, r7, r3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f8a8 	bl	8001048 <OC3Config>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	7023      	strb	r3, [r4, #0]
      break;
 8000efc:	e00a      	b.n	8000f14 <LL_TIM_OC_Init+0x8c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000efe:	2317      	movs	r3, #23
 8000f00:	18fc      	adds	r4, r7, r3
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 f8e7 	bl	80010dc <OC4Config>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	7023      	strb	r3, [r4, #0]
      break;
 8000f12:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8000f14:	2317      	movs	r3, #23
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b007      	add	sp, #28
 8000f20:	bd90      	pop	{r4, r7, pc}

08000f22 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4393      	bics	r3, r2
 8000f34:	001a      	movs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4393      	bics	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2270      	movs	r2, #112	; 0x70
 8000f58:	4393      	bics	r3, r2
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4393      	bics	r3, r2
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4393      	bics	r3, r2
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff feee 	bl	8000d7a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b006      	add	sp, #24
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <OC2Config+0x90>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <OC2Config+0x94>)
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	4393      	bics	r3, r2
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2210      	movs	r2, #16
 8001008:	4393      	bics	r3, r2
 800100a:	001a      	movs	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4313      	orrs	r3, r2
 8001014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff feb1 	bl	8000d92 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b006      	add	sp, #24
 800103e:	bd80      	pop	{r7, pc}
 8001040:	fffffcff 	.word	0xfffffcff
 8001044:	ffff8fff 	.word	0xffff8fff

08001048 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <OC3Config+0x8c>)
 8001058:	401a      	ands	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2203      	movs	r2, #3
 8001074:	4393      	bics	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2270      	movs	r2, #112	; 0x70
 800107c:	4393      	bics	r3, r2
 800107e:	001a      	movs	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4313      	orrs	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <OC3Config+0x90>)
 800108c:	401a      	ands	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <OC3Config+0x8c>)
 800109c:	401a      	ands	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	4313      	orrs	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff fe74 	bl	8000daa <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b006      	add	sp, #24
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	fffffeff 	.word	0xfffffeff
 80010d8:	fffffdff 	.word	0xfffffdff

080010dc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <OC4Config+0x8c>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <OC4Config+0x90>)
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <OC4Config+0x94>)
 8001110:	401a      	ands	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	4313      	orrs	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <OC4Config+0x98>)
 8001120:	401a      	ands	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	031b      	lsls	r3, r3, #12
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <OC4Config+0x8c>)
 8001130:	401a      	ands	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	031b      	lsls	r3, r3, #12
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fe36 	bl	8000dc2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800115c:	2300      	movs	r3, #0
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b006      	add	sp, #24
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	ffffefff 	.word	0xffffefff
 800116c:	fffffcff 	.word	0xfffffcff
 8001170:	ffff8fff 	.word	0xffff8fff
 8001174:	ffffdfff 	.word	0xffffdfff

08001178 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7fe ffbf 	bl	8000108 <__udivsi3>
 800118a:	0003      	movs	r3, r0
 800118c:	001a      	movs	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <LL_InitTick+0x30>)
 8001190:	3a01      	subs	r2, #1
 8001192:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <LL_InitTick+0x30>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <LL_InitTick+0x30>)
 800119c:	2205      	movs	r2, #5
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	e000e010 	.word	0xe000e010

080011ac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80011b4:	23fa      	movs	r3, #250	; 0xfa
 80011b6:	009a      	lsls	r2, r3, #2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff ffdb 	bl	8001178 <LL_InitTick>
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <LL_mDelay+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80011da:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	d00c      	beq.n	80011fc <LL_mDelay+0x30>
  {
    Delay++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3301      	adds	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80011e8:	e008      	b.n	80011fc <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <LL_mDelay+0x40>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	025b      	lsls	r3, r3, #9
 80011f2:	4013      	ands	r3, r2
 80011f4:	d002      	beq.n	80011fc <LL_mDelay+0x30>
    {
      Delay--;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  while (Delay)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f3      	bne.n	80011ea <LL_mDelay+0x1e>
    }
  }
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	e000e010 	.word	0xe000e010

08001210 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <LL_SetSystemCoreClock+0x18>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000000 	.word	0x20000000

0800122c <__libc_init_array>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	2600      	movs	r6, #0
 8001230:	4d0c      	ldr	r5, [pc, #48]	; (8001264 <__libc_init_array+0x38>)
 8001232:	4c0d      	ldr	r4, [pc, #52]	; (8001268 <__libc_init_array+0x3c>)
 8001234:	1b64      	subs	r4, r4, r5
 8001236:	10a4      	asrs	r4, r4, #2
 8001238:	42a6      	cmp	r6, r4
 800123a:	d109      	bne.n	8001250 <__libc_init_array+0x24>
 800123c:	2600      	movs	r6, #0
 800123e:	f000 f821 	bl	8001284 <_init>
 8001242:	4d0a      	ldr	r5, [pc, #40]	; (800126c <__libc_init_array+0x40>)
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <__libc_init_array+0x44>)
 8001246:	1b64      	subs	r4, r4, r5
 8001248:	10a4      	asrs	r4, r4, #2
 800124a:	42a6      	cmp	r6, r4
 800124c:	d105      	bne.n	800125a <__libc_init_array+0x2e>
 800124e:	bd70      	pop	{r4, r5, r6, pc}
 8001250:	00b3      	lsls	r3, r6, #2
 8001252:	58eb      	ldr	r3, [r5, r3]
 8001254:	4798      	blx	r3
 8001256:	3601      	adds	r6, #1
 8001258:	e7ee      	b.n	8001238 <__libc_init_array+0xc>
 800125a:	00b3      	lsls	r3, r6, #2
 800125c:	58eb      	ldr	r3, [r5, r3]
 800125e:	4798      	blx	r3
 8001260:	3601      	adds	r6, #1
 8001262:	e7f2      	b.n	800124a <__libc_init_array+0x1e>
 8001264:	080012bc 	.word	0x080012bc
 8001268:	080012bc 	.word	0x080012bc
 800126c:	080012bc 	.word	0x080012bc
 8001270:	080012c0 	.word	0x080012c0

08001274 <memset>:
 8001274:	0003      	movs	r3, r0
 8001276:	1812      	adds	r2, r2, r0
 8001278:	4293      	cmp	r3, r2
 800127a:	d100      	bne.n	800127e <memset+0xa>
 800127c:	4770      	bx	lr
 800127e:	7019      	strb	r1, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	e7f9      	b.n	8001278 <memset+0x4>

08001284 <_init>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128a:	bc08      	pop	{r3}
 800128c:	469e      	mov	lr, r3
 800128e:	4770      	bx	lr

08001290 <_fini>:
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001296:	bc08      	pop	{r3}
 8001298:	469e      	mov	lr, r3
 800129a:	4770      	bx	lr
