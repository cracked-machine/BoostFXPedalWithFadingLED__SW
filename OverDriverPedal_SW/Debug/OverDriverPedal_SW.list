
OverDriverPedal_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800381c  0800381c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800381c  0800381c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000008  0800382c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800382c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5ef  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fc8  00000000  00000000  0002b61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  0002d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011c5f  00000000  00000000  0002eb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab7e  00000000  00000000  000407ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ad83  00000000  00000000  0004b36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b60f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  000b616c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037e8 	.word	0x080037e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	080037e8 	.word	0x080037e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2308      	movs	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f003 fad2 	bl	80037d8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b2a      	ldr	r3, [pc, #168]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000236:	4a2b      	ldr	r2, [pc, #172]	; (80002e4 <MX_ADC_Init+0xc4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800023a:	4b29      	ldr	r3, [pc, #164]	; (80002e0 <MX_ADC_Init+0xc0>)
 800023c:	2200      	movs	r2, #0
 800023e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000240:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	05d2      	lsls	r2, r2, #23
 8000246:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_ADC_Init+0xc0>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000250:	2200      	movs	r2, #0
 8000252:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000256:	2201      	movs	r2, #1
 8000258:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <MX_ADC_Init+0xc0>)
 800025c:	2200      	movs	r2, #0
 800025e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000262:	2220      	movs	r2, #32
 8000264:	2101      	movs	r1, #1
 8000266:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_ADC_Init+0xc0>)
 800026a:	2221      	movs	r2, #33	; 0x21
 800026c:	2100      	movs	r1, #0
 800026e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000272:	2200      	movs	r2, #0
 8000274:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000278:	22c2      	movs	r2, #194	; 0xc2
 800027a:	32ff      	adds	r2, #255	; 0xff
 800027c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000280:	222c      	movs	r2, #44	; 0x2c
 8000282:	2101      	movs	r1, #1
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000288:	2204      	movs	r2, #4
 800028a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_ADC_Init+0xc0>)
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0152      	lsls	r2, r2, #5
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_ADC_Init+0xc0>)
 800029c:	2200      	movs	r2, #0
 800029e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_ADC_Init+0xc0>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_ADC_Init+0xc0>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fd1d 	bl	8000ce8 <HAL_ADC_Init>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 80002b2:	f000 fa27 	bl	8000704 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002b6:	003b      	movs	r3, r7
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002bc:	003b      	movs	r3, r7
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0152      	lsls	r2, r2, #5
 80002c2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c4:	003a      	movs	r2, r7
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_ADC_Init+0xc0>)
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 ff1a 	bl	8001104 <HAL_ADC_ConfigChannel>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 80002d4:	f000 fa16 	bl	8000704 <Error_Handler>
  }

}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b002      	add	sp, #8
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000070 	.word	0x20000070
 80002e4:	40012400 	.word	0x40012400
 80002e8:	1c000080 	.word	0x1c000080

080002ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f4:	230c      	movs	r3, #12
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	0018      	movs	r0, r3
 80002fa:	2314      	movs	r3, #20
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f003 fa6a 	bl	80037d8 <memset>
  if(adcHandle->Instance==ADC1)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <HAL_ADC_MspInit+0xc4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d14c      	bne.n	80003a8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 8000310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000312:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	0089      	lsls	r1, r1, #2
 8000318:	430a      	orrs	r2, r1
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 800031e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 8000322:	2101      	movs	r1, #1
 8000324:	430a      	orrs	r2, r1
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 800032a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032c:	2201      	movs	r2, #1
 800032e:	4013      	ands	r3, r2
 8000330:	60bb      	str	r3, [r7, #8]
 8000332:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000334:	210c      	movs	r1, #12
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2203      	movs	r2, #3
 8000340:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000348:	187a      	adds	r2, r7, r1
 800034a:	23a0      	movs	r3, #160	; 0xa0
 800034c:	05db      	lsls	r3, r3, #23
 800034e:	0011      	movs	r1, r2
 8000350:	0018      	movs	r0, r3
 8000352:	f001 faf3 	bl	800193c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000358:	4a18      	ldr	r2, [pc, #96]	; (80003bc <HAL_ADC_MspInit+0xd0>)
 800035a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000382:	2220      	movs	r2, #32
 8000384:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800038e:	0018      	movs	r0, r3
 8000390:	f001 f91a 	bl	80015c8 <HAL_DMA_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000398:	f000 f9b4 	bl	8000704 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 80003a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b008      	add	sp, #32
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40012400 	.word	0x40012400
 80003b4:	40021000 	.word	0x40021000
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40020008 	.word	0x40020008

080003c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_DMA_Init+0x38>)
 80003c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_DMA_Init+0x38>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	430a      	orrs	r2, r1
 80003d0:	631a      	str	r2, [r3, #48]	; 0x30
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_DMA_Init+0x38>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2101      	movs	r1, #1
 80003e2:	2009      	movs	r0, #9
 80003e4:	f001 f8be 	bl	8001564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003e8:	2009      	movs	r0, #9
 80003ea:	f001 f8d0 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f003 f9e3 	bl	80037d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <MX_GPIO_Init+0xb8>)
 8000414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_GPIO_Init+0xb8>)
 8000418:	2104      	movs	r1, #4
 800041a:	430a      	orrs	r2, r1
 800041c:	62da      	str	r2, [r3, #44]	; 0x2c
 800041e:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <MX_GPIO_Init+0xb8>)
 8000420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000422:	2204      	movs	r2, #4
 8000424:	4013      	ands	r3, r2
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_GPIO_Init+0xb8>)
 800042c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_GPIO_Init+0xb8>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
 8000436:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_GPIO_Init+0xb8>)
 8000438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLEAN_ENABLE_Pin|FX_ENABLE_Pin, GPIO_PIN_RESET);
 8000442:	23c0      	movs	r3, #192	; 0xc0
 8000444:	021b      	lsls	r3, r3, #8
 8000446:	481c      	ldr	r0, [pc, #112]	; (80004b8 <MX_GPIO_Init+0xbc>)
 8000448:	2200      	movs	r2, #0
 800044a:	0019      	movs	r1, r3
 800044c:	f001 fbdc 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CLEAN_ENABLE_Pin|FX_ENABLE_Pin;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	22c0      	movs	r2, #192	; 0xc0
 8000454:	0212      	lsls	r2, r2, #8
 8000456:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2201      	movs	r2, #1
 800045c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2201      	movs	r2, #1
 8000462:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	0021      	movs	r1, r4
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046c:	000c      	movs	r4, r1
 800046e:	187b      	adds	r3, r7, r1
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <MX_GPIO_Init+0xbc>)
 8000472:	0019      	movs	r1, r3
 8000474:	0010      	movs	r0, r2
 8000476:	f001 fa61 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FOOTSW_EXTI4_Pin;
 800047a:	0021      	movs	r1, r4
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2210      	movs	r2, #16
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <MX_GPIO_Init+0xc0>)
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2201      	movs	r2, #1
 800048c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FOOTSW_EXTI4_GPIO_Port, &GPIO_InitStruct);
 800048e:	187a      	adds	r2, r7, r1
 8000490:	23a0      	movs	r3, #160	; 0xa0
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fa50 	bl	800193c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2007      	movs	r0, #7
 80004a2:	f001 f85f 	bl	8001564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004a6:	2007      	movs	r0, #7
 80004a8:	f001 f871 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b009      	add	sp, #36	; 0x24
 80004b2:	bd90      	pop	{r4, r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	50000800 	.word	0x50000800
 80004bc:	10210000 	.word	0x10210000

080004c0 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <MX_LPTIM1_Init+0x48>)
 80004c8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <MX_LPTIM1_Init+0x4c>)
 80004da:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004de:	2200      	movs	r2, #0
 80004e0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MX_LPTIM1_Init+0x44>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fbdf 	bl	8001cb4 <HAL_LPTIM_Init>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 80004fa:	f000 f903 	bl	8000704 <Error_Handler>
  }

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200000cc 	.word	0x200000cc
 8000508:	40007c00 	.word	0x40007c00
 800050c:	0000ffff 	.word	0x0000ffff

08000510 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_LPTIM_MspInit+0x38>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10e      	bne.n	8000540 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_LPTIM_MspInit+0x3c>)
 8000524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_LPTIM_MspInit+0x3c>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0609      	lsls	r1, r1, #24
 800052c:	430a      	orrs	r2, r1
 800052e:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	200d      	movs	r0, #13
 8000536:	f001 f815 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800053a:	200d      	movs	r0, #13
 800053c:	f001 f827 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40007c00 	.word	0x40007c00
 800054c:	40021000 	.word	0x40021000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fb68 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f862 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f7ff ff4e 	bl	80003fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000560:	f7ff ff2e 	bl	80003c0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000564:	f000 f9cc 	bl	8000900 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000568:	f000 fa3c 	bl	80009e4 <MX_TIM21_Init>
  MX_ADC_Init();
 800056c:	f7ff fe58 	bl	8000220 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8000570:	f7ff ffa6 	bl	80004c0 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  // start PWM outputs
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <main+0xb0>)
 8000576:	2100      	movs	r1, #0
 8000578:	0018      	movs	r0, r3
 800057a:	f002 fc13 	bl	8002da4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0xb0>)
 8000580:	2104      	movs	r1, #4
 8000582:	0018      	movs	r0, r3
 8000584:	f002 fc0e 	bl	8002da4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0xb0>)
 800058a:	2108      	movs	r1, #8
 800058c:	0018      	movs	r0, r3
 800058e:	f002 fc09 	bl	8002da4 <HAL_TIM_PWM_Start>

  // init PWM to 50% duty
  TIM2->ARR = 8191;
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <main+0xb4>)
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = 0;
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2200      	movs	r2, #0
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	2200      	movs	r2, #0
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2200      	movs	r2, #0
 80005b0:	63da      	str	r2, [r3, #60]	; 0x3c

  // debounce timer
  HAL_TIM_Base_Start_IT(&htim21);
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <main+0xb8>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 fba7 	bl	8002d08 <HAL_TIM_Base_Start_IT>

  HAL_LPTIM_Counter_Start_IT(&hlptim1, LED_PERIOD_LIMIT);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	00da      	lsls	r2, r3, #3
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0xbc>)
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fbf6 	bl	8001db4 <HAL_LPTIM_Counter_Start_IT>
  LPTIM1->CFGR |= LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_2;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0xc0>)
 80005ca:	68da      	ldr	r2, [r3, #12]
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xc0>)
 80005ce:	21e0      	movs	r1, #224	; 0xe0
 80005d0:	0109      	lsls	r1, r1, #4
 80005d2:	430a      	orrs	r2, r1
 80005d4:	60da      	str	r2, [r3, #12]


  // init bypass switch (clean signal default)
  HAL_GPIO_WritePin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin, 1);
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	01db      	lsls	r3, r3, #7
 80005da:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0xc4>)
 80005dc:	2201      	movs	r2, #1
 80005de:	0019      	movs	r1, r3
 80005e0:	f001 fb12 	bl	8001c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin, 0);
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	021b      	lsls	r3, r3, #8
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0xc4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	0019      	movs	r1, r3
 80005ee:	f001 fb0b 	bl	8001c08 <HAL_GPIO_WritePin>


  HAL_ADC_Start_DMA(&hadc, adc_data, ADC_DATA_MAX);
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <main+0xc8>)
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <main+0xcc>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fce9 	bl	8000fd0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0xae>
 8000600:	20000100 	.word	0x20000100
 8000604:	00001fff 	.word	0x00001fff
 8000608:	2000013c 	.word	0x2000013c
 800060c:	200000cc 	.word	0x200000cc
 8000610:	40007c00 	.word	0x40007c00
 8000614:	50000800 	.word	0x50000800
 8000618:	200000fc 	.word	0x200000fc
 800061c:	20000070 	.word	0x20000070

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b099      	sub	sp, #100	; 0x64
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	242c      	movs	r4, #44	; 0x2c
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2334      	movs	r3, #52	; 0x34
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 f8d1 	bl	80037d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000636:	2318      	movs	r3, #24
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f003 f8c9 	bl	80037d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000646:	003b      	movs	r3, r7
 8000648:	0018      	movs	r0, r3
 800064a:	2318      	movs	r3, #24
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f003 f8c2 	bl	80037d8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <SystemClock_Config+0xdc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <SystemClock_Config+0xe0>)
 800065a:	401a      	ands	r2, r3
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xdc>)
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	0109      	lsls	r1, r1, #4
 8000662:	430a      	orrs	r2, r1
 8000664:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2202      	movs	r2, #2
 800066c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2210      	movs	r2, #16
 8000678:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	02d2      	lsls	r2, r2, #11
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	03d2      	lsls	r2, r2, #15
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	187b      	adds	r3, r7, r1
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fcb9 	bl	8002010 <HAL_RCC_OscConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006a2:	f000 f82f 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	2118      	movs	r1, #24
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	220f      	movs	r2, #15
 80006ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2203      	movs	r2, #3
 80006b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2101      	movs	r1, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f002 f81a 	bl	8002704 <HAL_RCC_ClockConfig>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d4:	f000 f816 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80006d8:	003b      	movs	r3, r7
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80006de:	003b      	movs	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	003b      	movs	r3, r7
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 f9ba 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f0:	f000 f808 	bl	8000704 <Error_Handler>
  }
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b019      	add	sp, #100	; 0x64
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	40007000 	.word	0x40007000
 8000700:	ffffe7ff 	.word	0xffffe7ff

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_MspInit+0x24>)
 8000716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x24>)
 800071a:	2101      	movs	r1, #1
 800071c:	430a      	orrs	r2, r1
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <HAL_MspInit+0x24>)
 8000722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_MspInit+0x24>)
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	0549      	lsls	r1, r1, #21
 800072a:	430a      	orrs	r2, r1
 800072c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000760:	f000 faac 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

	uint16_t interrupt_time = TIM21->CNT;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <EXTI4_15_IRQHandler+0x58>)
 8000774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	801a      	strh	r2, [r3, #0]
	if (interrupt_time - last_interrupt_time > (adc_data[0]*2))
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <EXTI4_15_IRQHandler+0x5c>)
 8000780:	8812      	ldrh	r2, [r2, #0]
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	001a      	movs	r2, r3
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <EXTI4_15_IRQHandler+0x60>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	429a      	cmp	r2, r3
 800078e:	d90d      	bls.n	80007ac <EXTI4_15_IRQHandler+0x40>
	{
		HAL_GPIO_TogglePin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin);
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <EXTI4_15_IRQHandler+0x64>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f001 fa52 	bl	8001c42 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin);
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <EXTI4_15_IRQHandler+0x64>)
 80007a4:	0019      	movs	r1, r3
 80007a6:	0010      	movs	r0, r2
 80007a8:	f001 fa4b 	bl	8001c42 <HAL_GPIO_TogglePin>
	}
	last_interrupt_time = interrupt_time;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <EXTI4_15_IRQHandler+0x5c>)
 80007ae:	1dba      	adds	r2, r7, #6
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80007b4:	2010      	movs	r0, #16
 80007b6:	f001 fa57 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40010800 	.word	0x40010800
 80007c8:	20000024 	.word	0x20000024
 80007cc:	200000fc 	.word	0x200000fc
 80007d0:	50000800 	.word	0x50000800

080007d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <DMA1_Channel1_IRQHandler+0x14>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 ffd2 	bl	8001784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000028 	.word	0x20000028

080007ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	if(led_value < 1)
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <LPTIM1_IRQHandler+0x12>
	{
		led_fade_up = 1;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <LPTIM1_IRQHandler+0x78>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
	}
	if(led_value > LED_PERIOD_LIMIT) {
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 8000800:	881a      	ldrh	r2, [r3, #0]
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	429a      	cmp	r2, r3
 8000808:	d902      	bls.n	8000810 <LPTIM1_IRQHandler+0x24>
		led_fade_up = 0;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <LPTIM1_IRQHandler+0x78>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	}

	if(led_fade_up)
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <LPTIM1_IRQHandler+0x78>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <LPTIM1_IRQHandler+0x3a>
		led_value++;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 8000822:	801a      	strh	r2, [r3, #0]
 8000824:	e005      	b.n	8000832 <LPTIM1_IRQHandler+0x46>
	else
		led_value--;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 8000830:	801a      	strh	r2, [r3, #0]

	TIM2->CCR1 = led_value;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 8000834:	881a      	ldrh	r2, [r3, #0]
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = led_value;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 800083e:	881a      	ldrh	r2, [r3, #0]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = led_value;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <LPTIM1_IRQHandler+0x74>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <LPTIM1_IRQHandler+0x7c>)
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fb02 	bl	8001e5c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	20000026 	.word	0x20000026
 8000864:	20000000 	.word	0x20000000
 8000868:	200000cc 	.word	0x200000cc

0800086c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <TIM21_IRQHandler+0x14>)
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fab8 	bl	8002de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	2000013c 	.word	0x2000013c

08000884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <SystemInit+0x64>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <SystemInit+0x64>)
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <SystemInit+0x64>)
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <SystemInit+0x64>)
 800089c:	4913      	ldr	r1, [pc, #76]	; (80008ec <SystemInit+0x68>)
 800089e:	400a      	ands	r2, r1
 80008a0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <SystemInit+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <SystemInit+0x64>)
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <SystemInit+0x6c>)
 80008aa:	400a      	ands	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <SystemInit+0x64>)
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <SystemInit+0x64>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	438a      	bics	r2, r1
 80008b8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <SystemInit+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <SystemInit+0x64>)
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <SystemInit+0x70>)
 80008c2:	400a      	ands	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <SystemInit+0x64>)
 80008c8:	68da      	ldr	r2, [r3, #12]
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <SystemInit+0x64>)
 80008cc:	490a      	ldr	r1, [pc, #40]	; (80008f8 <SystemInit+0x74>)
 80008ce:	400a      	ands	r2, r1
 80008d0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SystemInit+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <SystemInit+0x78>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0512      	lsls	r2, r2, #20
 80008de:	609a      	str	r2, [r3, #8]
#endif
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	88ff400c 	.word	0x88ff400c
 80008f0:	fef6fff6 	.word	0xfef6fff6
 80008f4:	fffbffff 	.word	0xfffbffff
 80008f8:	ff02ffff 	.word	0xff02ffff
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	2310      	movs	r3, #16
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	2308      	movs	r3, #8
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f002 ff61 	bl	80037d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000916:	003b      	movs	r3, r7
 8000918:	0018      	movs	r0, r3
 800091a:	2310      	movs	r3, #16
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 ff5a 	bl	80037d8 <memset>

  htim2.Instance = TIM2;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_TIM2_Init+0xe0>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	05d2      	lsls	r2, r2, #23
 800092a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_TIM2_Init+0xe0>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM2_Init+0xe0>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_TIM2_Init+0xe0>)
 800093a:	2240      	movs	r2, #64	; 0x40
 800093c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_TIM2_Init+0xe0>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_TIM2_Init+0xe0>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_TIM2_Init+0xe0>)
 800094c:	0018      	movs	r0, r3
 800094e:	f002 f9fd 	bl	8002d4c <HAL_TIM_PWM_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000956:	f7ff fed5 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2110      	movs	r1, #16
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000968:	187a      	adds	r2, r7, r1
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM2_Init+0xe0>)
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f002 fecb 	bl	800370a <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000978:	f7ff fec4 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097c:	003b      	movs	r3, r7
 800097e:	2260      	movs	r2, #96	; 0x60
 8000980:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000982:	003b      	movs	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000988:	003b      	movs	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	003b      	movs	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000994:	0039      	movs	r1, r7
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_TIM2_Init+0xe0>)
 8000998:	2200      	movs	r2, #0
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fb0c 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80009a4:	f7ff feae 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a8:	0039      	movs	r1, r7
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_TIM2_Init+0xe0>)
 80009ac:	2204      	movs	r2, #4
 80009ae:	0018      	movs	r0, r3
 80009b0:	f002 fb02 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80009b8:	f7ff fea4 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009bc:	0039      	movs	r1, r7
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_TIM2_Init+0xe0>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 faf8 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80009cc:	f7ff fe9a 	bl	8000704 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <MX_TIM2_Init+0xe0>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f892 	bl	8000afc <HAL_TIM_MspPostInit>

}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000100 	.word	0x20000100

080009e4 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	2308      	movs	r3, #8
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	0018      	movs	r0, r3
 80009f0:	2310      	movs	r3, #16
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f002 feef 	bl	80037d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	003b      	movs	r3, r7
 80009fc:	0018      	movs	r0, r3
 80009fe:	2308      	movs	r3, #8
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f002 fee8 	bl	80037d8 <memset>

  htim21.Instance = TIM21;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <MX_TIM21_Init+0xa4>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 65535;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <MX_TIM21_Init+0xa8>)
 8000a12:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <MX_TIM21_Init+0xa8>)
 8000a1e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f93e 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a38:	f7ff fe64 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	0152      	lsls	r2, r2, #5
 8000a44:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000a46:	187a      	adds	r2, r7, r1
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fb6b 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000a56:	f7ff fe55 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	003b      	movs	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a66:	003a      	movs	r2, r7
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_TIM21_Init+0xa0>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 fe4c 	bl	800370a <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000a76:	f7ff fe45 	bl	8000704 <Error_Handler>
  }

}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b006      	add	sp, #24
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	2000013c 	.word	0x2000013c
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	0000ffff 	.word	0x0000ffff

08000a90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d105      	bne.n	8000ab0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_TIM_PWM_MspInit+0x28>)
 8000aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_TIM_PWM_MspInit+0x28>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x38>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10d      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2014      	movs	r0, #20
 8000ae0:	f000 fd40 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f000 fd52 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40010800 	.word	0x40010800
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	230c      	movs	r3, #12
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f002 fe62 	bl	80037d8 <memset>
  if(timHandle->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d13b      	bne.n	8000b98 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_TIM_MspPostInit+0xa4>)
 8000b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <HAL_TIM_MspPostInit+0xa4>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_TIM_MspPostInit+0xa4>)
 8000b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b30:	2201      	movs	r2, #1
 8000b32:	4013      	ands	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b38:	210c      	movs	r1, #12
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2202      	movs	r2, #2
 8000b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2202      	movs	r2, #2
 8000b56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	000c      	movs	r4, r1
 8000b5a:	187a      	adds	r2, r7, r1
 8000b5c:	23a0      	movs	r3, #160	; 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 feea 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b68:	0021      	movs	r1, r4
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	00d2      	lsls	r2, r2, #3
 8000b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2202      	movs	r2, #2
 8000b76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2205      	movs	r2, #5
 8000b88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	187a      	adds	r2, r7, r1
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 fed2 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b009      	add	sp, #36	; 0x24
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ba6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000baa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <LoopForever+0xa>)
    CMP R1, R2
 8000bb0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bb2:	d105      	bne.n	8000bc0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bb6:	4913      	ldr	r1, [pc, #76]	; (8000c04 <LoopForever+0x12>)
    STR R1, [R0]
 8000bb8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bbc:	4913      	ldr	r1, [pc, #76]	; (8000c0c <LoopForever+0x1a>)
    STR R1, [R0]
 8000bbe:	6001      	str	r1, [r0, #0]

08000bc0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bc2:	e003      	b.n	8000bcc <LoopCopyDataInit>

08000bc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000bc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bca:	3104      	adds	r1, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <LoopForever+0x22>)
  ldr  r3, =_edata
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000bd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bd4:	d3f6      	bcc.n	8000bc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000bd8:	e002      	b.n	8000be0 <LoopFillZerobss>

08000bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000bda:	2300      	movs	r3, #0
  str  r3, [r2]
 8000bdc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bde:	3204      	adds	r2, #4

08000be0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <LoopForever+0x2e>)
  cmp  r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000be4:	d3f9      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000be6:	f7ff fe4d 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 fdd1 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fcaf 	bl	8000550 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
   ldr   r0, =_estack
 8000bf4:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000bf8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000bfc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c00:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c04:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c08:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c0c:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000c10:	08003824 	.word	0x08003824
  ldr  r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c18:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000c1c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000c20:	2000017c 	.word	0x2000017c

08000c24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_COMP_IRQHandler>
	...

08000c28 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x3c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Init+0x3c>)
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f811 	bl	8000c68 <HAL_InitTick>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e001      	b.n	8000c56 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c52:	f7ff fd5d 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_InitTick+0x50>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	23fa      	movs	r3, #250	; 0xfa
 8000c7e:	0099      	lsls	r1, r3, #2
 8000c80:	0010      	movs	r0, r2
 8000c82:	f7ff fa41 	bl	8000108 <__udivsi3>
 8000c86:	0003      	movs	r3, r0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fc90 	bl	80015ae <HAL_SYSTICK_Config>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d004      	beq.n	8000c9c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e006      	b.n	8000caa <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fc5d 	bl	8001564 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000caa:	230f      	movs	r3, #15
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	781b      	ldrb	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b004      	add	sp, #16
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick++;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_IncTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <HAL_IncTick+0x14>)
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000178 	.word	0x20000178

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000178 	.word	0x20000178

08000ce8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e159      	b.n	8000fae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10a      	bne.n	8000d18 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2250      	movs	r2, #80	; 0x50
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff faea 	bl	80002ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d005      	beq.n	8000d30 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d2e:	d00b      	beq.n	8000d48 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d34:	2210      	movs	r2, #16
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2250      	movs	r2, #80	; 0x50
 8000d40:	2100      	movs	r1, #0
 8000d42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e132      	b.n	8000fae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d4c:	4a9a      	ldr	r2, [pc, #616]	; (8000fb8 <HAL_ADC_Init+0x2d0>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2202      	movs	r2, #2
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2203      	movs	r2, #3
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d108      	bne.n	8000d78 <HAL_ADC_Init+0x90>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_Init+0x90>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_ADC_Init+0x92>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d149      	bne.n	8000e12 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	23c0      	movs	r3, #192	; 0xc0
 8000d84:	061b      	lsls	r3, r3, #24
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d00b      	beq.n	8000da2 <HAL_ADC_Init+0xba>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d005      	beq.n	8000da2 <HAL_ADC_Init+0xba>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	061b      	lsls	r3, r3, #24
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d111      	bne.n	8000dc6 <HAL_ADC_Init+0xde>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	0892      	lsrs	r2, r2, #2
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6919      	ldr	r1, [r3, #16]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	e014      	b.n	8000df0 <HAL_ADC_Init+0x108>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	0892      	lsrs	r2, r2, #2
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	4b79      	ldr	r3, [pc, #484]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000ddc:	4978      	ldr	r1, [pc, #480]	; (8000fc0 <HAL_ADC_Init+0x2d8>)
 8000dde:	400a      	ands	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	4b76      	ldr	r3, [pc, #472]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	4b74      	ldr	r3, [pc, #464]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2118      	movs	r1, #24
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68d9      	ldr	r1, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e12:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000e18:	496a      	ldr	r1, [pc, #424]	; (8000fc4 <HAL_ADC_Init+0x2dc>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000e1e:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	065a      	lsls	r2, r3, #25
 8000e28:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <HAL_ADC_Init+0x2d4>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	055b      	lsls	r3, r3, #21
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d108      	bne.n	8000e4e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0549      	lsls	r1, r1, #21
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	495b      	ldr	r1, [pc, #364]	; (8000fc8 <HAL_ADC_Init+0x2e0>)
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68d9      	ldr	r1, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d101      	bne.n	8000e74 <HAL_ADC_Init+0x18c>
 8000e70:	2304      	movs	r3, #4
 8000e72:	e000      	b.n	8000e76 <HAL_ADC_Init+0x18e>
 8000e74:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e76:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2020      	movs	r0, #32
 8000e7c:	5c1b      	ldrb	r3, [r3, r0]
 8000e7e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e80:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	202c      	movs	r0, #44	; 0x2c
 8000e86:	5c1b      	ldrb	r3, [r3, r0]
 8000e88:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e8a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e90:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ea0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eae:	23c2      	movs	r3, #194	; 0xc2
 8000eb0:	33ff      	adds	r3, #255	; 0xff
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d00b      	beq.n	8000ece <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2221      	movs	r2, #33	; 0x21
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d11a      	bne.n	8000f0e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2220      	movs	r2, #32
 8000edc:	5c9b      	ldrb	r3, [r3, r2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0249      	lsls	r1, r1, #9
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	e00b      	b.n	8000f0e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efa:	2220      	movs	r2, #32
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	2201      	movs	r2, #1
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d11f      	bne.n	8000f56 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	492a      	ldr	r1, [pc, #168]	; (8000fcc <HAL_ADC_Init+0x2e4>)
 8000f22:	400a      	ands	r2, r1
 8000f24:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6919      	ldr	r1, [r3, #16]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f34:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000f3a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	e00e      	b.n	8000f74 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d107      	bne.n	8000f74 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	438a      	bics	r2, r1
 8000f72:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2107      	movs	r1, #7
 8000f80:	438a      	bics	r2, r1
 8000f82:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6959      	ldr	r1, [r3, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4393      	bics	r3, r2
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	fffffefd 	.word	0xfffffefd
 8000fbc:	40012708 	.word	0x40012708
 8000fc0:	ffc3ffff 	.word	0xffc3ffff
 8000fc4:	fdffffff 	.word	0xfdffffff
 8000fc8:	fffe0219 	.word	0xfffe0219
 8000fcc:	fffffc03 	.word	0xfffffc03

08000fd0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fdc:	2317      	movs	r3, #23
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2204      	movs	r2, #4
 8000fec:	4013      	ands	r3, r2
 8000fee:	d15e      	bne.n	80010ae <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2250      	movs	r2, #80	; 0x50
 8000ff4:	5c9b      	ldrb	r3, [r3, r2]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x2e>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e05e      	b.n	80010bc <HAL_ADC_Start_DMA+0xec>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2250      	movs	r2, #80	; 0x50
 8001002:	2101      	movs	r1, #1
 8001004:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d007      	beq.n	800101e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800100e:	2317      	movs	r3, #23
 8001010:	18fc      	adds	r4, r7, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	0018      	movs	r0, r3
 8001016:	f000 f8fb 	bl	8001210 <ADC_Enable>
 800101a:	0003      	movs	r3, r0
 800101c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800101e:	2317      	movs	r3, #23
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d146      	bne.n	80010b6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <HAL_ADC_Start_DMA+0xf4>)
 800102e:	4013      	ands	r3, r2
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	431a      	orrs	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2250      	movs	r2, #80	; 0x50
 8001044:	2100      	movs	r1, #0
 8001046:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_ADC_Start_DMA+0xf8>)
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_ADC_Start_DMA+0xfc>)
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_ADC_Start_DMA+0x100>)
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	221c      	movs	r2, #28
 8001066:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2110      	movs	r1, #16
 8001074:	430a      	orrs	r2, r1
 8001076:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2101      	movs	r1, #1
 8001084:	430a      	orrs	r2, r1
 8001086:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3340      	adds	r3, #64	; 0x40
 8001092:	0019      	movs	r1, r3
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f000 fb0e 	bl	80016b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2104      	movs	r1, #4
 80010a8:	430a      	orrs	r2, r1
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e003      	b.n	80010b6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010ae:	2317      	movs	r3, #23
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2202      	movs	r2, #2
 80010b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b6:	2317      	movs	r3, #23
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	781b      	ldrb	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b007      	add	sp, #28
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	fffff0fe 	.word	0xfffff0fe
 80010c8:	080012d1 	.word	0x080012d1
 80010cc:	08001385 	.word	0x08001385
 80010d0:	080013a3 	.word	0x080013a3

080010d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2250      	movs	r2, #80	; 0x50
 8001112:	5c9b      	ldrb	r3, [r3, r2]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x18>
 8001118:	2302      	movs	r3, #2
 800111a:	e06c      	b.n	80011f6 <HAL_ADC_ConfigChannel+0xf2>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2250      	movs	r2, #80	; 0x50
 8001120:	2101      	movs	r1, #1
 8001122:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2204      	movs	r2, #4
 800112c:	4013      	ands	r3, r2
 800112e:	d00b      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	2220      	movs	r2, #32
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2250      	movs	r2, #80	; 0x50
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e056      	b.n	80011f6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a2c      	ldr	r2, [pc, #176]	; (8001200 <HAL_ADC_ConfigChannel+0xfc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d028      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	035b      	lsls	r3, r3, #13
 800115e:	0b5a      	lsrs	r2, r3, #13
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	02db      	lsls	r3, r3, #11
 8001170:	4013      	ands	r3, r2
 8001172:	d009      	beq.n	8001188 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	0409      	lsls	r1, r1, #16
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001182:	200a      	movs	r0, #10
 8001184:	f000 f928 	bl	80013d8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d02b      	beq.n	80011ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	03c9      	lsls	r1, r1, #15
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e023      	b.n	80011ec <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	035b      	lsls	r3, r3, #13
 80011b0:	0b5b      	lsrs	r3, r3, #13
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	400a      	ands	r2, r1
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	02db      	lsls	r3, r3, #11
 80011c4:	4013      	ands	r3, r2
 80011c6:	d005      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <HAL_ADC_ConfigChannel+0x104>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	029b      	lsls	r3, r3, #10
 80011dc:	4013      	ands	r3, r2
 80011de:	d005      	beq.n	80011ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_ADC_ConfigChannel+0x100>)
 80011e6:	4909      	ldr	r1, [pc, #36]	; (800120c <HAL_ADC_ConfigChannel+0x108>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2250      	movs	r2, #80	; 0x50
 80011f0:	2100      	movs	r1, #0
 80011f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	00001001 	.word	0x00001001
 8001204:	40012708 	.word	0x40012708
 8001208:	ff7fffff 	.word	0xff7fffff
 800120c:	ffbfffff 	.word	0xffbfffff

08001210 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2203      	movs	r2, #3
 8001224:	4013      	ands	r3, r2
 8001226:	2b01      	cmp	r3, #1
 8001228:	d108      	bne.n	800123c <ADC_Enable+0x2c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	4013      	ands	r3, r2
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <ADC_Enable+0x2c>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <ADC_Enable+0x2e>
 800123c:	2300      	movs	r3, #0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d13f      	bne.n	80012c2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a20      	ldr	r2, [pc, #128]	; (80012cc <ADC_Enable+0xbc>)
 800124a:	4013      	ands	r3, r2
 800124c:	d00d      	beq.n	800126a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001252:	2210      	movs	r2, #16
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	2201      	movs	r2, #1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e02c      	b.n	80012c4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 f8ac 	bl	80013d8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001280:	f7ff fd28 	bl	8000cd4 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001288:	e014      	b.n	80012b4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800128a:	f7ff fd23 	bl	8000cd4 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b0a      	cmp	r3, #10
 8001296:	d90d      	bls.n	80012b4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	2210      	movs	r2, #16
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	2201      	movs	r2, #1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e007      	b.n	80012c4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1e3      	bne.n	800128a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b004      	add	sp, #16
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	80000017 	.word	0x80000017

080012d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	2250      	movs	r2, #80	; 0x50
 80012e4:	4013      	ands	r3, r2
 80012e6:	d141      	bne.n	800136c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	431a      	orrs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	23c0      	movs	r3, #192	; 0xc0
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4013      	ands	r3, r2
 8001302:	d12e      	bne.n	8001362 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2220      	movs	r2, #32
 8001308:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800130a:	2b00      	cmp	r3, #0
 800130c:	d129      	bne.n	8001362 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2208      	movs	r2, #8
 8001316:	4013      	ands	r3, r2
 8001318:	2b08      	cmp	r3, #8
 800131a:	d122      	bne.n	8001362 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2204      	movs	r2, #4
 8001324:	4013      	ands	r3, r2
 8001326:	d110      	bne.n	800134a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	210c      	movs	r1, #12
 8001334:	438a      	bics	r2, r1
 8001336:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	4a10      	ldr	r2, [pc, #64]	; (8001380 <ADC_DMAConvCplt+0xb0>)
 800133e:	4013      	ands	r3, r2
 8001340:	2201      	movs	r2, #1
 8001342:	431a      	orrs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
 8001348:	e00b      	b.n	8001362 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	2220      	movs	r2, #32
 8001350:	431a      	orrs	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	2201      	movs	r2, #1
 800135c:	431a      	orrs	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff feb5 	bl	80010d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800136a:	e005      	b.n	8001378 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	0010      	movs	r0, r2
 8001376:	4798      	blx	r3
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bd80      	pop	{r7, pc}
 8001380:	fffffefe 	.word	0xfffffefe

08001384 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fea5 	bl	80010e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	431a      	orrs	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	2204      	movs	r2, #4
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fe92 	bl	80010f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b004      	add	sp, #16
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <ADC_DelayMicroSecond+0x34>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	490a      	ldr	r1, [pc, #40]	; (8001410 <ADC_DelayMicroSecond+0x38>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7fe fe8e 	bl	8000108 <__udivsi3>
 80013ec:	0003      	movs	r3, r0
 80013ee:	001a      	movs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4353      	muls	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80013f6:	e002      	b.n	80013fe <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b004      	add	sp, #16
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000004 	.word	0x20000004
 8001410:	000f4240 	.word	0x000f4240

08001414 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	0002      	movs	r2, r0
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	001a      	movs	r2, r3
 8001426:	231f      	movs	r3, #31
 8001428:	401a      	ands	r2, r3
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <NVIC_EnableIRQ+0x28>)
 800142c:	2101      	movs	r1, #1
 800142e:	4091      	lsls	r1, r2
 8001430:	000a      	movs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}
 800143c:	e000e100 	.word	0xe000e100

08001440 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b7f      	cmp	r3, #127	; 0x7f
 8001454:	d932      	bls.n	80014bc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <NVIC_SetPriority+0xd4>)
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	0019      	movs	r1, r3
 800145e:	230f      	movs	r3, #15
 8001460:	400b      	ands	r3, r1
 8001462:	3b08      	subs	r3, #8
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3306      	adds	r3, #6
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	3304      	adds	r3, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	1dfa      	adds	r2, r7, #7
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	0011      	movs	r1, r2
 8001476:	2203      	movs	r2, #3
 8001478:	400a      	ands	r2, r1
 800147a:	00d2      	lsls	r2, r2, #3
 800147c:	21ff      	movs	r1, #255	; 0xff
 800147e:	4091      	lsls	r1, r2
 8001480:	000a      	movs	r2, r1
 8001482:	43d2      	mvns	r2, r2
 8001484:	401a      	ands	r2, r3
 8001486:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	22ff      	movs	r2, #255	; 0xff
 800148e:	401a      	ands	r2, r3
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	2303      	movs	r3, #3
 8001498:	4003      	ands	r3, r0
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149e:	481d      	ldr	r0, [pc, #116]	; (8001514 <NVIC_SetPriority+0xd4>)
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	001c      	movs	r4, r3
 80014a6:	230f      	movs	r3, #15
 80014a8:	4023      	ands	r3, r4
 80014aa:	3b08      	subs	r3, #8
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	430a      	orrs	r2, r1
 80014b0:	3306      	adds	r3, #6
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	18c3      	adds	r3, r0, r3
 80014b6:	3304      	adds	r3, #4
 80014b8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ba:	e027      	b.n	800150c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014bc:	4a16      	ldr	r2, [pc, #88]	; (8001518 <NVIC_SetPriority+0xd8>)
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	33c0      	adds	r3, #192	; 0xc0
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	589b      	ldr	r3, [r3, r2]
 80014cc:	1dfa      	adds	r2, r7, #7
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	0011      	movs	r1, r2
 80014d2:	2203      	movs	r2, #3
 80014d4:	400a      	ands	r2, r1
 80014d6:	00d2      	lsls	r2, r2, #3
 80014d8:	21ff      	movs	r1, #255	; 0xff
 80014da:	4091      	lsls	r1, r2
 80014dc:	000a      	movs	r2, r1
 80014de:	43d2      	mvns	r2, r2
 80014e0:	401a      	ands	r2, r3
 80014e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	019b      	lsls	r3, r3, #6
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	401a      	ands	r2, r3
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	2303      	movs	r3, #3
 80014f4:	4003      	ands	r3, r0
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <NVIC_SetPriority+0xd8>)
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	430a      	orrs	r2, r1
 8001506:	33c0      	adds	r3, #192	; 0xc0
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	501a      	str	r2, [r3, r0]
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b003      	add	sp, #12
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	e000e100 	.word	0xe000e100

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <SysTick_Config+0x40>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e010      	b.n	8001554 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <SysTick_Config+0x44>)
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	3a01      	subs	r2, #1
 8001538:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	2301      	movs	r3, #1
 800153c:	425b      	negs	r3, r3
 800153e:	2103      	movs	r1, #3
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff7d 	bl	8001440 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SysTick_Config+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x44>)
 800154e:	2207      	movs	r2, #7
 8001550:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001552:	2300      	movs	r3, #0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	00ffffff 	.word	0x00ffffff
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	210f      	movs	r1, #15
 8001570:	187b      	adds	r3, r7, r1
 8001572:	1c02      	adds	r2, r0, #0
 8001574:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	187b      	adds	r3, r7, r1
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	0011      	movs	r1, r2
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <NVIC_SetPriority>
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	0002      	movs	r2, r0
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff ff37 	bl	8001414 <NVIC_EnableIRQ>
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff ffaf 	bl	800151c <SysTick_Config>
 80015be:	0003      	movs	r3, r0
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e061      	b.n	800169e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a32      	ldr	r2, [pc, #200]	; (80016a8 <HAL_DMA_Init+0xe0>)
 80015e0:	4694      	mov	ip, r2
 80015e2:	4463      	add	r3, ip
 80015e4:	2114      	movs	r1, #20
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7fe fd8e 	bl	8000108 <__udivsi3>
 80015ec:	0003      	movs	r3, r0
 80015ee:	009a      	lsls	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <HAL_DMA_Init+0xe4>)
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2225      	movs	r2, #37	; 0x25
 80015fe:	2102      	movs	r1, #2
 8001600:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <HAL_DMA_Init+0xe8>)
 800160e:	4013      	ands	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	01db      	lsls	r3, r3, #7
 8001650:	429a      	cmp	r2, r3
 8001652:	d018      	beq.n	8001686 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_DMA_Init+0xec>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	211c      	movs	r1, #28
 800165e:	400b      	ands	r3, r1
 8001660:	210f      	movs	r1, #15
 8001662:	4099      	lsls	r1, r3
 8001664:	000b      	movs	r3, r1
 8001666:	43d9      	mvns	r1, r3
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_DMA_Init+0xec>)
 800166a:	400a      	ands	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_DMA_Init+0xec>)
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	201c      	movs	r0, #28
 800167c:	4003      	ands	r3, r0
 800167e:	409a      	lsls	r2, r3
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_DMA_Init+0xec>)
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2225      	movs	r2, #37	; 0x25
 8001690:	2101      	movs	r1, #1
 8001692:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	bffdfff8 	.word	0xbffdfff8
 80016ac:	40020000 	.word	0x40020000
 80016b0:	ffff800f 	.word	0xffff800f
 80016b4:	400200a8 	.word	0x400200a8

080016b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2224      	movs	r2, #36	; 0x24
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_DMA_Start_IT+0x24>
 80016d8:	2302      	movs	r3, #2
 80016da:	e04f      	b.n	800177c <HAL_DMA_Start_IT+0xc4>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2224      	movs	r2, #36	; 0x24
 80016e0:	2101      	movs	r1, #1
 80016e2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2225      	movs	r2, #37	; 0x25
 80016e8:	5c9b      	ldrb	r3, [r3, r2]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d13a      	bne.n	8001766 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2225      	movs	r2, #37	; 0x25
 80016f4:	2102      	movs	r1, #2
 80016f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	438a      	bics	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f8e3 	bl	80018e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	210e      	movs	r1, #14
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00f      	b.n	8001754 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2104      	movs	r1, #4
 8001740:	438a      	bics	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	210a      	movs	r1, #10
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2101      	movs	r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2224      	movs	r2, #36	; 0x24
 800176a:	2100      	movs	r1, #0
 800176c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800176e:	2317      	movs	r3, #23
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2202      	movs	r2, #2
 8001774:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001776:	2317      	movs	r3, #23
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b006      	add	sp, #24
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	221c      	movs	r2, #28
 80017a2:	4013      	ands	r3, r2
 80017a4:	2204      	movs	r2, #4
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	d026      	beq.n	80017fe <HAL_DMA_IRQHandler+0x7a>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2204      	movs	r2, #4
 80017b4:	4013      	ands	r3, r2
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	d107      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	221c      	movs	r2, #28
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2104      	movs	r1, #4
 80017e2:	4091      	lsls	r1, r2
 80017e4:	000a      	movs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d100      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x6e>
 80017f0:	e071      	b.n	80018d6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	0010      	movs	r0, r2
 80017fa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80017fc:	e06b      	b.n	80018d6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	221c      	movs	r2, #28
 8001804:	4013      	ands	r3, r2
 8001806:	2202      	movs	r2, #2
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	d02d      	beq.n	800186e <HAL_DMA_IRQHandler+0xea>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d029      	beq.n	800186e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2220      	movs	r2, #32
 8001822:	4013      	ands	r3, r2
 8001824:	d10b      	bne.n	800183e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	210a      	movs	r1, #10
 8001832:	438a      	bics	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2225      	movs	r2, #37	; 0x25
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	221c      	movs	r2, #28
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2102      	movs	r1, #2
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2224      	movs	r2, #36	; 0x24
 8001856:	2100      	movs	r1, #0
 8001858:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d039      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	0010      	movs	r0, r2
 800186a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800186c:	e033      	b.n	80018d6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	221c      	movs	r2, #28
 8001874:	4013      	ands	r3, r2
 8001876:	2208      	movs	r2, #8
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	d02a      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x154>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2208      	movs	r2, #8
 8001886:	4013      	ands	r3, r2
 8001888:	d026      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	210e      	movs	r1, #14
 8001896:	438a      	bics	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	221c      	movs	r2, #28
 80018a0:	401a      	ands	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2101      	movs	r1, #1
 80018a8:	4091      	lsls	r1, r2
 80018aa:	000a      	movs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2225      	movs	r2, #37	; 0x25
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	0010      	movs	r0, r2
 80018d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46c0      	nop			; (mov r8, r8)
}
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	221c      	movs	r2, #28
 80018f4:	401a      	ands	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	2101      	movs	r1, #1
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d108      	bne.n	8001924 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001922:	e007      	b.n	8001934 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	60da      	str	r2, [r3, #12]
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001952:	e143      	b.n	8001bdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4091      	lsls	r1, r2
 800195e:	000a      	movs	r2, r1
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x30>
 800196a:	e134      	b.n	8001bd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	58d3      	ldr	r3, [r2, r3]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2207      	movs	r2, #7
 800198e:	4013      	ands	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2107      	movs	r1, #7
 80019a8:	400b      	ands	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00b      	beq.n	80019e4 <HAL_GPIO_Init+0xa8>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	2201      	movs	r2, #1
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	43da      	mvns	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2203      	movs	r2, #3
 8001a64:	401a      	ands	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d100      	bne.n	8001ab8 <HAL_GPIO_Init+0x17c>
 8001ab6:	e08e      	b.n	8001bd6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	; (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	589b      	ldr	r3, [r3, r2]
 8001ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	23a0      	movs	r3, #160	; 0xa0
 8001aec:	05db      	lsls	r3, r3, #23
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1d2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1ce>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1ca>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x1d4>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x1d4>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x1d4>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	2103      	movs	r1, #3
 8001b14:	400a      	ands	r2, r1
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	4013      	ands	r3, r2
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	4013      	ands	r3, r2
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	035b      	lsls	r3, r3, #13
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	039b      	lsls	r3, r3, #14
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	1e13      	subs	r3, r2, #0
 8001be6:	d000      	beq.n	8001bea <HAL_GPIO_Init+0x2ae>
 8001be8:	e6b4      	b.n	8001954 <HAL_GPIO_Init+0x18>
  }
}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b006      	add	sp, #24
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	50000400 	.word	0x50000400
 8001c00:	50000800 	.word	0x50000800
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	0008      	movs	r0, r1
 8001c12:	0011      	movs	r1, r2
 8001c14:	1cbb      	adds	r3, r7, #2
 8001c16:	1c02      	adds	r2, r0, #0
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	1c7b      	adds	r3, r7, #1
 8001c1c:	1c0a      	adds	r2, r1, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001c20:	1c7b      	adds	r3, r7, #1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c28:	1cbb      	adds	r3, r7, #2
 8001c2a:	881a      	ldrh	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c32:	1cbb      	adds	r3, r7, #2
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	000a      	movs	r2, r1
 8001c4c:	1cbb      	adds	r3, r7, #2
 8001c4e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	1cbb      	adds	r3, r7, #2
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	405a      	eors	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	615a      	str	r2, [r3, #20]
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	0002      	movs	r2, r0
 8001c70:	1dbb      	adds	r3, r7, #6
 8001c72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	1dba      	adds	r2, r7, #6
 8001c7a:	8812      	ldrh	r2, [r2, #0]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d008      	beq.n	8001c92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c82:	1dba      	adds	r2, r7, #6
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f807 	bl	8001ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40010400 	.word	0x40010400

08001ca0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06c      	b.n	8001da0 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	222e      	movs	r2, #46	; 0x2e
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d107      	bne.n	8001ce2 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	222d      	movs	r2, #45	; 0x2d
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe fc17 	bl	8000510 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	222e      	movs	r2, #46	; 0x2e
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d005      	beq.n	8001d06 <HAL_LPTIM_Init+0x52>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d103      	bne.n	8001d0e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	221e      	movs	r2, #30
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_LPTIM_Init+0xf4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_LPTIM_Init+0xf8>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_LPTIM_Init+0xfc>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d30:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001d36:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001d3c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001d42:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_LPTIM_Init+0xaa>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_LPTIM_Init+0xf4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00a      	beq.n	8001d8e <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d80:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001d86:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	222e      	movs	r2, #46	; 0x2e
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	0000ffff 	.word	0x0000ffff
 8001dac:	ffff1f3f 	.word	0xffff1f3f
 8001db0:	ff19f1f8 	.word	0xff19f1f8

08001db4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	222e      	movs	r2, #46	; 0x2e
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0589      	lsls	r1, r1, #22
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d00d      	beq.n	8001df8 <HAL_LPTIM_Counter_Start_IT+0x44>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4919      	ldr	r1, [pc, #100]	; (8001e58 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2110      	movs	r1, #16
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2102      	movs	r1, #2
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	222e      	movs	r2, #46	; 0x2e
 8001e44:	2101      	movs	r1, #1
 8001e46:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40010400 	.word	0x40010400
 8001e58:	fffff1ff 	.word	0xfffff1ff

08001e5c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10e      	bne.n	8001e90 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 f888 	bl	8001fa0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d10e      	bne.n	8001ebc <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d107      	bne.n	8001ebc <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f87a 	bl	8001fb0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d107      	bne.n	8001ee8 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2204      	movs	r2, #4
 8001ede:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f86c 	bl	8001fc0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d10e      	bne.n	8001f14 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2208      	movs	r2, #8
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d107      	bne.n	8001f14 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f85e 	bl	8001fd0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d10e      	bne.n	8001f40 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d107      	bne.n	8001f40 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f850 	bl	8001fe0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d10e      	bne.n	8001f6c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2220      	movs	r2, #32
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d107      	bne.n	8001f6c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 f842 	bl	8001ff0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d10e      	bne.n	8001f98 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2240      	movs	r2, #64	; 0x40
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d107      	bne.n	8001f98 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2240      	movs	r2, #64	; 0x40
 8001f8e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f834 	bl	8002000 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	f000 fb6a 	bl	80026f8 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002024:	4bc7      	ldr	r3, [pc, #796]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	220c      	movs	r2, #12
 800202a:	4013      	ands	r3, r2
 800202c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202e:	4bc5      	ldr	r3, [pc, #788]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d100      	bne.n	8002046 <HAL_RCC_OscConfig+0x36>
 8002044:	e07d      	b.n	8002142 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d007      	beq.n	800205c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d112      	bne.n	8002078 <HAL_RCC_OscConfig+0x68>
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	025b      	lsls	r3, r3, #9
 8002058:	429a      	cmp	r2, r3
 800205a:	d10d      	bne.n	8002078 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4bb9      	ldr	r3, [pc, #740]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x5a>
 8002068:	e06a      	b.n	8002140 <HAL_RCC_OscConfig+0x130>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d166      	bne.n	8002140 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f000 fb40 	bl	80026f8 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x84>
 8002084:	4baf      	ldr	r3, [pc, #700]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4bae      	ldr	r3, [pc, #696]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0249      	lsls	r1, r1, #9
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e027      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	23a0      	movs	r3, #160	; 0xa0
 800209a:	02db      	lsls	r3, r3, #11
 800209c:	429a      	cmp	r2, r3
 800209e:	d10e      	bne.n	80020be <HAL_RCC_OscConfig+0xae>
 80020a0:	4ba8      	ldr	r3, [pc, #672]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4ba7      	ldr	r3, [pc, #668]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	02c9      	lsls	r1, r1, #11
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	4ba5      	ldr	r3, [pc, #660]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4ba4      	ldr	r3, [pc, #656]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0249      	lsls	r1, r1, #9
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e012      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020be:	4ba1      	ldr	r3, [pc, #644]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4ba0      	ldr	r3, [pc, #640]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020c4:	49a0      	ldr	r1, [pc, #640]	; (8002348 <HAL_RCC_OscConfig+0x338>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	4013      	ands	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4b9a      	ldr	r3, [pc, #616]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b99      	ldr	r3, [pc, #612]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020de:	499b      	ldr	r1, [pc, #620]	; (800234c <HAL_RCC_OscConfig+0x33c>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d014      	beq.n	8002116 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe fdf2 	bl	8000cd4 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f6:	f7fe fded 	bl	8000cd4 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e2f7      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002108:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0xe6>
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fddd 	bl	8000cd4 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7fe fdd8 	bl	8000cd4 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2e2      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002132:	4b84      	ldr	r3, [pc, #528]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	029b      	lsls	r3, r3, #10
 800213a:	4013      	ands	r3, r2
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x110>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d100      	bne.n	800214e <HAL_RCC_OscConfig+0x13e>
 800214c:	e098      	b.n	8002280 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	2220      	movs	r2, #32
 8002158:	4013      	ands	r3, r2
 800215a:	d009      	beq.n	8002170 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b78      	ldr	r3, [pc, #480]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002162:	2120      	movs	r1, #32
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	2220      	movs	r2, #32
 800216c:	4393      	bics	r3, r2
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b04      	cmp	r3, #4
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d13d      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1e8>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d13a      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002182:	4b70      	ldr	r3, [pc, #448]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2204      	movs	r2, #4
 8002188:	4013      	ands	r3, r2
 800218a:	d004      	beq.n	8002196 <HAL_RCC_OscConfig+0x186>
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e2b0      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a6d      	ldr	r2, [pc, #436]	; (8002350 <HAL_RCC_OscConfig+0x340>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	021a      	lsls	r2, r3, #8
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2209      	movs	r2, #9
 80021b2:	4393      	bics	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80021b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f000 fbcb 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80021c2:	0001      	movs	r1, r0
 80021c4:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	220f      	movs	r2, #15
 80021cc:	4013      	ands	r3, r2
 80021ce:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HAL_RCC_OscConfig+0x344>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	000a      	movs	r2, r1
 80021d4:	40da      	lsrs	r2, r3
 80021d6:	4b60      	ldr	r3, [pc, #384]	; (8002358 <HAL_RCC_OscConfig+0x348>)
 80021d8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80021da:	2513      	movs	r5, #19
 80021dc:	197c      	adds	r4, r7, r5
 80021de:	2000      	movs	r0, #0
 80021e0:	f7fe fd42 	bl	8000c68 <HAL_InitTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80021e8:	197b      	adds	r3, r7, r5
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d047      	beq.n	8002280 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80021f0:	2313      	movs	r3, #19
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	e27f      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d027      	beq.n	800224e <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021fe:	4b51      	ldr	r3, [pc, #324]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2209      	movs	r2, #9
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fd60 	bl	8000cd4 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fd5b 	bl	8000cd4 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e265      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800222c:	4b45      	ldr	r3, [pc, #276]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2204      	movs	r2, #4
 8002232:	4013      	ands	r3, r2
 8002234:	d0f1      	beq.n	800221a <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a45      	ldr	r2, [pc, #276]	; (8002350 <HAL_RCC_OscConfig+0x340>)
 800223c:	4013      	ands	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002254:	2101      	movs	r1, #1
 8002256:	438a      	bics	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fd3b 	bl	8000cd4 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7fe fd36 	bl	8000cd4 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e240      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2204      	movs	r2, #4
 800227c:	4013      	ands	r3, r2
 800227e:	d1f1      	bne.n	8002264 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	4013      	ands	r3, r2
 8002288:	d100      	bne.n	800228c <HAL_RCC_OscConfig+0x27c>
 800228a:	e09e      	b.n	80023ca <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d13f      	bne.n	8002312 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x29a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e226      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a2b      	ldr	r2, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x34c>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	0a19      	lsrs	r1, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	061a      	lsls	r2, r3, #24
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	0b5b      	lsrs	r3, r3, #13
 80022d8:	3301      	adds	r3, #1
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	0212      	lsls	r2, r2, #8
 80022de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	210f      	movs	r1, #15
 80022e8:	400b      	ands	r3, r1
 80022ea:	491a      	ldr	r1, [pc, #104]	; (8002354 <HAL_RCC_OscConfig+0x344>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCC_OscConfig+0x348>)
 80022f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80022f4:	2513      	movs	r5, #19
 80022f6:	197c      	adds	r4, r7, r5
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7fe fcb5 	bl	8000c68 <HAL_InitTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002302:	197b      	adds	r3, r7, r5
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d05f      	beq.n	80023ca <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800230a:	2313      	movs	r3, #19
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	e1f2      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d03d      	beq.n	8002396 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0049      	lsls	r1, r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fcd4 	bl	8000cd4 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002330:	e016      	b.n	8002360 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002332:	f7fe fccf 	bl	8000cd4 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d90f      	bls.n	8002360 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1d9      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
 8002344:	40021000 	.word	0x40021000
 8002348:	fffeffff 	.word	0xfffeffff
 800234c:	fffbffff 	.word	0xfffbffff
 8002350:	ffffe0ff 	.word	0xffffe0ff
 8002354:	08003800 	.word	0x08003800
 8002358:	20000004 	.word	0x20000004
 800235c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002360:	4bca      	ldr	r3, [pc, #808]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d0e2      	beq.n	8002332 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236c:	4bc7      	ldr	r3, [pc, #796]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4ac7      	ldr	r2, [pc, #796]	; (8002690 <HAL_RCC_OscConfig+0x680>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	4bc4      	ldr	r3, [pc, #784]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002380:	4bc2      	ldr	r3, [pc, #776]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	0a19      	lsrs	r1, r3, #8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	061a      	lsls	r2, r3, #24
 800238e:	4bbf      	ldr	r3, [pc, #764]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	e019      	b.n	80023ca <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002396:	4bbd      	ldr	r3, [pc, #756]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4bbc      	ldr	r3, [pc, #752]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800239c:	49bd      	ldr	r1, [pc, #756]	; (8002694 <HAL_RCC_OscConfig+0x684>)
 800239e:	400a      	ands	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fc97 	bl	8000cd4 <HAL_GetTick>
 80023a6:	0003      	movs	r3, r0
 80023a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ac:	f7fe fc92 	bl	8000cd4 <HAL_GetTick>
 80023b0:	0002      	movs	r2, r0
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e19c      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023be:	4bb3      	ldr	r3, [pc, #716]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	4013      	ands	r3, r2
 80023d2:	d036      	beq.n	8002442 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d019      	beq.n	8002410 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023dc:	4bab      	ldr	r3, [pc, #684]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80023de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e0:	4baa      	ldr	r3, [pc, #680]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80023e2:	2101      	movs	r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fc74 	bl	8000cd4 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7fe fc6f 	bl	8000cd4 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e179      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002404:	4ba1      	ldr	r3, [pc, #644]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d0f1      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3e2>
 800240e:	e018      	b.n	8002442 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b9e      	ldr	r3, [pc, #632]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002414:	4b9d      	ldr	r3, [pc, #628]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fc5a 	bl	8000cd4 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002426:	f7fe fc55 	bl	8000cd4 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e15f      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002438:	4b94      	ldr	r3, [pc, #592]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800243a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d1f1      	bne.n	8002426 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d100      	bne.n	800244e <HAL_RCC_OscConfig+0x43e>
 800244c:	e0af      	b.n	80025ae <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2323      	movs	r3, #35	; 0x23
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b8d      	ldr	r3, [pc, #564]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	055b      	lsls	r3, r3, #21
 800245e:	4013      	ands	r3, r2
 8002460:	d10a      	bne.n	8002478 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b8a      	ldr	r3, [pc, #552]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002466:	4b89      	ldr	r3, [pc, #548]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0549      	lsls	r1, r1, #21
 800246c:	430a      	orrs	r2, r1
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002470:	2323      	movs	r3, #35	; 0x23
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	4b87      	ldr	r3, [pc, #540]	; (8002698 <HAL_RCC_OscConfig+0x688>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4013      	ands	r3, r2
 8002482:	d11a      	bne.n	80024ba <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002484:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCC_OscConfig+0x688>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b83      	ldr	r3, [pc, #524]	; (8002698 <HAL_RCC_OscConfig+0x688>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	0049      	lsls	r1, r1, #1
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fc1f 	bl	8000cd4 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe fc1a 	bl	8000cd4 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e124      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b7a      	ldr	r3, [pc, #488]	; (8002698 <HAL_RCC_OscConfig+0x688>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4c6>
 80024c6:	4b71      	ldr	r3, [pc, #452]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80024c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ca:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0049      	lsls	r1, r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	651a      	str	r2, [r3, #80]	; 0x50
 80024d4:	e031      	b.n	800253a <HAL_RCC_OscConfig+0x52a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4e8>
 80024de:	4b6b      	ldr	r3, [pc, #428]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80024e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80024e4:	496b      	ldr	r1, [pc, #428]	; (8002694 <HAL_RCC_OscConfig+0x684>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	651a      	str	r2, [r3, #80]	; 0x50
 80024ea:	4b68      	ldr	r3, [pc, #416]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80024ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80024f0:	496a      	ldr	r1, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x68c>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	651a      	str	r2, [r3, #80]	; 0x50
 80024f6:	e020      	b.n	800253a <HAL_RCC_OscConfig+0x52a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	23a0      	movs	r3, #160	; 0xa0
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	429a      	cmp	r2, r3
 8002502:	d10e      	bne.n	8002522 <HAL_RCC_OscConfig+0x512>
 8002504:	4b61      	ldr	r3, [pc, #388]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002508:	4b60      	ldr	r3, [pc, #384]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	00c9      	lsls	r1, r1, #3
 800250e:	430a      	orrs	r2, r1
 8002510:	651a      	str	r2, [r3, #80]	; 0x50
 8002512:	4b5e      	ldr	r3, [pc, #376]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0049      	lsls	r1, r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	651a      	str	r2, [r3, #80]	; 0x50
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x52a>
 8002522:	4b5a      	ldr	r3, [pc, #360]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002526:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002528:	495a      	ldr	r1, [pc, #360]	; (8002694 <HAL_RCC_OscConfig+0x684>)
 800252a:	400a      	ands	r2, r1
 800252c:	651a      	str	r2, [r3, #80]	; 0x50
 800252e:	4b57      	ldr	r3, [pc, #348]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002532:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002534:	4959      	ldr	r1, [pc, #356]	; (800269c <HAL_RCC_OscConfig+0x68c>)
 8002536:	400a      	ands	r2, r1
 8002538:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fbc7 	bl	8000cd4 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800254a:	e009      	b.n	8002560 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe fbc2 	bl	8000cd4 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_OscConfig+0x690>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0cb      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002560:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d0ef      	beq.n	800254c <HAL_RCC_OscConfig+0x53c>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fbb1 	bl	8000cd4 <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002576:	e009      	b.n	800258c <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fbac 	bl	8000cd4 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	4a47      	ldr	r2, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x690>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0b5      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800258e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d1ef      	bne.n	8002578 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002598:	2323      	movs	r3, #35	; 0x23
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80025a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80025a8:	493e      	ldr	r1, [pc, #248]	; (80026a4 <HAL_RCC_OscConfig+0x694>)
 80025aa:	400a      	ands	r2, r1
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d100      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5a8>
 80025b6:	e09e      	b.n	80026f6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d100      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5b0>
 80025be:	e077      	b.n	80026b0 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d145      	bne.n	8002654 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80025ce:	4936      	ldr	r1, [pc, #216]	; (80026a8 <HAL_RCC_OscConfig+0x698>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb7e 	bl	8000cd4 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fb79 	bl	8000cd4 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e083      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	049b      	lsls	r3, r3, #18
 80025f8:	4013      	ands	r3, r2
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_RCC_OscConfig+0x69c>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	431a      	orrs	r2, r3
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	0449      	lsls	r1, r1, #17
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe fb53 	bl	8000cd4 <HAL_GetTick>
 800262e:	0003      	movs	r3, r0
 8002630:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fb4e 	bl	8000cd4 <HAL_GetTick>
 8002638:	0002      	movs	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e058      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	049b      	lsls	r3, r3, #18
 800264e:	4013      	ands	r3, r2
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x624>
 8002652:	e050      	b.n	80026f6 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800265a:	4913      	ldr	r1, [pc, #76]	; (80026a8 <HAL_RCC_OscConfig+0x698>)
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fb38 	bl	8000cd4 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe fb33 	bl	8000cd4 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e03d      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_OscConfig+0x67c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	049b      	lsls	r3, r3, #18
 8002684:	4013      	ands	r3, r2
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x65a>
 8002688:	e035      	b.n	80026f6 <HAL_RCC_OscConfig+0x6e6>
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	40021000 	.word	0x40021000
 8002690:	ffff1fff 	.word	0xffff1fff
 8002694:	fffffeff 	.word	0xfffffeff
 8002698:	40007000 	.word	0x40007000
 800269c:	fffffbff 	.word	0xfffffbff
 80026a0:	00001388 	.word	0x00001388
 80026a4:	efffffff 	.word	0xefffffff
 80026a8:	feffffff 	.word	0xfeffffff
 80026ac:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x6f0>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	025b      	lsls	r3, r3, #9
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	23f0      	movs	r3, #240	; 0xf0
 80026d6:	039b      	lsls	r3, r3, #14
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	23c0      	movs	r3, #192	; 0xc0
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b00a      	add	sp, #40	; 0x28
 80026fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e10d      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d911      	bls.n	800274a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b85      	ldr	r3, [pc, #532]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2201      	movs	r2, #1
 800272c:	4393      	bics	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002738:	4b80      	ldr	r3, [pc, #512]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0f4      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	22f0      	movs	r2, #240	; 0xf0
 800275a:	4393      	bics	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	4b77      	ldr	r3, [pc, #476]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	d100      	bne.n	8002774 <HAL_RCC_ClockConfig+0x70>
 8002772:	e089      	b.n	8002888 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d107      	bne.n	800278c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800277c:	4b70      	ldr	r3, [pc, #448]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d120      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d3      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	049b      	lsls	r3, r3, #18
 800279c:	4013      	ands	r3, r2
 800279e:	d114      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0c7      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ac:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2204      	movs	r2, #4
 80027b2:	4013      	ands	r3, r2
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0bc      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0b4      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2203      	movs	r2, #3
 80027d0:	4393      	bics	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027de:	f7fe fa79 	bl	8000cd4 <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d111      	bne.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ee:	e009      	b.n	8002804 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fa70 	bl	8000cd4 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_RCC_ClockConfig+0x240>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e097      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002804:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	220c      	movs	r2, #12
 800280a:	4013      	ands	r3, r2
 800280c:	2b08      	cmp	r3, #8
 800280e:	d1ef      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xec>
 8002810:	e03a      	b.n	8002888 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d111      	bne.n	800283e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281a:	e009      	b.n	8002830 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe fa5a 	bl	8000cd4 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	4a47      	ldr	r2, [pc, #284]	; (8002944 <HAL_RCC_ClockConfig+0x240>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e081      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002830:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	220c      	movs	r2, #12
 8002836:	4013      	ands	r3, r2
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d1ef      	bne.n	800281c <HAL_RCC_ClockConfig+0x118>
 800283c:	e024      	b.n	8002888 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d11b      	bne.n	800287e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	e009      	b.n	800285c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fa44 	bl	8000cd4 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	4a3c      	ldr	r2, [pc, #240]	; (8002944 <HAL_RCC_ClockConfig+0x240>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e06b      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	220c      	movs	r2, #12
 8002862:	4013      	ands	r3, r2
 8002864:	2b04      	cmp	r3, #4
 8002866:	d1ef      	bne.n	8002848 <HAL_RCC_ClockConfig+0x144>
 8002868:	e00e      	b.n	8002888 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286a:	f7fe fa33 	bl	8000cd4 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_RCC_ClockConfig+0x240>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e05a      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	220c      	movs	r2, #12
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	4013      	ands	r3, r2
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d211      	bcs.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	4393      	bics	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_ClockConfig+0x238>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e03c      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2204      	movs	r2, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <HAL_RCC_ClockConfig+0x244>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80028d4:	430a      	orrs	r2, r1
 80028d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2208      	movs	r2, #8
 80028de:	4013      	ands	r3, r2
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x248>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f8:	f000 f82e 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80028fc:	0001      	movs	r1, r0
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_ClockConfig+0x23c>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	220f      	movs	r2, #15
 8002906:	4013      	ands	r3, r2
 8002908:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_RCC_ClockConfig+0x24c>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	000a      	movs	r2, r1
 800290e:	40da      	lsrs	r2, r3
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_ClockConfig+0x250>)
 8002912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002914:	250b      	movs	r5, #11
 8002916:	197c      	adds	r4, r7, r5
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe f9a5 	bl	8000c68 <HAL_InitTick>
 800291e:	0003      	movs	r3, r0
 8002920:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002922:	197b      	adds	r3, r7, r5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800292a:	230b      	movs	r3, #11
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	e000      	b.n	8002934 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bdb0      	pop	{r4, r5, r7, pc}
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
 8002944:	00001388 	.word	0x00001388
 8002948:	fffff8ff 	.word	0xfffff8ff
 800294c:	ffffc7ff 	.word	0xffffc7ff
 8002950:	08003800 	.word	0x08003800
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	220c      	movs	r2, #12
 8002968:	4013      	ands	r3, r2
 800296a:	2b08      	cmp	r3, #8
 800296c:	d00e      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x34>
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d00f      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x3a>
 8002972:	2b04      	cmp	r3, #4
 8002974:	d157      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	4013      	ands	r3, r2
 800297e:	d002      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002980:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002982:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002984:	e05d      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002988:	613b      	str	r3, [r7, #16]
      break;
 800298a:	e05a      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x100>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	e057      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	0c9b      	lsrs	r3, r3, #18
 8002996:	220f      	movs	r2, #15
 8002998:	4013      	ands	r3, r2
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x104>)
 800299c:	5cd3      	ldrb	r3, [r2, r3]
 800299e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	0d9b      	lsrs	r3, r3, #22
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
 80029a8:	3301      	adds	r3, #1
 80029aa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xf4>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	025b      	lsls	r3, r3, #9
 80029b4:	4013      	ands	r3, r2
 80029b6:	d00f      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	000a      	movs	r2, r1
 80029bc:	0152      	lsls	r2, r2, #5
 80029be:	1a52      	subs	r2, r2, r1
 80029c0:	0193      	lsls	r3, r2, #6
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	185b      	adds	r3, r3, r1
 80029c8:	025b      	lsls	r3, r3, #9
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7fd fb9b 	bl	8000108 <__udivsi3>
 80029d2:	0003      	movs	r3, r0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e023      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xf4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2210      	movs	r2, #16
 80029de:	4013      	ands	r3, r2
 80029e0:	d00f      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	000a      	movs	r2, r1
 80029e6:	0152      	lsls	r2, r2, #5
 80029e8:	1a52      	subs	r2, r2, r1
 80029ea:	0193      	lsls	r3, r2, #6
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	185b      	adds	r3, r3, r1
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7fd fb86 	bl	8000108 <__udivsi3>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e00e      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	000a      	movs	r2, r1
 8002a06:	0152      	lsls	r2, r2, #5
 8002a08:	1a52      	subs	r2, r2, r1
 8002a0a:	0193      	lsls	r3, r2, #6
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	185b      	adds	r3, r3, r1
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7fd fb76 	bl	8000108 <__udivsi3>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
      break;
 8002a24:	e00d      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0b5b      	lsrs	r3, r3, #13
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4013      	ands	r3, r2
 8002a30:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	0212      	lsls	r2, r2, #8
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
      break;
 8002a40:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a42:	693b      	ldr	r3, [r7, #16]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b006      	add	sp, #24
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	003d0900 	.word	0x003d0900
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	007a1200 	.word	0x007a1200
 8002a5c:	08003810 	.word	0x08003810

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d100      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002a72:	e0c7      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002a74:	2317      	movs	r3, #23
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b82      	ldr	r3, [pc, #520]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	055b      	lsls	r3, r3, #21
 8002a84:	4013      	ands	r3, r2
 8002a86:	d10a      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8c:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	0549      	lsls	r1, r1, #21
 8002a92:	430a      	orrs	r2, r1
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a96:	2317      	movs	r3, #23
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b7b      	ldr	r3, [pc, #492]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d11a      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b77      	ldr	r3, [pc, #476]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	0049      	lsls	r1, r1, #1
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe f90c 	bl	8000cd4 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe f907 	bl	8000cd4 <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0d4      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002ae0:	4b69      	ldr	r3, [pc, #420]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	23c0      	movs	r3, #192	; 0xc0
 8002ae6:	039b      	lsls	r3, r3, #14
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	23c0      	movs	r3, #192	; 0xc0
 8002af2:	039b      	lsls	r3, r3, #14
 8002af4:	4013      	ands	r3, r2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d013      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	029b      	lsls	r3, r3, #10
 8002b04:	401a      	ands	r2, r3
 8002b06:	23c0      	movs	r3, #192	; 0xc0
 8002b08:	029b      	lsls	r3, r3, #10
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d10a      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b0e:	4b5e      	ldr	r3, [pc, #376]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	029b      	lsls	r3, r3, #10
 8002b16:	401a      	ands	r2, r3
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0ac      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b24:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03b      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	23c0      	movs	r3, #192	; 0xc0
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d033      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d02e      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b50:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5a:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	0309      	lsls	r1, r1, #12
 8002b64:	430a      	orrs	r2, r1
 8002b66:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b68:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b6e:	4949      	ldr	r1, [pc, #292]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b74:	4b44      	ldr	r3, [pc, #272]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d014      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe f8a6 	bl	8000cd4 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe f8a1 	bl	8000cd4 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	4a3f      	ldr	r2, [pc, #252]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e06d      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4013      	ands	r3, r2
 8002bac:	d0ef      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	23c0      	movs	r3, #192	; 0xc0
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	23c0      	movs	r3, #192	; 0xc0
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	23c0      	movs	r3, #192	; 0xc0
 8002bd0:	039b      	lsls	r3, r3, #14
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bdc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	23c0      	movs	r3, #192	; 0xc0
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	401a      	ands	r2, r3
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bee:	2317      	movs	r3, #23
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bfe:	4928      	ldr	r1, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	220c      	movs	r2, #12
 8002c14:	4393      	bics	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2204      	movs	r2, #4
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2208      	movs	r2, #8
 8002c46:	4013      	ands	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	4013      	ands	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b006      	add	sp, #24
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	fffcffff 	.word	0xfffcffff
 8002c94:	fff7ffff 	.word	0xfff7ffff
 8002c98:	00001388 	.word	0x00001388
 8002c9c:	ffcfffff 	.word	0xffcfffff
 8002ca0:	efffffff 	.word	0xefffffff
 8002ca4:	fffff3ff 	.word	0xfffff3ff
 8002ca8:	ffffcfff 	.word	0xffffcfff
 8002cac:	fff3ffff 	.word	0xfff3ffff

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e01e      	b.n	8002d00 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2239      	movs	r2, #57	; 0x39
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2238      	movs	r2, #56	; 0x38
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fd feef 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2239      	movs	r2, #57	; 0x39
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	0019      	movs	r1, r3
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	f000 faff 	bl	80032f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2239      	movs	r2, #57	; 0x39
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2207      	movs	r2, #7
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d007      	beq.n	8002d42 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e01e      	b.n	8002d9c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2239      	movs	r2, #57	; 0x39
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2238      	movs	r2, #56	; 0x38
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7fd fe8b 	bl	8000a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2239      	movs	r2, #57	; 0x39
 8002d7e:	2102      	movs	r1, #2
 8002d80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	0010      	movs	r0, r2
 8002d8e:	f000 fab1 	bl	80032f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2239      	movs	r2, #57	; 0x39
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6839      	ldr	r1, [r7, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fc84 	bl	80036c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d007      	beq.n	8002dde <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d124      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2202      	movs	r2, #2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d11d      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2203      	movs	r2, #3
 8002e12:	4252      	negs	r2, r2
 8002e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2203      	movs	r2, #3
 8002e24:	4013      	ands	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fa4a 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e007      	b.n	8002e42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fa3d 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fa49 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d125      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11e      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2205      	movs	r2, #5
 8002e6a:	4252      	negs	r2, r2
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	23c0      	movs	r3, #192	; 0xc0
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f000 fa1d 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e007      	b.n	8002e9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fa10 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 fa1c 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d124      	bne.n	8002efa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11d      	bne.n	8002efa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2209      	movs	r2, #9
 8002ec4:	4252      	negs	r2, r2
 8002ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f9f1 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8002ee2:	e007      	b.n	8002ef4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f9e4 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f9f0 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2210      	movs	r2, #16
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d125      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2210      	movs	r2, #16
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d11e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2211      	movs	r2, #17
 8002f1c:	4252      	negs	r2, r2
 8002f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2208      	movs	r2, #8
 8002f24:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f9c4 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e007      	b.n	8002f4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 f9b7 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f9c3 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10f      	bne.n	8002f82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d108      	bne.n	8002f82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	4252      	negs	r2, r2
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f991 	bl	80032a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d10f      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d108      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2241      	movs	r2, #65	; 0x41
 8002fa4:	4252      	negs	r2, r2
 8002fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f99a 	bl	80032e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2238      	movs	r2, #56	; 0x38
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0a4      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x164>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2238      	movs	r2, #56	; 0x38
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2239      	movs	r2, #57	; 0x39
 8002fde:	2102      	movs	r1, #2
 8002fe0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d029      	beq.n	800303c <HAL_TIM_PWM_ConfigChannel+0x84>
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002fee:	e08c      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d046      	beq.n	8003082 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d065      	beq.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002ff8:	e087      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	0011      	movs	r1, r2
 8003002:	0018      	movs	r0, r3
 8003004:	f000 f9c0 	bl	8003388 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2108      	movs	r1, #8
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2104      	movs	r1, #4
 8003024:	438a      	bics	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6999      	ldr	r1, [r3, #24]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	619a      	str	r2, [r3, #24]
      break;
 800303a:	e066      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f9db 	bl	8003400 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	0109      	lsls	r1, r1, #4
 8003058:	430a      	orrs	r2, r1
 800305a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	492f      	ldr	r1, [pc, #188]	; (8003124 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003068:	400a      	ands	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6999      	ldr	r1, [r3, #24]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	021a      	lsls	r2, r3, #8
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	619a      	str	r2, [r3, #24]
      break;
 8003080:	e043      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f9fa 	bl	8003484 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2108      	movs	r1, #8
 800309c:	430a      	orrs	r2, r1
 800309e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2104      	movs	r1, #4
 80030ac:	438a      	bics	r2, r1
 80030ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69d9      	ldr	r1, [r3, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	61da      	str	r2, [r3, #28]
      break;
 80030c2:	e022      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	0011      	movs	r1, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fa19 	bl	8003504 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0109      	lsls	r1, r1, #4
 80030e0:	430a      	orrs	r2, r1
 80030e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	490d      	ldr	r1, [pc, #52]	; (8003124 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69d9      	ldr	r1, [r3, #28]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	021a      	lsls	r2, r3, #8
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	61da      	str	r2, [r3, #28]
      break;
 8003108:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2239      	movs	r2, #57	; 0x39
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2238      	movs	r2, #56	; 0x38
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b004      	add	sp, #16
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fffffbff 	.word	0xfffffbff

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2238      	movs	r2, #56	; 0x38
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIM_ConfigClockSource+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e0ab      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2238      	movs	r2, #56	; 0x38
 8003144:	2101      	movs	r1, #1
 8003146:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2239      	movs	r2, #57	; 0x39
 800314c:	2102      	movs	r1, #2
 800314e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2277      	movs	r2, #119	; 0x77
 800315c:	4393      	bics	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a4f      	ldr	r2, [pc, #316]	; (80032a0 <HAL_TIM_ConfigClockSource+0x178>)
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d100      	bne.n	800317a <HAL_TIM_ConfigClockSource+0x52>
 8003178:	e06b      	b.n	8003252 <HAL_TIM_ConfigClockSource+0x12a>
 800317a:	d80e      	bhi.n	800319a <HAL_TIM_ConfigClockSource+0x72>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d100      	bne.n	8003182 <HAL_TIM_ConfigClockSource+0x5a>
 8003180:	e077      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x14a>
 8003182:	d803      	bhi.n	800318c <HAL_TIM_ConfigClockSource+0x64>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d100      	bne.n	800318a <HAL_TIM_ConfigClockSource+0x62>
 8003188:	e073      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800318a:	e07c      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800318c:	2b20      	cmp	r3, #32
 800318e:	d100      	bne.n	8003192 <HAL_TIM_ConfigClockSource+0x6a>
 8003190:	e06f      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x14a>
 8003192:	2b30      	cmp	r3, #48	; 0x30
 8003194:	d100      	bne.n	8003198 <HAL_TIM_ConfigClockSource+0x70>
 8003196:	e06c      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003198:	e075      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800319a:	2b70      	cmp	r3, #112	; 0x70
 800319c:	d00e      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x94>
 800319e:	d804      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x82>
 80031a0:	2b50      	cmp	r3, #80	; 0x50
 80031a2:	d036      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0xea>
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d044      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80031a8:	e06d      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0152      	lsls	r2, r2, #5
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d068      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x15c>
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	0192      	lsls	r2, r2, #6
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d017      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80031ba:	e064      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f000 fa5a 	bl	8003684 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2277      	movs	r2, #119	; 0x77
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
      break;
 80031e8:	e04d      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6899      	ldr	r1, [r3, #8]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f000 fa43 	bl	8003684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	01c9      	lsls	r1, r1, #7
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
      break;
 8003210:	e039      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	001a      	movs	r2, r3
 8003220:	f000 f9b6 	bl	8003590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2150      	movs	r1, #80	; 0x50
 800322a:	0018      	movs	r0, r3
 800322c:	f000 fa10 	bl	8003650 <TIM_ITRx_SetConfig>
      break;
 8003230:	e029      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	001a      	movs	r2, r3
 8003240:	f000 f9d4 	bl	80035ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2160      	movs	r1, #96	; 0x60
 800324a:	0018      	movs	r0, r3
 800324c:	f000 fa00 	bl	8003650 <TIM_ITRx_SetConfig>
      break;
 8003250:	e019      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	001a      	movs	r2, r3
 8003260:	f000 f996 	bl	8003590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2140      	movs	r1, #64	; 0x40
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f9f0 	bl	8003650 <TIM_ITRx_SetConfig>
      break;
 8003270:	e009      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0019      	movs	r1, r3
 800327c:	0010      	movs	r0, r2
 800327e:	f000 f9e7 	bl	8003650 <TIM_ITRx_SetConfig>
      break;
 8003282:	e000      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003284:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2239      	movs	r2, #57	; 0x39
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2238      	movs	r2, #56	; 0x38
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	ffff00ff 	.word	0xffff00ff

080032a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	05db      	lsls	r3, r3, #23
 800330a:	429a      	cmp	r2, r3
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x22>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <TIM_Base_SetConfig+0x8c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2270      	movs	r2, #112	; 0x70
 800331a:	4393      	bics	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	429a      	cmp	r2, r3
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0x46>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <TIM_Base_SetConfig+0x8c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a11      	ldr	r2, [pc, #68]	; (8003384 <TIM_Base_SetConfig+0x90>)
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	4393      	bics	r3, r2
 8003352:	001a      	movs	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	615a      	str	r2, [r3, #20]
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40010800 	.word	0x40010800
 8003384:	fffffcff 	.word	0xfffffcff

08003388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	2201      	movs	r2, #1
 8003398:	4393      	bics	r3, r2
 800339a:	001a      	movs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2270      	movs	r2, #112	; 0x70
 80033b6:	4393      	bics	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2203      	movs	r2, #3
 80033be:	4393      	bics	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2202      	movs	r2, #2
 80033d0:	4393      	bics	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b006      	add	sp, #24
 80033fe:	bd80      	pop	{r7, pc}

08003400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	2210      	movs	r2, #16
 8003410:	4393      	bics	r3, r2
 8003412:	001a      	movs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <TIM_OC2_SetConfig+0x7c>)
 800342e:	4013      	ands	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <TIM_OC2_SetConfig+0x80>)
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2220      	movs	r2, #32
 800344a:	4393      	bics	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b006      	add	sp, #24
 800347a:	bd80      	pop	{r7, pc}
 800347c:	ffff8fff 	.word	0xffff8fff
 8003480:	fffffcff 	.word	0xfffffcff

08003484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <TIM_OC3_SetConfig+0x78>)
 8003494:	401a      	ands	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2270      	movs	r2, #112	; 0x70
 80034b0:	4393      	bics	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2203      	movs	r2, #3
 80034b8:	4393      	bics	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <TIM_OC3_SetConfig+0x7c>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b006      	add	sp, #24
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	fffffeff 	.word	0xfffffeff
 8003500:	fffffdff 	.word	0xfffffdff

08003504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <TIM_OC4_SetConfig+0x7c>)
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a15      	ldr	r2, [pc, #84]	; (8003584 <TIM_OC4_SetConfig+0x80>)
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a14      	ldr	r2, [pc, #80]	; (8003588 <TIM_OC4_SetConfig+0x84>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <TIM_OC4_SetConfig+0x88>)
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b006      	add	sp, #24
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	ffffefff 	.word	0xffffefff
 8003584:	ffff8fff 	.word	0xffff8fff
 8003588:	fffffcff 	.word	0xfffffcff
 800358c:	ffffdfff 	.word	0xffffdfff

08003590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4393      	bics	r3, r2
 80035aa:	001a      	movs	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	22f0      	movs	r2, #240	; 0xf0
 80035ba:	4393      	bics	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	220a      	movs	r2, #10
 80035cc:	4393      	bics	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b006      	add	sp, #24
 80035ea:	bd80      	pop	{r7, pc}

080035ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	2210      	movs	r2, #16
 80035fe:	4393      	bics	r3, r2
 8003600:	001a      	movs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <TIM_TI2_ConfigInputStage+0x60>)
 8003616:	4013      	ands	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	22a0      	movs	r2, #160	; 0xa0
 8003628:	4393      	bics	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b006      	add	sp, #24
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	ffff0fff 	.word	0xffff0fff

08003650 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2270      	movs	r2, #112	; 0x70
 8003664:	4393      	bics	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	2207      	movs	r2, #7
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <TIM_ETR_SetConfig+0x3c>)
 800369c:	4013      	ands	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b006      	add	sp, #24
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	ffff00ff 	.word	0xffff00ff

080036c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	221f      	movs	r2, #31
 80036d4:	4013      	ands	r3, r2
 80036d6:	2201      	movs	r2, #1
 80036d8:	409a      	lsls	r2, r3
 80036da:	0013      	movs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	401a      	ands	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	211f      	movs	r1, #31
 80036f4:	400b      	ands	r3, r1
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4099      	lsls	r1, r3
 80036fa:	000b      	movs	r3, r1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2238      	movs	r2, #56	; 0x38
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371e:	2302      	movs	r3, #2
 8003720:	e032      	b.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2238      	movs	r2, #56	; 0x38
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2239      	movs	r2, #57	; 0x39
 800372e:	2102      	movs	r1, #2
 8003730:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2270      	movs	r2, #112	; 0x70
 8003746:	4393      	bics	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	4393      	bics	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	4313      	orrs	r3, r2
 8003764:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2239      	movs	r2, #57	; 0x39
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2238      	movs	r2, #56	; 0x38
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	2600      	movs	r6, #0
 8003794:	4d0c      	ldr	r5, [pc, #48]	; (80037c8 <__libc_init_array+0x38>)
 8003796:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003798:	1b64      	subs	r4, r4, r5
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	42a6      	cmp	r6, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	2600      	movs	r6, #0
 80037a2:	f000 f821 	bl	80037e8 <_init>
 80037a6:	4d0a      	ldr	r5, [pc, #40]	; (80037d0 <__libc_init_array+0x40>)
 80037a8:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <__libc_init_array+0x44>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	42a6      	cmp	r6, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	00b3      	lsls	r3, r6, #2
 80037b6:	58eb      	ldr	r3, [r5, r3]
 80037b8:	4798      	blx	r3
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	00b3      	lsls	r3, r6, #2
 80037c0:	58eb      	ldr	r3, [r5, r3]
 80037c2:	4798      	blx	r3
 80037c4:	3601      	adds	r6, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	0800381c 	.word	0x0800381c
 80037cc:	0800381c 	.word	0x0800381c
 80037d0:	0800381c 	.word	0x0800381c
 80037d4:	08003820 	.word	0x08003820

080037d8 <memset>:
 80037d8:	0003      	movs	r3, r0
 80037da:	1812      	adds	r2, r2, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d100      	bne.n	80037e2 <memset+0xa>
 80037e0:	4770      	bx	lr
 80037e2:	7019      	strb	r1, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	e7f9      	b.n	80037dc <memset+0x4>

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
