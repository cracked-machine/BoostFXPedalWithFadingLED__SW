
OverDriverPedal_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b0  080034b0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080034b0  080034b0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b0  080034b0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080034b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000008  080034c0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080034c0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b669  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002007  00000000  00000000  0002b699  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a48  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011c5f  00000000  00000000  0002ec68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abc3  00000000  00000000  000408c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ade0  00000000  00000000  0004b48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b626a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000b62e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800347c 	.word	0x0800347c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	0800347c 	.word	0x0800347c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2308      	movs	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f003 f91c 	bl	800346c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b2a      	ldr	r3, [pc, #168]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000236:	4a2b      	ldr	r2, [pc, #172]	; (80002e4 <MX_ADC_Init+0xc4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800023a:	4b29      	ldr	r3, [pc, #164]	; (80002e0 <MX_ADC_Init+0xc0>)
 800023c:	2200      	movs	r2, #0
 800023e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000240:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000242:	22c0      	movs	r2, #192	; 0xc0
 8000244:	0612      	lsls	r2, r2, #24
 8000246:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_ADC_Init+0xc0>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000250:	2200      	movs	r2, #0
 8000252:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000256:	2201      	movs	r2, #1
 8000258:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <MX_ADC_Init+0xc0>)
 800025c:	2200      	movs	r2, #0
 800025e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000262:	2220      	movs	r2, #32
 8000264:	2101      	movs	r1, #1
 8000266:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_ADC_Init+0xc0>)
 800026a:	2221      	movs	r2, #33	; 0x21
 800026c:	2100      	movs	r1, #0
 800026e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000272:	2200      	movs	r2, #0
 8000274:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000278:	22c2      	movs	r2, #194	; 0xc2
 800027a:	32ff      	adds	r2, #255	; 0xff
 800027c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000280:	222c      	movs	r2, #44	; 0x2c
 8000282:	2101      	movs	r1, #1
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000288:	2204      	movs	r2, #4
 800028a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_ADC_Init+0xc0>)
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0152      	lsls	r2, r2, #5
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_ADC_Init+0xc0>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_ADC_Init+0xc0>)
 800029c:	2200      	movs	r2, #0
 800029e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_ADC_Init+0xc0>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_ADC_Init+0xc0>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fd79 	bl	8000da0 <HAL_ADC_Init>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 80002b2:	f000 fa3f 	bl	8000734 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002b6:	003b      	movs	r3, r7
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002bc:	003b      	movs	r3, r7
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0152      	lsls	r2, r2, #5
 80002c2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c4:	003a      	movs	r2, r7
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_ADC_Init+0xc0>)
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fedc 	bl	8001088 <HAL_ADC_ConfigChannel>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 80002d4:	f000 fa2e 	bl	8000734 <Error_Handler>
  }

}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b002      	add	sp, #8
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000074 	.word	0x20000074
 80002e4:	40012400 	.word	0x40012400
 80002e8:	1c000080 	.word	0x1c000080

080002ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f4:	230c      	movs	r3, #12
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	0018      	movs	r0, r3
 80002fa:	2314      	movs	r3, #20
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f003 f8b4 	bl	800346c <memset>
  if(adcHandle->Instance==ADC1)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <HAL_ADC_MspInit+0xc4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d14c      	bne.n	80003a8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 8000310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000312:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	0089      	lsls	r1, r1, #2
 8000318:	430a      	orrs	r2, r1
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 800031e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 8000322:	2101      	movs	r1, #1
 8000324:	430a      	orrs	r2, r1
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <HAL_ADC_MspInit+0xc8>)
 800032a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032c:	2201      	movs	r2, #1
 800032e:	4013      	ands	r3, r2
 8000330:	60bb      	str	r3, [r7, #8]
 8000332:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000334:	210c      	movs	r1, #12
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2203      	movs	r2, #3
 8000340:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000348:	187a      	adds	r2, r7, r1
 800034a:	23a0      	movs	r3, #160	; 0xa0
 800034c:	05db      	lsls	r3, r3, #23
 800034e:	0011      	movs	r1, r2
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f93d 	bl	80015d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000358:	4a18      	ldr	r2, [pc, #96]	; (80003bc <HAL_ADC_MspInit+0xd0>)
 800035a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000382:	2220      	movs	r2, #32
 8000384:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fff8 	bl	8001384 <HAL_DMA_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000398:	f000 f9cc 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 80003a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <HAL_ADC_MspInit+0xcc>)
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b008      	add	sp, #32
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40012400 	.word	0x40012400
 80003b4:	40021000 	.word	0x40021000
 80003b8:	2000002c 	.word	0x2000002c
 80003bc:	40020008 	.word	0x40020008

080003c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_DMA_Init+0x38>)
 80003c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_DMA_Init+0x38>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	430a      	orrs	r2, r1
 80003d0:	631a      	str	r2, [r3, #48]	; 0x30
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_DMA_Init+0x38>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2101      	movs	r1, #1
 80003e2:	2009      	movs	r0, #9
 80003e4:	f000 ff9c 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003e8:	2009      	movs	r0, #9
 80003ea:	f000 ffae 	bl	800134a <HAL_NVIC_EnableIRQ>

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f003 f82d 	bl	800346c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <MX_GPIO_Init+0xf4>)
 8000414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <MX_GPIO_Init+0xf4>)
 8000418:	2104      	movs	r1, #4
 800041a:	430a      	orrs	r2, r1
 800041c:	62da      	str	r2, [r3, #44]	; 0x2c
 800041e:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <MX_GPIO_Init+0xf4>)
 8000420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000422:	2204      	movs	r2, #4
 8000424:	4013      	ands	r3, r2
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <MX_GPIO_Init+0xf4>)
 800042c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042e:	4b30      	ldr	r3, [pc, #192]	; (80004f0 <MX_GPIO_Init+0xf4>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
 8000436:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <MX_GPIO_Init+0xf4>)
 8000438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin, GPIO_PIN_RESET);
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	01db      	lsls	r3, r3, #7
 8000446:	482b      	ldr	r0, [pc, #172]	; (80004f4 <MX_GPIO_Init+0xf8>)
 8000448:	2200      	movs	r2, #0
 800044a:	0019      	movs	r1, r3
 800044c:	f001 fa26 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin, GPIO_PIN_RESET);
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	0099      	lsls	r1, r3, #2
 8000454:	23a0      	movs	r3, #160	; 0xa0
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2200      	movs	r2, #0
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fa1e 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLEAN_ENABLE_Pin;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	01d2      	lsls	r2, r2, #7
 8000466:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2201      	movs	r2, #1
 800046c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2201      	movs	r2, #1
 8000472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	0021      	movs	r1, r4
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CLEAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800047c:	000c      	movs	r4, r1
 800047e:	187b      	adds	r3, r7, r1
 8000480:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <MX_GPIO_Init+0xf8>)
 8000482:	0019      	movs	r1, r3
 8000484:	0010      	movs	r0, r2
 8000486:	f001 f8a3 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FOOTSW_EXTI4_Pin;
 800048a:	0021      	movs	r1, r4
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2210      	movs	r2, #16
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	4a18      	ldr	r2, [pc, #96]	; (80004f8 <MX_GPIO_Init+0xfc>)
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2201      	movs	r2, #1
 800049c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FOOTSW_EXTI4_GPIO_Port, &GPIO_InitStruct);
 800049e:	000c      	movs	r4, r1
 80004a0:	187a      	adds	r2, r7, r1
 80004a2:	23a0      	movs	r3, #160	; 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 f891 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FX_ENABLE_Pin;
 80004ae:	0021      	movs	r1, r4
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2201      	movs	r2, #1
 80004c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FX_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80004ca:	187a      	adds	r2, r7, r1
 80004cc:	23a0      	movs	r3, #160	; 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 f87c 	bl	80015d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2100      	movs	r1, #0
 80004dc:	2007      	movs	r0, #7
 80004de:	f000 ff1f 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f000 ff31 	bl	800134a <HAL_NVIC_EnableIRQ>

}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b009      	add	sp, #36	; 0x24
 80004ee:	bd90      	pop	{r4, r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	50000800 	.word	0x50000800
 80004f8:	10210000 	.word	0x10210000

080004fc <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_LPTIM1_Init+0x44>)
 8000502:	4a10      	ldr	r2, [pc, #64]	; (8000544 <MX_LPTIM1_Init+0x48>)
 8000504:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_LPTIM1_Init+0x44>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_LPTIM1_Init+0x44>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_LPTIM1_Init+0x44>)
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <MX_LPTIM1_Init+0x4c>)
 8000516:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_LPTIM1_Init+0x44>)
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_LPTIM1_Init+0x44>)
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_LPTIM1_Init+0x44>)
 8000526:	2200      	movs	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_LPTIM1_Init+0x44>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fa0b 	bl	8001948 <HAL_LPTIM_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8000536:	f000 f8fd 	bl	8000734 <Error_Handler>
  }

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000d0 	.word	0x200000d0
 8000544:	40007c00 	.word	0x40007c00
 8000548:	0000ffff 	.word	0x0000ffff

0800054c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <HAL_LPTIM_MspInit+0x38>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d10e      	bne.n	800057c <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_LPTIM_MspInit+0x3c>)
 8000560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_LPTIM_MspInit+0x3c>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0609      	lsls	r1, r1, #24
 8000568:	430a      	orrs	r2, r1
 800056a:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	200d      	movs	r0, #13
 8000572:	f000 fed5 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000576:	200d      	movs	r0, #13
 8000578:	f000 fee7 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40007c00 	.word	0x40007c00
 8000588:	40021000 	.word	0x40021000

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fba6 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f866 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f7ff ff30 	bl	80003fc <MX_GPIO_Init>
  MX_DMA_Init();
 800059c:	f7ff ff10 	bl	80003c0 <MX_DMA_Init>
  MX_TIM2_Init();
 80005a0:	f000 fa0a 	bl	80009b8 <MX_TIM2_Init>
  MX_TIM21_Init();
 80005a4:	f000 fa7a 	bl	8000a9c <MX_TIM21_Init>
  MX_ADC_Init();
 80005a8:	f7ff fe3a 	bl	8000220 <MX_ADC_Init>
  MX_LPTIM1_Init();
 80005ac:	f7ff ffa6 	bl	80004fc <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  // start PWM outputs
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <main+0xbc>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 fa3f 	bl	8002a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <main+0xbc>)
 80005bc:	2104      	movs	r1, #4
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 fa3a 	bl	8002a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <main+0xbc>)
 80005c6:	2108      	movs	r1, #8
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fa35 	bl	8002a38 <HAL_TIM_PWM_Start>

  // init PWM to 50% duty
  TIM2->ARR = 8191;
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <main+0xc0>)
 80005d4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = 0;
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	2200      	movs	r2, #0
 80005e4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2200      	movs	r2, #0
 80005ec:	63da      	str	r2, [r3, #60]	; 0x3c

  // debounce timer
  HAL_TIM_Base_Start_IT(&htim21);
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <main+0xc4>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 f9d3 	bl	800299c <HAL_TIM_Base_Start_IT>

  // led fade timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, LED_PERIOD_LIMIT);
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	009a      	lsls	r2, r3, #2
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0xc8>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fa22 	bl	8001a48 <HAL_LPTIM_Counter_Start_IT>
  LPTIM1->CFGR |= LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_2;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <main+0xcc>)
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <main+0xcc>)
 800060a:	21e0      	movs	r1, #224	; 0xe0
 800060c:	0109      	lsls	r1, r1, #4
 800060e:	430a      	orrs	r2, r1
 8000610:	60da      	str	r2, [r3, #12]
  LPTIM1->ARR = 512;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <main+0xcc>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	619a      	str	r2, [r3, #24]

  // init bypass switch (clean signal default)

  HAL_GPIO_WritePin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin, 1);
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	01db      	lsls	r3, r3, #7
 800061e:	480f      	ldr	r0, [pc, #60]	; (800065c <main+0xd0>)
 8000620:	2201      	movs	r2, #1
 8000622:	0019      	movs	r1, r3
 8000624:	f001 f93a 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin, 0);
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	0099      	lsls	r1, r3, #2
 800062c:	23a0      	movs	r3, #160	; 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2200      	movs	r2, #0
 8000632:	0018      	movs	r0, r3
 8000634:	f001 f932 	bl	800189c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  temp++;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <main+0xd4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <main+0xd4>)
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e7f8      	b.n	8000638 <main+0xac>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000104 	.word	0x20000104
 800064c:	00001fff 	.word	0x00001fff
 8000650:	20000140 	.word	0x20000140
 8000654:	200000d0 	.word	0x200000d0
 8000658:	40007c00 	.word	0x40007c00
 800065c:	50000800 	.word	0x50000800
 8000660:	20000000 	.word	0x20000000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b099      	sub	sp, #100	; 0x64
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	242c      	movs	r4, #44	; 0x2c
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2334      	movs	r3, #52	; 0x34
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f002 fef9 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2318      	movs	r3, #24
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 fef1 	bl	800346c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068a:	003b      	movs	r3, r7
 800068c:	0018      	movs	r0, r3
 800068e:	2318      	movs	r3, #24
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 feea 	bl	800346c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a24      	ldr	r2, [pc, #144]	; (8000730 <SystemClock_Config+0xcc>)
 800069e:	401a      	ands	r2, r3
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xc8>)
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0109      	lsls	r1, r1, #4
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2210      	movs	r2, #16
 80006bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 faec 	bl	8001ca4 <HAL_RCC_OscConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80006d0:	f000 f830 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	2118      	movs	r1, #24
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	220f      	movs	r2, #15
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2201      	movs	r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fe4d 	bl	8002398 <HAL_RCC_ClockConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000702:	f000 f817 	bl	8000734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000706:	003b      	movs	r3, r7
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800070c:	003b      	movs	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	f001 ffed 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800071e:	f000 f809 	bl	8000734 <Error_Handler>
  }
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b019      	add	sp, #100	; 0x64
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40007000 	.word	0x40007000
 8000730:	ffffe7ff 	.word	0xffffe7ff

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_MspInit+0x24>)
 8000746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x24>)
 800074a:	2101      	movs	r1, #1
 800074c:	430a      	orrs	r2, r1
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_MspInit+0x24>)
 8000752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_MspInit+0x24>)
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0549      	lsls	r1, r1, #21
 800075a:	430a      	orrs	r2, r1
 800075c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <ledprogram_panfade>:
		led_value2--;
	}
}

void ledprogram_panfade()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	// led pwm ch1
	if(!led1_fade_stop)
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <ledprogram_panfade+0xb8>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d126      	bne.n	80007c2 <ledprogram_panfade+0x5a>
	{

		if(led_value1 < 1)
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <ledprogram_panfade+0xbc>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d108      	bne.n	800078e <ledprogram_panfade+0x26>
		{
			led_fade_up1 = 1;
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <ledprogram_panfade+0xc0>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
			led1_fade_stop = 1;
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <ledprogram_panfade+0xb8>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
			led2_fade_stop = 0;
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <ledprogram_panfade+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

		}
		if(led_value1 > LED_PERIOD_LIMIT) {
 800078e:	4b25      	ldr	r3, [pc, #148]	; (8000824 <ledprogram_panfade+0xbc>)
 8000790:	881a      	ldrh	r2, [r3, #0]
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	429a      	cmp	r2, r3
 8000798:	d902      	bls.n	80007a0 <ledprogram_panfade+0x38>
			led_fade_up1 = 0;
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <ledprogram_panfade+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		}

		if(led_fade_up1)
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <ledprogram_panfade+0xc0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d006      	beq.n	80007b6 <ledprogram_panfade+0x4e>
		{
			led_value1++;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <ledprogram_panfade+0xbc>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <ledprogram_panfade+0xbc>)
 80007b2:	801a      	strh	r2, [r3, #0]
 80007b4:	e005      	b.n	80007c2 <ledprogram_panfade+0x5a>
		}
		else
		{
			led_value1--;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <ledprogram_panfade+0xbc>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <ledprogram_panfade+0xbc>)
 80007c0:	801a      	strh	r2, [r3, #0]
		}
	}
	if(!led2_fade_stop)
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <ledprogram_panfade+0xc4>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d126      	bne.n	8000818 <ledprogram_panfade+0xb0>
	{
		// led pwm ch2
		if(led_value2 < 1)
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <ledprogram_panfade+0xc8>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d108      	bne.n	80007e4 <ledprogram_panfade+0x7c>
		{
			led_fade_up2 = 1;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <ledprogram_panfade+0xcc>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
			led2_fade_stop = 1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <ledprogram_panfade+0xc4>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
			led1_fade_stop = 0;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <ledprogram_panfade+0xb8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]

		}
		if(led_value2 > LED_PERIOD_LIMIT) {
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <ledprogram_panfade+0xc8>)
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d902      	bls.n	80007f6 <ledprogram_panfade+0x8e>
			led_fade_up2 = 0;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <ledprogram_panfade+0xcc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
		}

		if(led_fade_up2)
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <ledprogram_panfade+0xcc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <ledprogram_panfade+0xa4>
		{
			led_value2++;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <ledprogram_panfade+0xc8>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <ledprogram_panfade+0xc8>)
 8000808:	801a      	strh	r2, [r3, #0]
		{
			led_value2--;
		}
	}

}
 800080a:	e005      	b.n	8000818 <ledprogram_panfade+0xb0>
			led_value2--;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <ledprogram_panfade+0xc8>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	3b01      	subs	r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <ledprogram_panfade+0xc8>)
 8000816:	801a      	strh	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	2000002b 	.word	0x2000002b
 8000824:	20000026 	.word	0x20000026
 8000828:	20000001 	.word	0x20000001
 800082c:	20000002 	.word	0x20000002
 8000830:	20000028 	.word	0x20000028
 8000834:	2000002a 	.word	0x2000002a

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 fa88 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

	uint16_t interrupt_time = TIM21->CNT;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <EXTI4_15_IRQHandler+0x58>)
 8000874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	801a      	strh	r2, [r3, #0]
	if (interrupt_time - last_interrupt_time > (adc_data[0]*2))
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <EXTI4_15_IRQHandler+0x5c>)
 8000880:	8812      	ldrh	r2, [r2, #0]
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	001a      	movs	r2, r3
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <EXTI4_15_IRQHandler+0x60>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	429a      	cmp	r2, r3
 800088e:	d90e      	bls.n	80008ae <EXTI4_15_IRQHandler+0x42>
	{
		HAL_GPIO_TogglePin(CLEAN_ENABLE_GPIO_Port, CLEAN_ENABLE_Pin);
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	01db      	lsls	r3, r3, #7
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <EXTI4_15_IRQHandler+0x64>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f001 f81c 	bl	80018d6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(FX_ENABLE_GPIO_Port, FX_ENABLE_Pin);
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	009a      	lsls	r2, r3, #2
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f814 	bl	80018d6 <HAL_GPIO_TogglePin>
	}
	last_interrupt_time = interrupt_time;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <EXTI4_15_IRQHandler+0x5c>)
 80008b0:	1dba      	adds	r2, r7, #6
 80008b2:	8812      	ldrh	r2, [r2, #0]
 80008b4:	801a      	strh	r2, [r3, #0]

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80008b6:	2010      	movs	r0, #16
 80008b8:	f001 f820 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800
 80008c8:	20000024 	.word	0x20000024
 80008cc:	20000100 	.word	0x20000100
 80008d0:	50000800 	.word	0x50000800

080008d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <DMA1_Channel1_IRQHandler+0x14>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fdca 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000002c 	.word	0x2000002c

080008ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	//ledprogram_syncfade();
	ledprogram_panfade();
 80008f0:	f7ff ff3a 	bl	8000768 <ledprogram_panfade>

	TIM2->CCR1 = led_value1;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <LPTIM1_IRQHandler+0x2c>)
 80008f6:	881a      	ldrh	r2, [r3, #0]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = led_value2;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <LPTIM1_IRQHandler+0x30>)
 8000900:	881a      	ldrh	r2, [r3, #0]
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
	//TIM2->CCR3 = led_value;
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <LPTIM1_IRQHandler+0x34>)
 800090a:	0018      	movs	r0, r3
 800090c:	f001 f8f0 	bl	8001af0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	20000026 	.word	0x20000026
 800091c:	20000028 	.word	0x20000028
 8000920:	200000d0 	.word	0x200000d0

08000924 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <TIM21_IRQHandler+0x14>)
 800092a:	0018      	movs	r0, r3
 800092c:	f002 f8a6 	bl	8002a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000140 	.word	0x20000140

0800093c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <SystemInit+0x64>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <SystemInit+0x64>)
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	0049      	lsls	r1, r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <SystemInit+0x64>)
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <SystemInit+0x64>)
 8000954:	4913      	ldr	r1, [pc, #76]	; (80009a4 <SystemInit+0x68>)
 8000956:	400a      	ands	r2, r1
 8000958:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <SystemInit+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <SystemInit+0x64>)
 8000960:	4911      	ldr	r1, [pc, #68]	; (80009a8 <SystemInit+0x6c>)
 8000962:	400a      	ands	r2, r1
 8000964:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <SystemInit+0x64>)
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <SystemInit+0x64>)
 800096c:	2101      	movs	r1, #1
 800096e:	438a      	bics	r2, r1
 8000970:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <SystemInit+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <SystemInit+0x64>)
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <SystemInit+0x70>)
 800097a:	400a      	ands	r2, r1
 800097c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <SystemInit+0x64>)
 8000980:	68da      	ldr	r2, [r3, #12]
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <SystemInit+0x64>)
 8000984:	490a      	ldr	r1, [pc, #40]	; (80009b0 <SystemInit+0x74>)
 8000986:	400a      	ands	r2, r1
 8000988:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SystemInit+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <SystemInit+0x78>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0512      	lsls	r2, r2, #20
 8000996:	609a      	str	r2, [r3, #8]
#endif
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000
 80009a4:	88ff400c 	.word	0x88ff400c
 80009a8:	fef6fff6 	.word	0xfef6fff6
 80009ac:	fffbffff 	.word	0xfffbffff
 80009b0:	ff02ffff 	.word	0xff02ffff
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009be:	2310      	movs	r3, #16
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	0018      	movs	r0, r3
 80009c4:	2308      	movs	r3, #8
 80009c6:	001a      	movs	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f002 fd4f 	bl	800346c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	003b      	movs	r3, r7
 80009d0:	0018      	movs	r0, r3
 80009d2:	2310      	movs	r3, #16
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 fd48 	bl	800346c <memset>

  htim2.Instance = TIM2;
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <MX_TIM2_Init+0xe0>)
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	05d2      	lsls	r2, r2, #23
 80009e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_TIM2_Init+0xe0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MX_TIM2_Init+0xe0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <MX_TIM2_Init+0xe0>)
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_TIM2_Init+0xe0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_TIM2_Init+0xe0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_TIM2_Init+0xe0>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 ffeb 	bl	80029e0 <HAL_TIM_PWM_Init>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a0e:	f7ff fe91 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2110      	movs	r1, #16
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a20:	187a      	adds	r2, r7, r1
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_TIM2_Init+0xe0>)
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fcb9 	bl	800339e <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f7ff fe80 	bl	8000734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	003b      	movs	r3, r7
 8000a36:	2260      	movs	r2, #96	; 0x60
 8000a38:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a40:	003b      	movs	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	0039      	movs	r1, r7
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_TIM2_Init+0xe0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 f8fa 	bl	8002c4c <HAL_TIM_PWM_ConfigChannel>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000a5c:	f7ff fe6a 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a60:	0039      	movs	r1, r7
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_TIM2_Init+0xe0>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 f8f0 	bl	8002c4c <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000a70:	f7ff fe60 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a74:	0039      	movs	r1, r7
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_TIM2_Init+0xe0>)
 8000a78:	2208      	movs	r2, #8
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 f8e6 	bl	8002c4c <HAL_TIM_PWM_ConfigChannel>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000a84:	f7ff fe56 	bl	8000734 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <MX_TIM2_Init+0xe0>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f892 	bl	8000bb4 <HAL_TIM_MspPostInit>

}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000104 	.word	0x20000104

08000a9c <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f002 fcdd 	bl	800346c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f002 fcd6 	bl	800346c <memset>

  htim21.Instance = TIM21;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <MX_TIM21_Init+0xa4>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 65535;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <MX_TIM21_Init+0xa8>)
 8000aca:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_TIM21_Init+0xa8>)
 8000ad6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 ff2c 	bl	8002944 <HAL_TIM_Base_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000af0:	f7ff fe20 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	2108      	movs	r1, #8
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	0152      	lsls	r2, r2, #5
 8000afc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000afe:	187a      	adds	r2, r7, r1
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 f959 	bl	8002dbc <HAL_TIM_ConfigClockSource>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000b0e:	f7ff fe11 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000b1e:	003a      	movs	r2, r7
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_TIM21_Init+0xa0>)
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f002 fc3a 	bl	800339e <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000b2e:	f7ff fe01 	bl	8000734 <Error_Handler>
  }

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b006      	add	sp, #24
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000140 	.word	0x20000140
 8000b40:	40010800 	.word	0x40010800
 8000b44:	0000ffff 	.word	0x0000ffff

08000b48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d105      	bne.n	8000b68 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_TIM_PWM_MspInit+0x28>)
 8000b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_TIM_PWM_MspInit+0x28>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	430a      	orrs	r2, r1
 8000b66:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10d      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2014      	movs	r0, #20
 8000b98:	f000 fbc2 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000b9c:	2014      	movs	r0, #20
 8000b9e:	f000 fbd4 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	2314      	movs	r3, #20
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f002 fc50 	bl	800346c <memset>
  if(timHandle->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d13b      	bne.n	8000c50 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_TIM_MspPostInit+0xa4>)
 8000bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <HAL_TIM_MspPostInit+0xa4>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	430a      	orrs	r2, r1
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_TIM_MspPostInit+0xa4>)
 8000be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be8:	2201      	movs	r2, #1
 8000bea:	4013      	ands	r3, r2
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf0:	210c      	movs	r1, #12
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	000c      	movs	r4, r1
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fcd8 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c20:	0021      	movs	r1, r4
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	00d2      	lsls	r2, r2, #3
 8000c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2205      	movs	r2, #5
 8000c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fcc0 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b009      	add	sp, #36	; 0x24
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c62:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c64:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <LoopForever+0xa>)
    CMP R1, R2
 8000c68:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c6a:	d105      	bne.n	8000c78 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c6c:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c6e:	4913      	ldr	r1, [pc, #76]	; (8000cbc <LoopForever+0x12>)
    STR R1, [R0]
 8000c70:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c74:	4913      	ldr	r1, [pc, #76]	; (8000cc4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c76:	6001      	str	r1, [r0, #0]

08000c78 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c7a:	e003      	b.n	8000c84 <LoopCopyDataInit>

08000c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8000c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c82:	3104      	adds	r1, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <LoopForever+0x22>)
  ldr  r3, =_edata
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <LoopForever+0x26>)
  adds  r2, r0, r1
 8000c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c8c:	d3f6      	bcc.n	8000c7c <CopyDataInit>
  ldr  r2, =_sbss
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8000c90:	e002      	b.n	8000c98 <LoopFillZerobss>

08000c92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c92:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c96:	3204      	adds	r2, #4

08000c98 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <LoopForever+0x2e>)
  cmp  r2, r3
 8000c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c9c:	d3f9      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9e:	f7ff fe4d 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f002 fbbf 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc71 	bl	800058c <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
   ldr   r0, =_estack
 8000cac:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000cb0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000cb4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000cb8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000cbc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000cc0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000cc4:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000cc8:	080034b8 	.word	0x080034b8
  ldr  r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cd0:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000cd4:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000cd8:	20000180 	.word	0x20000180

08000cdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_COMP_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x3c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Init+0x3c>)
 8000cf2:	2140      	movs	r1, #64	; 0x40
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 f811 	bl	8000d20 <HAL_InitTick>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e001      	b.n	8000d0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0a:	f7ff fd19 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_InitTick+0x50>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	23fa      	movs	r3, #250	; 0xfa
 8000d36:	0099      	lsls	r1, r3, #2
 8000d38:	0010      	movs	r0, r2
 8000d3a:	f7ff f9e5 	bl	8000108 <__udivsi3>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fb12 	bl	800136a <HAL_SYSTICK_Config>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d004      	beq.n	8000d54 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e006      	b.n	8000d62 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	2301      	movs	r3, #1
 8000d58:	425b      	negs	r3, r3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 fadf 	bl	8001320 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781b      	ldrb	r3, [r3, #0]
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b004      	add	sp, #16
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  uwTick++;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_IncTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_IncTick+0x14>)
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000017c 	.word	0x2000017c

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	2000017c 	.word	0x2000017c

08000da0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e159      	b.n	8001066 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2250      	movs	r2, #80	; 0x50
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fa8e 	bl	80002ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b10      	cmp	r3, #16
 8000dda:	d005      	beq.n	8000de8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2204      	movs	r2, #4
 8000de4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000de6:	d00b      	beq.n	8000e00 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dec:	2210      	movs	r2, #16
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2250      	movs	r2, #80	; 0x50
 8000df8:	2100      	movs	r1, #0
 8000dfa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e132      	b.n	8001066 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e04:	4a9a      	ldr	r2, [pc, #616]	; (8001070 <HAL_ADC_Init+0x2d0>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	2202      	movs	r2, #2
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2203      	movs	r2, #3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <HAL_ADC_Init+0x90>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <HAL_ADC_Init+0x90>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_ADC_Init+0x92>
 8000e30:	2300      	movs	r3, #0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d149      	bne.n	8000eca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	061b      	lsls	r3, r3, #24
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d00b      	beq.n	8000e5a <HAL_ADC_Init+0xba>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d005      	beq.n	8000e5a <HAL_ADC_Init+0xba>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	061b      	lsls	r3, r3, #24
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d111      	bne.n	8000e7e <HAL_ADC_Init+0xde>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	0892      	lsrs	r2, r2, #2
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6919      	ldr	r1, [r3, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	e014      	b.n	8000ea8 <HAL_ADC_Init+0x108>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	0892      	lsrs	r2, r2, #2
 8000e8c:	611a      	str	r2, [r3, #16]
 8000e8e:	4b79      	ldr	r3, [pc, #484]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b78      	ldr	r3, [pc, #480]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000e94:	4978      	ldr	r1, [pc, #480]	; (8001078 <HAL_ADC_Init+0x2d8>)
 8000e96:	400a      	ands	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	4b76      	ldr	r3, [pc, #472]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000e9c:	6819      	ldr	r1, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4b74      	ldr	r3, [pc, #464]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2118      	movs	r1, #24
 8000eb4:	438a      	bics	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68d9      	ldr	r1, [r3, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000eca:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b69      	ldr	r3, [pc, #420]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000ed0:	496a      	ldr	r1, [pc, #424]	; (800107c <HAL_ADC_Init+0x2dc>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000ed6:	4b67      	ldr	r3, [pc, #412]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000ed8:	6819      	ldr	r1, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	065a      	lsls	r2, r3, #25
 8000ee0:	4b64      	ldr	r3, [pc, #400]	; (8001074 <HAL_ADC_Init+0x2d4>)
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	055b      	lsls	r3, r3, #21
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d108      	bne.n	8000f06 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0549      	lsls	r1, r1, #21
 8000f02:	430a      	orrs	r2, r1
 8000f04:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	495b      	ldr	r1, [pc, #364]	; (8001080 <HAL_ADC_Init+0x2e0>)
 8000f12:	400a      	ands	r2, r1
 8000f14:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68d9      	ldr	r1, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_Init+0x18c>
 8000f28:	2304      	movs	r3, #4
 8000f2a:	e000      	b.n	8000f2e <HAL_ADC_Init+0x18e>
 8000f2c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f2e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2020      	movs	r0, #32
 8000f34:	5c1b      	ldrb	r3, [r3, r0]
 8000f36:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f38:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	202c      	movs	r0, #44	; 0x2c
 8000f3e:	5c1b      	ldrb	r3, [r3, r0]
 8000f40:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f42:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f48:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f50:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f58:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f66:	23c2      	movs	r3, #194	; 0xc2
 8000f68:	33ff      	adds	r3, #255	; 0xff
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d00b      	beq.n	8000f86 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68d9      	ldr	r1, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2221      	movs	r2, #33	; 0x21
 8000f8a:	5c9b      	ldrb	r3, [r3, r2]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d11a      	bne.n	8000fc6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2220      	movs	r2, #32
 8000f94:	5c9b      	ldrb	r3, [r3, r2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0249      	lsls	r1, r1, #9
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	e00b      	b.n	8000fc6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d11f      	bne.n	800100e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	492a      	ldr	r1, [pc, #168]	; (8001084 <HAL_ADC_Init+0x2e4>)
 8000fda:	400a      	ands	r2, r1
 8000fdc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6919      	ldr	r1, [r3, #16]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fec:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000ff2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	e00e      	b.n	800102c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2201      	movs	r2, #1
 8001016:	4013      	ands	r3, r2
 8001018:	2b01      	cmp	r3, #1
 800101a:	d107      	bne.n	800102c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2101      	movs	r1, #1
 8001028:	438a      	bics	r2, r1
 800102a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2107      	movs	r1, #7
 8001038:	438a      	bics	r2, r1
 800103a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6959      	ldr	r1, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	2203      	movs	r2, #3
 800105a:	4393      	bics	r3, r2
 800105c:	2201      	movs	r2, #1
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	fffffefd 	.word	0xfffffefd
 8001074:	40012708 	.word	0x40012708
 8001078:	ffc3ffff 	.word	0xffc3ffff
 800107c:	fdffffff 	.word	0xfdffffff
 8001080:	fffe0219 	.word	0xfffe0219
 8001084:	fffffc03 	.word	0xfffffc03

08001088 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2250      	movs	r2, #80	; 0x50
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x18>
 800109c:	2302      	movs	r3, #2
 800109e:	e06c      	b.n	800117a <HAL_ADC_ConfigChannel+0xf2>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2250      	movs	r2, #80	; 0x50
 80010a4:	2101      	movs	r1, #1
 80010a6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4013      	ands	r3, r2
 80010b2:	d00b      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	2220      	movs	r2, #32
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2250      	movs	r2, #80	; 0x50
 80010c4:	2100      	movs	r1, #0
 80010c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e056      	b.n	800117a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <HAL_ADC_ConfigChannel+0xfc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d028      	beq.n	8001128 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	035b      	lsls	r3, r3, #13
 80010e2:	0b5a      	lsrs	r2, r3, #13
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	02db      	lsls	r3, r3, #11
 80010f4:	4013      	ands	r3, r2
 80010f6:	d009      	beq.n	800110c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0409      	lsls	r1, r1, #16
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001106:	200a      	movs	r0, #10
 8001108:	f000 f844 	bl	8001194 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	d02b      	beq.n	8001170 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	03c9      	lsls	r1, r1, #15
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e023      	b.n	8001170 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	035b      	lsls	r3, r3, #13
 8001134:	0b5b      	lsrs	r3, r3, #13
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	02db      	lsls	r3, r3, #11
 8001148:	4013      	ands	r3, r2
 800114a:	d005      	beq.n	8001158 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <HAL_ADC_ConfigChannel+0x104>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	d005      	beq.n	8001170 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_ADC_ConfigChannel+0x100>)
 800116a:	4909      	ldr	r1, [pc, #36]	; (8001190 <HAL_ADC_ConfigChannel+0x108>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2250      	movs	r2, #80	; 0x50
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	00001001 	.word	0x00001001
 8001188:	40012708 	.word	0x40012708
 800118c:	ff7fffff 	.word	0xff7fffff
 8001190:	ffbfffff 	.word	0xffbfffff

08001194 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <ADC_DelayMicroSecond+0x34>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	490a      	ldr	r1, [pc, #40]	; (80011cc <ADC_DelayMicroSecond+0x38>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7fe ffb0 	bl	8000108 <__udivsi3>
 80011a8:	0003      	movs	r3, r0
 80011aa:	001a      	movs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4353      	muls	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80011b2:	e002      	b.n	80011ba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f9      	bne.n	80011b4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b004      	add	sp, #16
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000004 	.word	0x20000004
 80011cc:	000f4240 	.word	0x000f4240

080011d0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	231f      	movs	r3, #31
 80011e4:	401a      	ands	r2, r3
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <NVIC_EnableIRQ+0x28>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	4091      	lsls	r1, r2
 80011ec:	000a      	movs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	e000e100 	.word	0xe000e100

080011fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b7f      	cmp	r3, #127	; 0x7f
 8001210:	d932      	bls.n	8001278 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <NVIC_SetPriority+0xd4>)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	0019      	movs	r1, r3
 800121a:	230f      	movs	r3, #15
 800121c:	400b      	ands	r3, r1
 800121e:	3b08      	subs	r3, #8
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3306      	adds	r3, #6
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	18d3      	adds	r3, r2, r3
 8001228:	3304      	adds	r3, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1dfa      	adds	r2, r7, #7
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	0011      	movs	r1, r2
 8001232:	2203      	movs	r2, #3
 8001234:	400a      	ands	r2, r1
 8001236:	00d2      	lsls	r2, r2, #3
 8001238:	21ff      	movs	r1, #255	; 0xff
 800123a:	4091      	lsls	r1, r2
 800123c:	000a      	movs	r2, r1
 800123e:	43d2      	mvns	r2, r2
 8001240:	401a      	ands	r2, r3
 8001242:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	22ff      	movs	r2, #255	; 0xff
 800124a:	401a      	ands	r2, r3
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	0018      	movs	r0, r3
 8001252:	2303      	movs	r3, #3
 8001254:	4003      	ands	r3, r0
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <NVIC_SetPriority+0xd4>)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	001c      	movs	r4, r3
 8001262:	230f      	movs	r3, #15
 8001264:	4023      	ands	r3, r4
 8001266:	3b08      	subs	r3, #8
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	430a      	orrs	r2, r1
 800126c:	3306      	adds	r3, #6
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	18c3      	adds	r3, r0, r3
 8001272:	3304      	adds	r3, #4
 8001274:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001276:	e027      	b.n	80012c8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b25b      	sxtb	r3, r3
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	33c0      	adds	r3, #192	; 0xc0
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	589b      	ldr	r3, [r3, r2]
 8001288:	1dfa      	adds	r2, r7, #7
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	0011      	movs	r1, r2
 800128e:	2203      	movs	r2, #3
 8001290:	400a      	ands	r2, r1
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	21ff      	movs	r1, #255	; 0xff
 8001296:	4091      	lsls	r1, r2
 8001298:	000a      	movs	r2, r1
 800129a:	43d2      	mvns	r2, r2
 800129c:	401a      	ands	r2, r3
 800129e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	019b      	lsls	r3, r3, #6
 80012a4:	22ff      	movs	r2, #255	; 0xff
 80012a6:	401a      	ands	r2, r3
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	0018      	movs	r0, r3
 80012ae:	2303      	movs	r3, #3
 80012b0:	4003      	ands	r3, r0
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <NVIC_SetPriority+0xd8>)
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	430a      	orrs	r2, r1
 80012c2:	33c0      	adds	r3, #192	; 0xc0
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	501a      	str	r2, [r3, r0]
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b003      	add	sp, #12
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <SysTick_Config+0x40>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e010      	b.n	8001310 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <SysTick_Config+0x44>)
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	3a01      	subs	r2, #1
 80012f4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	2103      	movs	r1, #3
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ff7d 	bl	80011fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <SysTick_Config+0x44>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x44>)
 800130a:	2207      	movs	r2, #7
 800130c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130e:	2300      	movs	r3, #0
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}
 8001318:	00ffffff 	.word	0x00ffffff
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	210f      	movs	r1, #15
 800132c:	187b      	adds	r3, r7, r1
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	187b      	adds	r3, r7, r1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <NVIC_SetPriority>
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	0002      	movs	r2, r0
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff ff37 	bl	80011d0 <NVIC_EnableIRQ>
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ffaf 	bl	80012d8 <SysTick_Config>
 800137a:	0003      	movs	r3, r0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e061      	b.n	800145a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_DMA_Init+0xe0>)
 800139c:	4694      	mov	ip, r2
 800139e:	4463      	add	r3, ip
 80013a0:	2114      	movs	r1, #20
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7fe feb0 	bl	8000108 <__udivsi3>
 80013a8:	0003      	movs	r3, r0
 80013aa:	009a      	lsls	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <HAL_DMA_Init+0xe4>)
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2225      	movs	r2, #37	; 0x25
 80013ba:	2102      	movs	r1, #2
 80013bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_DMA_Init+0xe8>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	01db      	lsls	r3, r3, #7
 800140c:	429a      	cmp	r2, r3
 800140e:	d018      	beq.n	8001442 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_DMA_Init+0xec>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	211c      	movs	r1, #28
 800141a:	400b      	ands	r3, r1
 800141c:	210f      	movs	r1, #15
 800141e:	4099      	lsls	r1, r3
 8001420:	000b      	movs	r3, r1
 8001422:	43d9      	mvns	r1, r3
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_DMA_Init+0xec>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_DMA_Init+0xec>)
 800142c:	6819      	ldr	r1, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	201c      	movs	r0, #28
 8001438:	4003      	ands	r3, r0
 800143a:	409a      	lsls	r2, r3
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_DMA_Init+0xec>)
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2225      	movs	r2, #37	; 0x25
 800144c:	2101      	movs	r1, #1
 800144e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	bffdfff8 	.word	0xbffdfff8
 8001468:	40020000 	.word	0x40020000
 800146c:	ffff800f 	.word	0xffff800f
 8001470:	400200a8 	.word	0x400200a8

08001474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	221c      	movs	r2, #28
 8001492:	4013      	ands	r3, r2
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	d026      	beq.n	80014ee <HAL_DMA_IRQHandler+0x7a>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2204      	movs	r2, #4
 80014a4:	4013      	ands	r3, r2
 80014a6:	d022      	beq.n	80014ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	4013      	ands	r3, r2
 80014b2:	d107      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2104      	movs	r1, #4
 80014c0:	438a      	bics	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	221c      	movs	r2, #28
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2104      	movs	r1, #4
 80014d2:	4091      	lsls	r1, r2
 80014d4:	000a      	movs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d100      	bne.n	80014e2 <HAL_DMA_IRQHandler+0x6e>
 80014e0:	e071      	b.n	80015c6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	0010      	movs	r0, r2
 80014ea:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80014ec:	e06b      	b.n	80015c6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	221c      	movs	r2, #28
 80014f4:	4013      	ands	r3, r2
 80014f6:	2202      	movs	r2, #2
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	d02d      	beq.n	800155e <HAL_DMA_IRQHandler+0xea>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d029      	beq.n	800155e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2220      	movs	r2, #32
 8001512:	4013      	ands	r3, r2
 8001514:	d10b      	bne.n	800152e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	210a      	movs	r1, #10
 8001522:	438a      	bics	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2225      	movs	r2, #37	; 0x25
 800152a:	2101      	movs	r1, #1
 800152c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	221c      	movs	r2, #28
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2102      	movs	r1, #2
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2224      	movs	r2, #36	; 0x24
 8001546:	2100      	movs	r1, #0
 8001548:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d039      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	0010      	movs	r0, r2
 800155a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800155c:	e033      	b.n	80015c6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	221c      	movs	r2, #28
 8001564:	4013      	ands	r3, r2
 8001566:	2208      	movs	r2, #8
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	d02a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x154>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2208      	movs	r2, #8
 8001576:	4013      	ands	r3, r2
 8001578:	d026      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	210e      	movs	r1, #14
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	221c      	movs	r2, #28
 8001590:	401a      	ands	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2101      	movs	r1, #1
 8001598:	4091      	lsls	r1, r2
 800159a:	000a      	movs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2225      	movs	r2, #37	; 0x25
 80015a8:	2101      	movs	r1, #1
 80015aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	0010      	movs	r0, r2
 80015c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46c0      	nop			; (mov r8, r8)
}
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015e6:	e143      	b.n	8001870 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <HAL_GPIO_Init+0x30>
 80015fe:	e134      	b.n	800186a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b12      	cmp	r3, #18
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	58d3      	ldr	r3, [r2, r3]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2207      	movs	r2, #7
 8001622:	4013      	ands	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2107      	movs	r1, #7
 800163c:	400b      	ands	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	409a      	lsls	r2, r3
 8001642:	0013      	movs	r3, r2
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d00b      	beq.n	8001678 <HAL_GPIO_Init+0xa8>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d007      	beq.n	8001678 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166c:	2b11      	cmp	r3, #17
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b12      	cmp	r3, #18
 8001676:	d130      	bne.n	80016da <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	409a      	lsls	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	43da      	mvns	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	409a      	lsls	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	2201      	movs	r2, #1
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	401a      	ands	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	055b      	lsls	r3, r3, #21
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_GPIO_Init+0x17c>
 800174a:	e08e      	b.n	800186a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b4e      	ldr	r3, [pc, #312]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_GPIO_Init+0x2bc>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	589b      	ldr	r3, [r3, r2]
 8001764:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	23a0      	movs	r3, #160	; 0xa0
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	429a      	cmp	r2, r3
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x1d2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a41      	ldr	r2, [pc, #260]	; (8001890 <HAL_GPIO_Init+0x2c0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x1ce>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a40      	ldr	r2, [pc, #256]	; (8001894 <HAL_GPIO_Init+0x2c4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x1ca>
 8001796:	2302      	movs	r3, #2
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x1d4>
 800179a:	2306      	movs	r3, #6
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x1d4>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x1d4>
 80017a2:	2300      	movs	r3, #0
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	2103      	movs	r1, #3
 80017a8:	400a      	ands	r2, r1
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b4:	4935      	ldr	r1, [pc, #212]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4013      	ands	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43da      	mvns	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	4013      	ands	r3, r2
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	035b      	lsls	r3, r3, #13
 800182e:	4013      	ands	r3, r2
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	039b      	lsls	r3, r3, #14
 8001858:	4013      	ands	r3, r2
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	40da      	lsrs	r2, r3
 8001878:	1e13      	subs	r3, r2, #0
 800187a:	d000      	beq.n	800187e <HAL_GPIO_Init+0x2ae>
 800187c:	e6b4      	b.n	80015e8 <HAL_GPIO_Init+0x18>
  }
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b006      	add	sp, #24
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	50000400 	.word	0x50000400
 8001894:	50000800 	.word	0x50000800
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	0008      	movs	r0, r1
 80018a6:	0011      	movs	r1, r2
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	1c02      	adds	r2, r0, #0
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	1c7b      	adds	r3, r7, #1
 80018b0:	1c0a      	adds	r2, r1, #0
 80018b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80018b4:	1c7b      	adds	r3, r7, #1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018bc:	1cbb      	adds	r3, r7, #2
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018c4:	e003      	b.n	80018ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	881a      	ldrh	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	000a      	movs	r2, r1
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	1cbb      	adds	r3, r7, #2
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	405a      	eors	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	615a      	str	r2, [r3, #20]
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	0002      	movs	r2, r0
 8001904:	1dbb      	adds	r3, r7, #6
 8001906:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	1dba      	adds	r2, r7, #6
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	4013      	ands	r3, r2
 8001912:	d008      	beq.n	8001926 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001916:	1dba      	adds	r2, r7, #6
 8001918:	8812      	ldrh	r2, [r2, #0]
 800191a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800191c:	1dbb      	adds	r3, r7, #6
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f807 	bl	8001934 <HAL_GPIO_EXTI_Callback>
  }
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	0002      	movs	r2, r0
 800193c:	1dbb      	adds	r3, r7, #6
 800193e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06c      	b.n	8001a34 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	222e      	movs	r2, #46	; 0x2e
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d107      	bne.n	8001976 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	222d      	movs	r2, #45	; 0x2d
 800196a:	2100      	movs	r1, #0
 800196c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f7fe fdeb 	bl	800054c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	222e      	movs	r2, #46	; 0x2e
 800197a:	2102      	movs	r1, #2
 800197c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_LPTIM_Init+0x52>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	429a      	cmp	r2, r3
 8001998:	d103      	bne.n	80019a2 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	221e      	movs	r2, #30
 800199e:	4393      	bics	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_LPTIM_Init+0xf4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_LPTIM_Init+0xf8>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <HAL_LPTIM_Init+0xfc>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80019c4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80019ca:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80019d0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80019d6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d005      	beq.n	80019f2 <HAL_LPTIM_Init+0xaa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d107      	bne.n	8001a02 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80019fa:	4313      	orrs	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_LPTIM_Init+0xf4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00a      	beq.n	8001a22 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a14:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001a1a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	222e      	movs	r2, #46	; 0x2e
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	0000ffff 	.word	0x0000ffff
 8001a40:	ffff1f3f 	.word	0xffff1f3f
 8001a44:	ff19f1f8 	.word	0xff19f1f8

08001a48 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	222e      	movs	r2, #46	; 0x2e
 8001a56:	2102      	movs	r1, #2
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0589      	lsls	r1, r1, #22
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d00d      	beq.n	8001a8c <HAL_LPTIM_Counter_Start_IT+0x44>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4919      	ldr	r1, [pc, #100]	; (8001aec <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2110      	movs	r1, #16
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2104      	movs	r1, #4
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	222e      	movs	r2, #46	; 0x2e
 8001ad8:	2101      	movs	r1, #1
 8001ada:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40010400 	.word	0x40010400
 8001aec:	fffff1ff 	.word	0xfffff1ff

08001af0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10e      	bne.n	8001b24 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 f888 	bl	8001c34 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d10e      	bne.n	8001b50 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d107      	bne.n	8001b50 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f87a 	bl	8001c44 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d10e      	bne.n	8001b7c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2204      	movs	r2, #4
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d107      	bne.n	8001b7c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2204      	movs	r2, #4
 8001b72:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 f86c 	bl	8001c54 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2208      	movs	r2, #8
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d10e      	bne.n	8001ba8 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2208      	movs	r2, #8
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d107      	bne.n	8001ba8 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f85e 	bl	8001c64 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2210      	movs	r2, #16
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d107      	bne.n	8001bd4 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 f850 	bl	8001c74 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d10e      	bne.n	8001c00 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2220      	movs	r2, #32
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d107      	bne.n	8001c00 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f842 	bl	8001c84 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b40      	cmp	r3, #64	; 0x40
 8001c0c:	d10e      	bne.n	8001c2c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2240      	movs	r2, #64	; 0x40
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d107      	bne.n	8001c2c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f834 	bl	8001c94 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f000 fb6a 	bl	800238c <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	4bc7      	ldr	r3, [pc, #796]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc2:	4bc5      	ldr	r3, [pc, #788]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCC_OscConfig+0x36>
 8001cd8:	e07d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d112      	bne.n	8001d0c <HAL_RCC_OscConfig+0x68>
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	4bb9      	ldr	r3, [pc, #740]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5a>
 8001cfc:	e06a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x130>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d166      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f000 fb40 	bl	800238c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x84>
 8001d18:	4baf      	ldr	r3, [pc, #700]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4bae      	ldr	r3, [pc, #696]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	0249      	lsls	r1, r1, #9
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e027      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	23a0      	movs	r3, #160	; 0xa0
 8001d2e:	02db      	lsls	r3, r3, #11
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d10e      	bne.n	8001d52 <HAL_RCC_OscConfig+0xae>
 8001d34:	4ba8      	ldr	r3, [pc, #672]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4ba7      	ldr	r3, [pc, #668]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	02c9      	lsls	r1, r1, #11
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	4ba5      	ldr	r3, [pc, #660]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4ba4      	ldr	r3, [pc, #656]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	0249      	lsls	r1, r1, #9
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e012      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d52:	4ba1      	ldr	r3, [pc, #644]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d58:	49a0      	ldr	r1, [pc, #640]	; (8001fdc <HAL_RCC_OscConfig+0x338>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	025b      	lsls	r3, r3, #9
 8001d66:	4013      	ands	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4b9a      	ldr	r3, [pc, #616]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b99      	ldr	r3, [pc, #612]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d72:	499b      	ldr	r1, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x33c>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d014      	beq.n	8001daa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f804 	bl	8000d8c <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8a:	f7fe ffff 	bl	8000d8c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e2f7      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	029b      	lsls	r3, r3, #10
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0xe6>
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe ffef 	bl	8000d8c <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe ffea 	bl	8000d8c <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e2e2      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dc6:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x110>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d100      	bne.n	8001de2 <HAL_RCC_OscConfig+0x13e>
 8001de0:	e098      	b.n	8001f14 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	2220      	movs	r2, #32
 8001dec:	4013      	ands	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001df0:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b78      	ldr	r3, [pc, #480]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001df6:	2120      	movs	r1, #32
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	2220      	movs	r2, #32
 8001e00:	4393      	bics	r3, r2
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d13d      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1e8>
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d13a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e16:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_RCC_OscConfig+0x186>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e2b0      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b6b      	ldr	r3, [pc, #428]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a6d      	ldr	r2, [pc, #436]	; (8001fe4 <HAL_RCC_OscConfig+0x340>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	021a      	lsls	r2, r3, #8
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e40:	4b65      	ldr	r3, [pc, #404]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2209      	movs	r2, #9
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 fbcb 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8001e56:	0001      	movs	r1, r0
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	220f      	movs	r2, #15
 8001e60:	4013      	ands	r3, r2
 8001e62:	4a61      	ldr	r2, [pc, #388]	; (8001fe8 <HAL_RCC_OscConfig+0x344>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	000a      	movs	r2, r1
 8001e68:	40da      	lsrs	r2, r3
 8001e6a:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x348>)
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e6e:	2513      	movs	r5, #19
 8001e70:	197c      	adds	r4, r7, r5
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7fe ff54 	bl	8000d20 <HAL_InitTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e7c:	197b      	adds	r3, r7, r5
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d047      	beq.n	8001f14 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8001e84:	2313      	movs	r3, #19
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	e27f      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d027      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e92:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2209      	movs	r2, #9
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ff72 	bl	8000d8c <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eae:	f7fe ff6d 	bl	8000d8c <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e265      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ec0:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d0f1      	beq.n	8001eae <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <HAL_RCC_OscConfig+0x340>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	e018      	b.n	8001f14 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	438a      	bics	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe ff4d 	bl	8000d8c <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7fe ff48 	bl	8000d8c <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e240      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d1f1      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d100      	bne.n	8001f20 <HAL_RCC_OscConfig+0x27c>
 8001f1e:	e09e      	b.n	800205e <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d13f      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x29a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e226      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <HAL_RCC_OscConfig+0x34c>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	0a19      	lsrs	r1, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	061a      	lsls	r2, r3, #24
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	0b5b      	lsrs	r3, r3, #13
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0212      	lsls	r2, r2, #8
 8001f72:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x344>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_OscConfig+0x348>)
 8001f86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f88:	2513      	movs	r5, #19
 8001f8a:	197c      	adds	r4, r7, r5
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7fe fec7 	bl	8000d20 <HAL_InitTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f96:	197b      	adds	r3, r7, r5
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d05f      	beq.n	800205e <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001f9e:	2313      	movs	r3, #19
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	e1f2      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d03d      	beq.n	800202a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	0049      	lsls	r1, r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fee6 	bl	8000d8c <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fc4:	e016      	b.n	8001ff4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fee1 	bl	8000d8c <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d90f      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1d9      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	fffeffff 	.word	0xfffeffff
 8001fe0:	fffbffff 	.word	0xfffbffff
 8001fe4:	ffffe0ff 	.word	0xffffe0ff
 8001fe8:	08003494 	.word	0x08003494
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ff4:	4bca      	ldr	r3, [pc, #808]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0e2      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	4bc7      	ldr	r3, [pc, #796]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4ac7      	ldr	r2, [pc, #796]	; (8002324 <HAL_RCC_OscConfig+0x680>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	4bc4      	ldr	r3, [pc, #784]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002014:	4bc2      	ldr	r3, [pc, #776]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	0a19      	lsrs	r1, r3, #8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	061a      	lsls	r2, r3, #24
 8002022:	4bbf      	ldr	r3, [pc, #764]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	e019      	b.n	800205e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800202a:	4bbd      	ldr	r3, [pc, #756]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4bbc      	ldr	r3, [pc, #752]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002030:	49bd      	ldr	r1, [pc, #756]	; (8002328 <HAL_RCC_OscConfig+0x684>)
 8002032:	400a      	ands	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe fea9 	bl	8000d8c <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002040:	f7fe fea4 	bl	8000d8c <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e19c      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002052:	4bb3      	ldr	r3, [pc, #716]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2208      	movs	r2, #8
 8002064:	4013      	ands	r3, r2
 8002066:	d036      	beq.n	80020d6 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d019      	beq.n	80020a4 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002070:	4bab      	ldr	r3, [pc, #684]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002074:	4baa      	ldr	r3, [pc, #680]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002076:	2101      	movs	r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe fe86 	bl	8000d8c <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002086:	f7fe fe81 	bl	8000d8c <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e179      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002098:	4ba1      	ldr	r3, [pc, #644]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800209a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d0f1      	beq.n	8002086 <HAL_RCC_OscConfig+0x3e2>
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b9e      	ldr	r3, [pc, #632]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a8:	4b9d      	ldr	r3, [pc, #628]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	438a      	bics	r2, r1
 80020ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7fe fe6c 	bl	8000d8c <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ba:	f7fe fe67 	bl	8000d8c <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e15f      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020cc:	4b94      	ldr	r3, [pc, #592]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	d1f1      	bne.n	80020ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_RCC_OscConfig+0x43e>
 80020e0:	e0af      	b.n	8002242 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2323      	movs	r3, #35	; 0x23
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80020ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	055b      	lsls	r3, r3, #21
 80020f2:	4013      	ands	r3, r2
 80020f4:	d10a      	bne.n	800210c <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80020f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	0549      	lsls	r1, r1, #21
 8002100:	430a      	orrs	r2, r1
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002104:	2323      	movs	r3, #35	; 0x23
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b87      	ldr	r3, [pc, #540]	; (800232c <HAL_RCC_OscConfig+0x688>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d11a      	bne.n	800214e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x688>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <HAL_RCC_OscConfig+0x688>)
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fe31 	bl	8000d8c <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7fe fe2c 	bl	8000d8c <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e124      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x688>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	429a      	cmp	r2, r3
 8002158:	d107      	bne.n	800216a <HAL_RCC_OscConfig+0x4c6>
 800215a:	4b71      	ldr	r3, [pc, #452]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800215c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	651a      	str	r2, [r3, #80]	; 0x50
 8002168:	e031      	b.n	80021ce <HAL_RCC_OscConfig+0x52a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x4e8>
 8002172:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002176:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002178:	496b      	ldr	r1, [pc, #428]	; (8002328 <HAL_RCC_OscConfig+0x684>)
 800217a:	400a      	ands	r2, r1
 800217c:	651a      	str	r2, [r3, #80]	; 0x50
 800217e:	4b68      	ldr	r3, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002184:	496a      	ldr	r1, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x68c>)
 8002186:	400a      	ands	r2, r1
 8002188:	651a      	str	r2, [r3, #80]	; 0x50
 800218a:	e020      	b.n	80021ce <HAL_RCC_OscConfig+0x52a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	23a0      	movs	r3, #160	; 0xa0
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	429a      	cmp	r2, r3
 8002196:	d10e      	bne.n	80021b6 <HAL_RCC_OscConfig+0x512>
 8002198:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800219a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800219c:	4b60      	ldr	r3, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	00c9      	lsls	r1, r1, #3
 80021a2:	430a      	orrs	r2, r1
 80021a4:	651a      	str	r2, [r3, #80]	; 0x50
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0049      	lsls	r1, r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x52a>
 80021b6:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ba:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021bc:	495a      	ldr	r1, [pc, #360]	; (8002328 <HAL_RCC_OscConfig+0x684>)
 80021be:	400a      	ands	r2, r1
 80021c0:	651a      	str	r2, [r3, #80]	; 0x50
 80021c2:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	4959      	ldr	r1, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x68c>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fdd9 	bl	8000d8c <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe fdd4 	bl	8000d8c <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_RCC_OscConfig+0x690>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0cb      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f4:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCC_OscConfig+0x53c>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe fdc3 	bl	8000d8c <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220a:	e009      	b.n	8002220 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fdbe 	bl	8000d8c <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4a47      	ldr	r2, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x690>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0b5      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d1ef      	bne.n	800220c <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222c:	2323      	movs	r3, #35	; 0x23
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800223c:	493e      	ldr	r1, [pc, #248]	; (8002338 <HAL_RCC_OscConfig+0x694>)
 800223e:	400a      	ands	r2, r1
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x5a8>
 800224a:	e09e      	b.n	800238a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d100      	bne.n	8002254 <HAL_RCC_OscConfig+0x5b0>
 8002252:	e077      	b.n	8002344 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2b02      	cmp	r3, #2
 800225a:	d145      	bne.n	80022e8 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002262:	4936      	ldr	r1, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x698>)
 8002264:	400a      	ands	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fd90 	bl	8000d8c <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fd8b 	bl	8000d8c <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e083      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	049b      	lsls	r3, r3, #18
 800228c:	4013      	ands	r3, r2
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_RCC_OscConfig+0x69c>)
 8002296:	4013      	ands	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	431a      	orrs	r2, r3
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0449      	lsls	r1, r1, #17
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fd65 	bl	8000d8c <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fd60 	bl	8000d8c <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e058      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	049b      	lsls	r3, r3, #18
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x624>
 80022e6:	e050      	b.n	800238a <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 80022ee:	4913      	ldr	r1, [pc, #76]	; (800233c <HAL_RCC_OscConfig+0x698>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe fd4a 	bl	8000d8c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fd45 	bl	8000d8c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_OscConfig+0x67c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	049b      	lsls	r3, r3, #18
 8002318:	4013      	ands	r3, r2
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x65a>
 800231c:	e035      	b.n	800238a <HAL_RCC_OscConfig+0x6e6>
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	40021000 	.word	0x40021000
 8002324:	ffff1fff 	.word	0xffff1fff
 8002328:	fffffeff 	.word	0xfffffeff
 800232c:	40007000 	.word	0x40007000
 8002330:	fffffbff 	.word	0xfffffbff
 8002334:	00001388 	.word	0x00001388
 8002338:	efffffff 	.word	0xefffffff
 800233c:	feffffff 	.word	0xfeffffff
 8002340:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e01d      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x6f0>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	401a      	ands	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	429a      	cmp	r2, r3
 8002364:	d10f      	bne.n	8002386 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	23f0      	movs	r3, #240	; 0xf0
 800236a:	039b      	lsls	r3, r3, #14
 800236c:	401a      	ands	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	23c0      	movs	r3, #192	; 0xc0
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	401a      	ands	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b00a      	add	sp, #40	; 0x28
 8002392:	bdb0      	pop	{r4, r5, r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e10d      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d911      	bls.n	80023de <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b85      	ldr	r3, [pc, #532]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0f4      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2202      	movs	r2, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b7a      	ldr	r3, [pc, #488]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	22f0      	movs	r2, #240	; 0xf0
 80023ee:	4393      	bics	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4b77      	ldr	r3, [pc, #476]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	4013      	ands	r3, r2
 8002404:	d100      	bne.n	8002408 <HAL_RCC_ClockConfig+0x70>
 8002406:	e089      	b.n	800251c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002410:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	4013      	ands	r3, r2
 800241a:	d120      	bne.n	800245e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0d3      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	049b      	lsls	r3, r3, #18
 8002430:	4013      	ands	r3, r2
 8002432:	d114      	bne.n	800245e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0c7      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d106      	bne.n	800244e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002440:	4b64      	ldr	r3, [pc, #400]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2204      	movs	r2, #4
 8002446:	4013      	ands	r3, r2
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0bc      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800244e:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0b4      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2203      	movs	r2, #3
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002472:	f7fe fc8b 	bl	8000d8c <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d111      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002482:	e009      	b.n	8002498 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fc82 	bl	8000d8c <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e097      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002498:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	220c      	movs	r2, #12
 800249e:	4013      	ands	r3, r2
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d1ef      	bne.n	8002484 <HAL_RCC_ClockConfig+0xec>
 80024a4:	e03a      	b.n	800251c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d111      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fc6c 	bl	8000d8c <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e081      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d1ef      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x118>
 80024d0:	e024      	b.n	800251c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d11b      	bne.n	8002512 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024da:	e009      	b.n	80024f0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe fc56 	bl	8000d8c <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e06b      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	220c      	movs	r2, #12
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d1ef      	bne.n	80024dc <HAL_RCC_ClockConfig+0x144>
 80024fc:	e00e      	b.n	800251c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fe:	f7fe fc45 	bl	8000d8c <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_RCC_ClockConfig+0x240>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e05a      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	220c      	movs	r2, #12
 8002518:	4013      	ands	r3, r2
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d211      	bcs.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4393      	bics	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x238>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e03c      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <HAL_RCC_ClockConfig+0x244>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2208      	movs	r2, #8
 8002572:	4013      	ands	r3, r2
 8002574:	d00a      	beq.n	800258c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_RCC_ClockConfig+0x248>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00da      	lsls	r2, r3, #3
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258c:	f000 f82e 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8002590:	0001      	movs	r1, r0
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_RCC_ClockConfig+0x23c>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	220f      	movs	r2, #15
 800259a:	4013      	ands	r3, r2
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_RCC_ClockConfig+0x24c>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	000a      	movs	r2, r1
 80025a2:	40da      	lsrs	r2, r3
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_ClockConfig+0x250>)
 80025a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80025a8:	250b      	movs	r5, #11
 80025aa:	197c      	adds	r4, r7, r5
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fbb7 	bl	8000d20 <HAL_InitTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025b6:	197b      	adds	r3, r7, r5
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80025be:	230b      	movs	r3, #11
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	00001388 	.word	0x00001388
 80025dc:	fffff8ff 	.word	0xfffff8ff
 80025e0:	ffffc7ff 	.word	0xffffc7ff
 80025e4:	08003494 	.word	0x08003494
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	220c      	movs	r2, #12
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d00e      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d00f      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x3a>
 8002606:	2b04      	cmp	r3, #4
 8002608:	d157      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2210      	movs	r2, #16
 8002610:	4013      	ands	r3, r2
 8002612:	d002      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002614:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002616:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002618:	e05d      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800261c:	613b      	str	r3, [r7, #16]
      break;
 800261e:	e05a      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_RCC_GetSysClockFreq+0x100>)
 8002622:	613b      	str	r3, [r7, #16]
      break;
 8002624:	e057      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	0c9b      	lsrs	r3, r3, #18
 800262a:	220f      	movs	r2, #15
 800262c:	4013      	ands	r3, r2
 800262e:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	0d9b      	lsrs	r3, r3, #22
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	3301      	adds	r3, #1
 800263e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002640:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	4013      	ands	r3, r2
 800264a:	d00f      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	000a      	movs	r2, r1
 8002650:	0152      	lsls	r2, r2, #5
 8002652:	1a52      	subs	r2, r2, r1
 8002654:	0193      	lsls	r3, r2, #6
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	185b      	adds	r3, r3, r1
 800265c:	025b      	lsls	r3, r3, #9
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f7fd fd51 	bl	8000108 <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e023      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2210      	movs	r2, #16
 8002672:	4013      	ands	r3, r2
 8002674:	d00f      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	000a      	movs	r2, r1
 800267a:	0152      	lsls	r2, r2, #5
 800267c:	1a52      	subs	r2, r2, r1
 800267e:	0193      	lsls	r3, r2, #6
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	185b      	adds	r3, r3, r1
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f7fd fd3c 	bl	8000108 <__udivsi3>
 8002690:	0003      	movs	r3, r0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e00e      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	000a      	movs	r2, r1
 800269a:	0152      	lsls	r2, r2, #5
 800269c:	1a52      	subs	r2, r2, r1
 800269e:	0193      	lsls	r3, r2, #6
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	185b      	adds	r3, r3, r1
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7fd fd2c 	bl	8000108 <__udivsi3>
 80026b0:	0003      	movs	r3, r0
 80026b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
      break;
 80026b8:	e00d      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	2207      	movs	r2, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0212      	lsls	r2, r2, #8
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026d6:	693b      	ldr	r3, [r7, #16]
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	080034a4 	.word	0x080034a4

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2220      	movs	r2, #32
 8002702:	4013      	ands	r3, r2
 8002704:	d100      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002706:	e0c7      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002708:	2317      	movs	r3, #23
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002710:	4b82      	ldr	r3, [pc, #520]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	4013      	ands	r3, r2
 800271a:	d10a      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b7f      	ldr	r3, [pc, #508]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800271e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0549      	lsls	r1, r1, #21
 8002726:	430a      	orrs	r2, r1
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800272a:	2317      	movs	r3, #23
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d11a      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b77      	ldr	r3, [pc, #476]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	0049      	lsls	r1, r1, #1
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274c:	f7fe fb1e 	bl	8000d8c <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe fb19 	bl	8000d8c <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0d4      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4013      	ands	r3, r2
 8002772:	d0f0      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	23c0      	movs	r3, #192	; 0xc0
 800277a:	039b      	lsls	r3, r3, #14
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	23c0      	movs	r3, #192	; 0xc0
 8002786:	039b      	lsls	r3, r3, #14
 8002788:	4013      	ands	r3, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d013      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	23c0      	movs	r3, #192	; 0xc0
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	401a      	ands	r2, r3
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	429a      	cmp	r2, r3
 80027a0:	d10a      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027a2:	4b5e      	ldr	r3, [pc, #376]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	401a      	ands	r2, r3
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	029b      	lsls	r3, r3, #10
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d101      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0ac      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80027b8:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027bc:	23c0      	movs	r3, #192	; 0xc0
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03b      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	23c0      	movs	r3, #192	; 0xc0
 80027d0:	029b      	lsls	r3, r3, #10
 80027d2:	4013      	ands	r3, r2
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d033      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2220      	movs	r2, #32
 80027e0:	4013      	ands	r3, r2
 80027e2:	d02e      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027e4:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ee:	4b4b      	ldr	r3, [pc, #300]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0309      	lsls	r1, r1, #12
 80027f8:	430a      	orrs	r2, r1
 80027fa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80027fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002800:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002802:	4949      	ldr	r1, [pc, #292]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002804:	400a      	ands	r2, r1
 8002806:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002808:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d014      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe fab8 	bl	8000d8c <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002820:	e009      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fab3 	bl	8000d8c <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a3f      	ldr	r2, [pc, #252]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e06d      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d0ef      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	029b      	lsls	r3, r3, #10
 800284a:	401a      	ands	r2, r3
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	429a      	cmp	r2, r3
 8002852:	d10c      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a35      	ldr	r2, [pc, #212]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	23c0      	movs	r3, #192	; 0xc0
 8002864:	039b      	lsls	r3, r3, #14
 8002866:	401a      	ands	r2, r3
 8002868:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002870:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	23c0      	movs	r3, #192	; 0xc0
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	401a      	ands	r2, r3
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800287e:	430a      	orrs	r2, r1
 8002880:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002882:	2317      	movs	r3, #23
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800288e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002892:	4928      	ldr	r1, [pc, #160]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002894:	400a      	ands	r2, r1
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	220c      	movs	r2, #12
 80028a8:	4393      	bics	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	4013      	ands	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800290c:	430a      	orrs	r2, r1
 800290e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b006      	add	sp, #24
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
 8002924:	fffcffff 	.word	0xfffcffff
 8002928:	fff7ffff 	.word	0xfff7ffff
 800292c:	00001388 	.word	0x00001388
 8002930:	ffcfffff 	.word	0xffcfffff
 8002934:	efffffff 	.word	0xefffffff
 8002938:	fffff3ff 	.word	0xfffff3ff
 800293c:	ffffcfff 	.word	0xffffcfff
 8002940:	fff3ffff 	.word	0xfff3ffff

08002944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e01e      	b.n	8002994 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2239      	movs	r2, #57	; 0x39
 800295a:	5c9b      	ldrb	r3, [r3, r2]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2238      	movs	r2, #56	; 0x38
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f7fe f901 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2239      	movs	r2, #57	; 0x39
 8002976:	2102      	movs	r1, #2
 8002978:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	0019      	movs	r1, r3
 8002984:	0010      	movs	r0, r2
 8002986:	f000 faff 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2239      	movs	r2, #57	; 0x39
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2207      	movs	r2, #7
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d007      	beq.n	80029d6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e01e      	b.n	8002a30 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2239      	movs	r2, #57	; 0x39
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2238      	movs	r2, #56	; 0x38
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe f89d 	bl	8000b48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2239      	movs	r2, #57	; 0x39
 8002a12:	2102      	movs	r1, #2
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f000 fab1 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2239      	movs	r2, #57	; 0x39
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fc84 	bl	8003358 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2207      	movs	r2, #7
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d007      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d124      	bne.n	8002adc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d11d      	bne.n	8002adc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4252      	negs	r2, r2
 8002aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fa4a 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e007      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 fa3d 	bl	8002f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fa49 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d125      	bne.n	8002b36 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2204      	movs	r2, #4
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d11e      	bne.n	8002b36 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2205      	movs	r2, #5
 8002afe:	4252      	negs	r2, r2
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	23c0      	movs	r3, #192	; 0xc0
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fa1d 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002b1e:	e007      	b.n	8002b30 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fa10 	bl	8002f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fa1c 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d124      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d11d      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2209      	movs	r2, #9
 8002b58:	4252      	negs	r2, r2
 8002b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 f9f1 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002b76:	e007      	b.n	8002b88 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 f9e4 	bl	8002f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f9f0 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2210      	movs	r2, #16
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d125      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d11e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2211      	movs	r2, #17
 8002bb0:	4252      	negs	r2, r2
 8002bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 f9c4 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e007      	b.n	8002be2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 f9b7 	bl	8002f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 f9c3 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10f      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d108      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	4252      	negs	r2, r2
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f991 	bl	8002f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d10f      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d108      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2241      	movs	r2, #65	; 0x41
 8002c38:	4252      	negs	r2, r2
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f99a 	bl	8002f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2238      	movs	r2, #56	; 0x38
 8002c5c:	5c9b      	ldrb	r3, [r3, r2]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0a4      	b.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2238      	movs	r2, #56	; 0x38
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2239      	movs	r2, #57	; 0x39
 8002c72:	2102      	movs	r1, #2
 8002c74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d029      	beq.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002c7c:	d802      	bhi.n	8002c84 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002c82:	e08c      	b.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d046      	beq.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d065      	beq.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002c8c:	e087      	b.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	0011      	movs	r1, r2
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 f9c0 	bl	800301c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2108      	movs	r1, #8
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	438a      	bics	r2, r1
 8002cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6999      	ldr	r1, [r3, #24]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
      break;
 8002cce:	e066      	b.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	0011      	movs	r1, r2
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f9db 	bl	8003094 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0109      	lsls	r1, r1, #4
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	492f      	ldr	r1, [pc, #188]	; (8002db8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6999      	ldr	r1, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	619a      	str	r2, [r3, #24]
      break;
 8002d14:	e043      	b.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	0011      	movs	r1, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f9fa 	bl	8003118 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2108      	movs	r1, #8
 8002d30:	430a      	orrs	r2, r1
 8002d32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2104      	movs	r1, #4
 8002d40:	438a      	bics	r2, r1
 8002d42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69d9      	ldr	r1, [r3, #28]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	61da      	str	r2, [r3, #28]
      break;
 8002d56:	e022      	b.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	0011      	movs	r1, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 fa19 	bl	8003198 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0109      	lsls	r1, r1, #4
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	490d      	ldr	r1, [pc, #52]	; (8002db8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69d9      	ldr	r1, [r3, #28]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	021a      	lsls	r2, r3, #8
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	61da      	str	r2, [r3, #28]
      break;
 8002d9c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2239      	movs	r2, #57	; 0x39
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2238      	movs	r2, #56	; 0x38
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b004      	add	sp, #16
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	fffffbff 	.word	0xfffffbff

08002dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2238      	movs	r2, #56	; 0x38
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIM_ConfigClockSource+0x18>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0ab      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x170>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2238      	movs	r2, #56	; 0x38
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2239      	movs	r2, #57	; 0x39
 8002de0:	2102      	movs	r1, #2
 8002de2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2277      	movs	r2, #119	; 0x77
 8002df0:	4393      	bics	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a4f      	ldr	r2, [pc, #316]	; (8002f34 <HAL_TIM_ConfigClockSource+0x178>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d100      	bne.n	8002e0e <HAL_TIM_ConfigClockSource+0x52>
 8002e0c:	e06b      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x12a>
 8002e0e:	d80e      	bhi.n	8002e2e <HAL_TIM_ConfigClockSource+0x72>
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d100      	bne.n	8002e16 <HAL_TIM_ConfigClockSource+0x5a>
 8002e14:	e077      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x14a>
 8002e16:	d803      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x64>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d100      	bne.n	8002e1e <HAL_TIM_ConfigClockSource+0x62>
 8002e1c:	e073      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e1e:	e07c      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d100      	bne.n	8002e26 <HAL_TIM_ConfigClockSource+0x6a>
 8002e24:	e06f      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x14a>
 8002e26:	2b30      	cmp	r3, #48	; 0x30
 8002e28:	d100      	bne.n	8002e2c <HAL_TIM_ConfigClockSource+0x70>
 8002e2a:	e06c      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002e2c:	e075      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e2e:	2b70      	cmp	r3, #112	; 0x70
 8002e30:	d00e      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x94>
 8002e32:	d804      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x82>
 8002e34:	2b50      	cmp	r3, #80	; 0x50
 8002e36:	d036      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0xea>
 8002e38:	2b60      	cmp	r3, #96	; 0x60
 8002e3a:	d044      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002e3c:	e06d      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	0152      	lsls	r2, r2, #5
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d068      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x15c>
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	0192      	lsls	r2, r2, #6
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d017      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002e4e:	e064      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6899      	ldr	r1, [r3, #8]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f000 fa5a 	bl	8003318 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2277      	movs	r2, #119	; 0x77
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]
      break;
 8002e7c:	e04d      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f000 fa43 	bl	8003318 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	01c9      	lsls	r1, r1, #7
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
      break;
 8002ea4:	e039      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	f000 f9b6 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2150      	movs	r1, #80	; 0x50
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 fa10 	bl	80032e4 <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e029      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	f000 f9d4 	bl	8003280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2160      	movs	r1, #96	; 0x60
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 fa00 	bl	80032e4 <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e019      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	f000 f996 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f9f0 	bl	80032e4 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e009      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0019      	movs	r1, r3
 8002f10:	0010      	movs	r0, r2
 8002f12:	f000 f9e7 	bl	80032e4 <TIM_ITRx_SetConfig>
      break;
 8002f16:	e000      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002f18:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2239      	movs	r2, #57	; 0x39
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2238      	movs	r2, #56	; 0x38
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	ffff00ff 	.word	0xffff00ff

08002f38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	05db      	lsls	r3, r3, #23
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0x22>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <TIM_Base_SetConfig+0x8c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2270      	movs	r2, #112	; 0x70
 8002fae:	4393      	bics	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d003      	beq.n	8002fce <TIM_Base_SetConfig+0x46>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <TIM_Base_SetConfig+0x8c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <TIM_Base_SetConfig+0x90>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	4393      	bics	r3, r2
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	615a      	str	r2, [r3, #20]
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40010800 	.word	0x40010800
 8003018:	fffffcff 	.word	0xfffffcff

0800301c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2201      	movs	r2, #1
 800302c:	4393      	bics	r3, r2
 800302e:	001a      	movs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2270      	movs	r2, #112	; 0x70
 800304a:	4393      	bics	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2203      	movs	r2, #3
 8003052:	4393      	bics	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2202      	movs	r2, #2
 8003064:	4393      	bics	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}

08003094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	2210      	movs	r2, #16
 80030a4:	4393      	bics	r3, r2
 80030a6:	001a      	movs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <TIM_OC2_SetConfig+0x7c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <TIM_OC2_SetConfig+0x80>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2220      	movs	r2, #32
 80030de:	4393      	bics	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b006      	add	sp, #24
 800310e:	bd80      	pop	{r7, pc}
 8003110:	ffff8fff 	.word	0xffff8fff
 8003114:	fffffcff 	.word	0xfffffcff

08003118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <TIM_OC3_SetConfig+0x78>)
 8003128:	401a      	ands	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2270      	movs	r2, #112	; 0x70
 8003144:	4393      	bics	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2203      	movs	r2, #3
 800314c:	4393      	bics	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <TIM_OC3_SetConfig+0x7c>)
 800315e:	4013      	ands	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	621a      	str	r2, [r3, #32]
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b006      	add	sp, #24
 800318e:	bd80      	pop	{r7, pc}
 8003190:	fffffeff 	.word	0xfffffeff
 8003194:	fffffdff 	.word	0xfffffdff

08003198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <TIM_OC4_SetConfig+0x7c>)
 80031a8:	401a      	ands	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <TIM_OC4_SetConfig+0x80>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <TIM_OC4_SetConfig+0x84>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <TIM_OC4_SetConfig+0x88>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	031b      	lsls	r3, r3, #12
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b006      	add	sp, #24
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	ffffefff 	.word	0xffffefff
 8003218:	ffff8fff 	.word	0xffff8fff
 800321c:	fffffcff 	.word	0xfffffcff
 8003220:	ffffdfff 	.word	0xffffdfff

08003224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2201      	movs	r2, #1
 800323c:	4393      	bics	r3, r2
 800323e:	001a      	movs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	22f0      	movs	r2, #240	; 0xf0
 800324e:	4393      	bics	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	220a      	movs	r2, #10
 8003260:	4393      	bics	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	621a      	str	r2, [r3, #32]
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}

08003280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	2210      	movs	r2, #16
 8003292:	4393      	bics	r3, r2
 8003294:	001a      	movs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <TIM_TI2_ConfigInputStage+0x60>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	22a0      	movs	r2, #160	; 0xa0
 80032bc:	4393      	bics	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b006      	add	sp, #24
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	ffff0fff 	.word	0xffff0fff

080032e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2270      	movs	r2, #112	; 0x70
 80032f8:	4393      	bics	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	2207      	movs	r2, #7
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	609a      	str	r2, [r3, #8]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <TIM_ETR_SetConfig+0x3c>)
 8003330:	4013      	ands	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	431a      	orrs	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b006      	add	sp, #24
 8003352:	bd80      	pop	{r7, pc}
 8003354:	ffff00ff 	.word	0xffff00ff

08003358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	221f      	movs	r2, #31
 8003368:	4013      	ands	r3, r2
 800336a:	2201      	movs	r2, #1
 800336c:	409a      	lsls	r2, r3
 800336e:	0013      	movs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	43d2      	mvns	r2, r2
 800337a:	401a      	ands	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	211f      	movs	r1, #31
 8003388:	400b      	ands	r3, r1
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4099      	lsls	r1, r3
 800338e:	000b      	movs	r3, r1
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b006      	add	sp, #24
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2238      	movs	r2, #56	; 0x38
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e032      	b.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2238      	movs	r2, #56	; 0x38
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2239      	movs	r2, #57	; 0x39
 80033c2:	2102      	movs	r1, #2
 80033c4:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2270      	movs	r2, #112	; 0x70
 80033da:	4393      	bics	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	4393      	bics	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2239      	movs	r2, #57	; 0x39
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2238      	movs	r2, #56	; 0x38
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	2600      	movs	r6, #0
 8003428:	4d0c      	ldr	r5, [pc, #48]	; (800345c <__libc_init_array+0x38>)
 800342a:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342c:	1b64      	subs	r4, r4, r5
 800342e:	10a4      	asrs	r4, r4, #2
 8003430:	42a6      	cmp	r6, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	2600      	movs	r6, #0
 8003436:	f000 f821 	bl	800347c <_init>
 800343a:	4d0a      	ldr	r5, [pc, #40]	; (8003464 <__libc_init_array+0x40>)
 800343c:	4c0a      	ldr	r4, [pc, #40]	; (8003468 <__libc_init_array+0x44>)
 800343e:	1b64      	subs	r4, r4, r5
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	42a6      	cmp	r6, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	00b3      	lsls	r3, r6, #2
 800344a:	58eb      	ldr	r3, [r5, r3]
 800344c:	4798      	blx	r3
 800344e:	3601      	adds	r6, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	00b3      	lsls	r3, r6, #2
 8003454:	58eb      	ldr	r3, [r5, r3]
 8003456:	4798      	blx	r3
 8003458:	3601      	adds	r6, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	080034b0 	.word	0x080034b0
 8003460:	080034b0 	.word	0x080034b0
 8003464:	080034b0 	.word	0x080034b0
 8003468:	080034b4 	.word	0x080034b4

0800346c <memset>:
 800346c:	0003      	movs	r3, r0
 800346e:	1812      	adds	r2, r2, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	7019      	strb	r1, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
